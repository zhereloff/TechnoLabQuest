
TechoLabPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e88  08008e88  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e90  08008e90  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e90  08008e90  00018e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08008e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae0  200000c4  08008f5c  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  08008f5c  00024ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3e9  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b98  00000000  00000000  0003b4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001680  00000000  00000000  0003f078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001518  00000000  00000000  000406f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ee5  00000000  00000000  00041c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a53f  00000000  00000000  00067af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f55  00000000  00000000  00082034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016af89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000624c  00000000  00000000  0016afdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008c8c 	.word	0x08008c8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	08008c8c 	.word	0x08008c8c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_ZN6Button12getLastStateEv>:
		}
		void setCurrentState(uint8_t state){
			this->current_button_state = state;
		}

		uint8_t getLastState(){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
			return this->last_button_state;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
		}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <_ZN6Button15getCurrentStateEv>:
		uint8_t getCurrentState(){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
			return this->current_button_state;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	785b      	ldrb	r3, [r3, #1]
		}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <_ZN6Button14getButtonEventEv>:
#include "button.h"



const uint8_t* Button::getButtonEvent()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	static ButtonEvent events;

	if(getCurrentState() == GPIO_PIN_SET && getLastState() == GPIO_PIN_RESET)
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffed 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d107      	bne.n	8000618 <_ZN6Button14getButtonEventEv+0x24>
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ffdb 	bl	80005c4 <_ZN6Button12getLastStateEv>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d101      	bne.n	8000618 <_ZN6Button14getButtonEventEv+0x24>
 8000614:	2301      	movs	r3, #1
 8000616:	e000      	b.n	800061a <_ZN6Button14getButtonEventEv+0x26>
 8000618:	2300      	movs	r3, #0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <_ZN6Button14getButtonEventEv+0x38>
	{
		this->press_start_time = osKernelGetTickCount();
 800061e:	f004 fc57 	bl	8004ed0 <osKernelGetTickCount>
 8000622:	4602      	mov	r2, r0
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	609a      	str	r2, [r3, #8]
		return events.butpressed;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <_ZN6Button14getButtonEventEv+0xd0>)
 800062a:	e046      	b.n	80006ba <_ZN6Button14getButtonEventEv+0xc6>
	}

	else if (getCurrentState() == GPIO_PIN_SET && getLastState() == GPIO_PIN_SET)
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffd5 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <_ZN6Button14getButtonEventEv+0x54>
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ffc3 	bl	80005c4 <_ZN6Button12getLastStateEv>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d101      	bne.n	8000648 <_ZN6Button14getButtonEventEv+0x54>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <_ZN6Button14getButtonEventEv+0x56>
 8000648:	2300      	movs	r3, #0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d015      	beq.n	800067a <_ZN6Button14getButtonEventEv+0x86>
	{
		if (osKernelGetTickCount() - this->press_start_time >= HOLD_TIME)
 800064e:	f004 fc3f 	bl	8004ed0 <osKernelGetTickCount>
 8000652:	4602      	mov	r2, r0
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	f241 3287 	movw	r2, #4999	; 0x1387
 800065e:	4293      	cmp	r3, r2
 8000660:	bf8c      	ite	hi
 8000662:	2301      	movhi	r3, #1
 8000664:	2300      	movls	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d025      	beq.n	80006b8 <_ZN6Button14getButtonEventEv+0xc4>
		{
			this->press_start_time = osKernelGetTickCount();
 800066c:	f004 fc30 	bl	8004ed0 <osKernelGetTickCount>
 8000670:	4602      	mov	r2, r0
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	609a      	str	r2, [r3, #8]
			return events.butheld;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <_ZN6Button14getButtonEventEv+0xd4>)
 8000678:	e01f      	b.n	80006ba <_ZN6Button14getButtonEventEv+0xc6>
		}
	}

	else if (getCurrentState() == GPIO_PIN_RESET && getLastState() == GPIO_PIN_SET)
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ffae 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d107      	bne.n	8000696 <_ZN6Button14getButtonEventEv+0xa2>
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ff9c 	bl	80005c4 <_ZN6Button12getLastStateEv>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d101      	bne.n	8000696 <_ZN6Button14getButtonEventEv+0xa2>
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <_ZN6Button14getButtonEventEv+0xa4>
 8000696:	2300      	movs	r3, #0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00d      	beq.n	80006b8 <_ZN6Button14getButtonEventEv+0xc4>
	{
		uint32_t press_duration = osKernelGetTickCount() - this->press_start_time;
 800069c:	f004 fc18 	bl	8004ed0 <osKernelGetTickCount>
 80006a0:	4602      	mov	r2, r0
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
		if (press_duration < HOLD_TIME)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f241 3287 	movw	r2, #4999	; 0x1387
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d801      	bhi.n	80006b8 <_ZN6Button14getButtonEventEv+0xc4>
		{
			return events.butreleased;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <_ZN6Button14getButtonEventEv+0xd8>)
 80006b6:	e000      	b.n	80006ba <_ZN6Button14getButtonEventEv+0xc6>
		}
	}

	return nullptr;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000010 	.word	0x20000010
 80006cc:	2000002b 	.word	0x2000002b

080006d0 <_ZL10goToOutputP10DHT_sensor>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  //По умолчанию на линии высокий уровень
  lineUp();
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	f002 fad6 	bl	8002ca4 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80006fe:	2311      	movs	r3, #17
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	79db      	ldrb	r3, [r3, #7]
 8000706:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f107 020c 	add.w	r2, r7, #12
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f002 f918 	bl	800294c <HAL_GPIO_Init>
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZL9goToInputP10DHT_sensor>:

static void goToInput(DHT_sensor *sensor) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	79db      	ldrb	r3, [r3, #7]
 800074a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f107 020c 	add.w	r2, r7, #12
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f002 f8f8 	bl	800294c <HAL_GPIO_Init>
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_Z11DHT_getDataP10DHT_sensor>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	; 0x38
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
	DHT_data data = {-128.0f, -128.0f};
 800076c:	4aa3      	ldr	r2, [pc, #652]	; (80009fc <_Z11DHT_getDataP10DHT_sensor+0x298>)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000776:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <_Z11DHT_getDataP10DHT_sensor+0x26>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000782:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000786:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000788:	e002      	b.n	8000790 <_Z11DHT_getDataP10DHT_sensor+0x2c>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000790:	f000 ffa6 	bl	80016e0 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	1ad2      	subs	r2, r2, r3
 800079c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800079e:	429a      	cmp	r2, r3
 80007a0:	d205      	bcs.n	80007ae <_Z11DHT_getDataP10DHT_sensor+0x4a>
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <_Z11DHT_getDataP10DHT_sensor+0x4a>
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <_Z11DHT_getDataP10DHT_sensor+0x4c>
 80007ae:	2300      	movs	r3, #0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <_Z11DHT_getDataP10DHT_sensor+0x6e>
		data.hum = sensor->lastHum;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	61fb      	str	r3, [r7, #28]
		data.temp = sensor->lastTemp;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	623b      	str	r3, [r7, #32]
		return data;
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	f107 021c 	add.w	r2, r7, #28
 80007c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80007d0:	e183      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 80007d2:	f000 ff85 	bl	80016e0 <HAL_GetTick>
 80007d6:	4603      	mov	r3, r0
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f7ff ff76 	bl	80006d0 <_ZL10goToOutputP10DHT_sensor>
	//Опускание линии данных на 18 мс
	lineDown();
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	889b      	ldrh	r3, [r3, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	f002 fa58 	bl	8002ca4 <HAL_GPIO_WritePin>
	Delay(18);
 80007f4:	2012      	movs	r0, #18
 80007f6:	f000 ff7f 	bl	80016f8 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f002 fa4d 	bl	8002ca4 <HAL_GPIO_WritePin>
	goToInput(sensor);
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f7ff ff8a 	bl	8000724 <_ZL9goToInputP10DHT_sensor>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание спада
	while(getLine()) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	4610      	mov	r0, r2
 8000824:	f002 fa26 	bl	8002c74 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	bf0c      	ite	eq
 800082e:	2301      	moveq	r3, #1
 8000830:	2300      	movne	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01a      	beq.n	800086e <_Z11DHT_getDataP10DHT_sensor+0x10a>
		timeout++;
 8000838:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800083a:	3301      	adds	r3, #1
 800083c:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) {
 800083e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000840:	f242 7210 	movw	r2, #10000	; 0x2710
 8000844:	4293      	cmp	r3, r2
 8000846:	d9e7      	bls.n	8000818 <_Z11DHT_getDataP10DHT_sensor+0xb4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000848:	b662      	cpsie	i
}
 800084a:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8000852:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 800085a:	60da      	str	r2, [r3, #12]

			return data;
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	f107 021c 	add.w	r2, r7, #28
 8000864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000868:	e883 0003 	stmia.w	r3, {r0, r1}
 800086c:	e135      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
		}
	}
	timeout = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание подъёма
	while(!getLine()) {
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	889b      	ldrh	r3, [r3, #4]
 800087a:	4619      	mov	r1, r3
 800087c:	4610      	mov	r0, r2
 800087e:	f002 f9f9 	bl	8002c74 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d01a      	beq.n	80008c8 <_Z11DHT_getDataP10DHT_sensor+0x164>
		timeout++;
 8000892:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000894:	3301      	adds	r3, #1
 8000896:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) {
 8000898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800089a:	f242 7210 	movw	r2, #10000	; 0x2710
 800089e:	4293      	cmp	r3, r2
 80008a0:	d9e7      	bls.n	8000872 <_Z11DHT_getDataP10DHT_sensor+0x10e>
  __ASM volatile ("cpsie i" : : : "memory");
 80008a2:	b662      	cpsie	i
}
 80008a4:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80008ac:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80008b4:	60da      	str	r2, [r3, #12]

			return data;
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	f107 021c 	add.w	r2, r7, #28
 80008be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80008c6:	e108      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
		}
	}
	timeout = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание спада
	while(getLine()) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	889b      	ldrh	r3, [r3, #4]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4610      	mov	r0, r2
 80008d8:	f002 f9cc 	bl	8002c74 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d012      	beq.n	8000912 <_Z11DHT_getDataP10DHT_sensor+0x1ae>
		timeout++;
 80008ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008ee:	3301      	adds	r3, #1
 80008f0:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) {
 80008f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d9e7      	bls.n	80008cc <_Z11DHT_getDataP10DHT_sensor+0x168>
  __ASM volatile ("cpsie i" : : : "memory");
 80008fc:	b662      	cpsie	i
}
 80008fe:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	f107 021c 	add.w	r2, r7, #28
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000910:	e0e3      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8000912:	4a3b      	ldr	r2, [pc, #236]	; (8000a00 <_Z11DHT_getDataP10DHT_sensor+0x29c>)
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091c:	6018      	str	r0, [r3, #0]
 800091e:	3304      	adds	r3, #4
 8000920:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092c:	2b04      	cmp	r3, #4
 800092e:	d86d      	bhi.n	8000a0c <_Z11DHT_getDataP10DHT_sensor+0x2a8>
		for(uint8_t b = 7; b != 255; b--) {
 8000930:	2307      	movs	r3, #7
 8000932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000936:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	d057      	beq.n	80009ee <_Z11DHT_getDataP10DHT_sensor+0x28a>
			uint16_t hT = 0, lT = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	863b      	strh	r3, [r7, #48]	; 0x30
 8000942:	2300      	movs	r3, #0
 8000944:	85fb      	strh	r3, [r7, #46]	; 0x2e
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	889b      	ldrh	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f002 f98f 	bl	8002c74 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d006      	beq.n	800096a <_Z11DHT_getDataP10DHT_sensor+0x206>
 800095c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800095e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000962:	4293      	cmp	r3, r2
 8000964:	d001      	beq.n	800096a <_Z11DHT_getDataP10DHT_sensor+0x206>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <_Z11DHT_getDataP10DHT_sensor+0x208>
 800096a:	2300      	movs	r3, #0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <_Z11DHT_getDataP10DHT_sensor+0x214>
 8000970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000972:	3301      	adds	r3, #1
 8000974:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000976:	e7e6      	b.n	8000946 <_Z11DHT_getDataP10DHT_sensor+0x1e2>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	86bb      	strh	r3, [r7, #52]	; 0x34
			while(getLine()&& hT != 65535) hT++;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	4619      	mov	r1, r3
 8000986:	4610      	mov	r0, r2
 8000988:	f002 f974 	bl	8002c74 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <_Z11DHT_getDataP10DHT_sensor+0x23c>
 8000992:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000998:	4293      	cmp	r3, r2
 800099a:	d001      	beq.n	80009a0 <_Z11DHT_getDataP10DHT_sensor+0x23c>
 800099c:	2301      	movs	r3, #1
 800099e:	e000      	b.n	80009a2 <_Z11DHT_getDataP10DHT_sensor+0x23e>
 80009a0:	2300      	movs	r3, #0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_Z11DHT_getDataP10DHT_sensor+0x24a>
 80009a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80009a8:	3301      	adds	r3, #1
 80009aa:	863b      	strh	r3, [r7, #48]	; 0x30
 80009ac:	e7e6      	b.n	800097c <_Z11DHT_getDataP10DHT_sensor+0x218>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80009ae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80009b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d915      	bls.n	80009e2 <_Z11DHT_getDataP10DHT_sensor+0x27e>
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ba:	3338      	adds	r3, #56	; 0x38
 80009bc:	443b      	add	r3, r7
 80009be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b25a      	sxtb	r2, r3
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	3338      	adds	r3, #56	; 0x38
 80009dc:	443b      	add	r3, r7
 80009de:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(uint8_t b = 7; b != 255; b--) {
 80009e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80009ec:	e7a3      	b.n	8000936 <_Z11DHT_getDataP10DHT_sensor+0x1d2>
	for(uint8_t a = 0; a < 5; a++) {
 80009ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f2:	3301      	adds	r3, #1
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80009f8:	e796      	b.n	8000928 <_Z11DHT_getDataP10DHT_sensor+0x1c4>
 80009fa:	bf00      	nop
 80009fc:	08008ca4 	.word	0x08008ca4
 8000a00:	08008cac 	.word	0x08008cac
 8000a04:	3dcccccd 	.word	0x3dcccccd
 8000a08:	bdcccccd 	.word	0xbdcccccd
  __ASM volatile ("cpsie i" : : : "memory");
 8000a0c:	b662      	cpsie	i
}
 8000a0e:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8000a10:	7d3a      	ldrb	r2, [r7, #20]
 8000a12:	7d7b      	ldrb	r3, [r7, #21]
 8000a14:	4413      	add	r3, r2
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	7dbb      	ldrb	r3, [r7, #22]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	4413      	add	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	7e3b      	ldrb	r3, [r7, #24]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d149      	bne.n	8000abe <_Z11DHT_getDataP10DHT_sensor+0x35a>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	799b      	ldrb	r3, [r3, #6]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d133      	bne.n	8000a9a <_Z11DHT_getDataP10DHT_sensor+0x336>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000a32:	7d3b      	ldrb	r3, [r7, #20]
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	7d7a      	ldrb	r2, [r7, #21]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	ee07 3a90 	vmov	s15, r3
 8000a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a42:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 8000a04 <_Z11DHT_getDataP10DHT_sensor+0x2a0>
 8000a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a4a:	edc7 7a07 	vstr	s15, [r7, #28]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8000a4e:	7dbb      	ldrb	r3, [r7, #22]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0e      	blt.n	8000a74 <_Z11DHT_getDataP10DHT_sensor+0x310>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	7dfa      	ldrb	r2, [r7, #23]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a66:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 8000a04 <_Z11DHT_getDataP10DHT_sensor+0x2a0>
 8000a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a6e:	edc7 7a08 	vstr	s15, [r7, #32]
 8000a72:	e012      	b.n	8000a9a <_Z11DHT_getDataP10DHT_sensor+0x336>
			}	else {
				rawData[2] &= ~(1<<7);
 8000a74:	7dbb      	ldrb	r3, [r7, #22]
 8000a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	75bb      	strb	r3, [r7, #22]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8000a7e:	7dbb      	ldrb	r3, [r7, #22]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	7dfa      	ldrb	r2, [r7, #23]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8e:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8000a08 <_Z11DHT_getDataP10DHT_sensor+0x2a4>
 8000a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a96:	edc7 7a08 	vstr	s15, [r7, #32]
			}
		}
		if (sensor->type == DHT11) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	799b      	ldrb	r3, [r3, #6]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10d      	bne.n	8000abe <_Z11DHT_getDataP10DHT_sensor+0x35a>
			data.hum = (float)rawData[0];
 8000aa2:	7d3b      	ldrb	r3, [r7, #20]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aac:	edc7 7a07 	vstr	s15, [r7, #28]
			data.temp = (float)rawData[2];
 8000ab0:	7dbb      	ldrb	r3, [r7, #22]
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aba:	edc7 7a08 	vstr	s15, [r7, #32]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8000ac4:	6a3a      	ldr	r2, [r7, #32]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	f107 021c 	add.w	r2, r7, #28
 8000ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	ee07 2a10 	vmov	s14, r2
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8000aea:	eef0 0a67 	vmov.f32	s1, s15
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZN6Button12setLastStateEh>:
		TickType_t press_start_time = 0;
		uint32_t last_interrupt_time = 0;
		uint32_t interrupt_time;
		uint32_t press_duration;

		void setLastState(uint8_t state){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	70fb      	strb	r3, [r7, #3]
			this->last_button_state = state;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	78fa      	ldrb	r2, [r7, #3]
 8000b04:	701a      	strb	r2, [r3, #0]
		}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_ZN6Button15setCurrentStateEh>:
		void setCurrentState(uint8_t state){
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	70fb      	strb	r3, [r7, #3]
			this->current_button_state = state;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	78fa      	ldrb	r2, [r7, #3]
 8000b22:	705a      	strb	r2, [r3, #1]
		}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <_ZN6ButtonC1Ev>:
class Button {
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	705a      	strb	r2, [r3, #1]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]

	Button userButton;
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f7ff ffde 	bl	8000b30 <_ZN6ButtonC1Ev>
	DataButtonPacket packet;

    userButton.last_interrupt_time = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    userButton.interrupt_time = HAL_GetTick();
 8000b78:	f000 fdb2 	bl	80016e0 <HAL_GetTick>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	623b      	str	r3, [r7, #32]

    if (GPIO_Pin == GPIO_PIN_13) {
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b86:	d11a      	bne.n	8000bbe <HAL_GPIO_EXTI_Callback+0x5e>
        if (userButton.interrupt_time - userButton.last_interrupt_time > ANTI_BOUNCE_DELAY)
 8000b88:	6a3a      	ldr	r2, [r7, #32]
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d915      	bls.n	8000bbe <HAL_GPIO_EXTI_Callback+0x5e>
        {
        	packet.ButtonState = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b98:	f002 f86c 	bl	8002c74 <HAL_GPIO_ReadPin>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2301      	moveq	r3, #1
 8000ba4:	2300      	movne	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	723b      	strb	r3, [r7, #8]
        	osMessageQueuePut(buttonInterruptStateQueue, &packet.ButtonState, 0, 0);
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f107 0108 	add.w	r1, r7, #8
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	f004 fb49 	bl	800524c <osMessageQueuePut>

            userButton.last_interrupt_time = userButton.interrupt_time;
 8000bba:	6a3b      	ldr	r3, [r7, #32]
 8000bbc:	61fb      	str	r3, [r7, #28]
        }
    }
}
 8000bbe:	bf00      	nop
 8000bc0:	3728      	adds	r7, #40	; 0x28
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40020800 	.word	0x40020800
 8000bcc:	200001e8 	.word	0x200001e8

08000bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd4:	f000 fd4e 	bl	8001674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd8:	f000 f862 	bl	8000ca0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bdc:	f000 f974 	bl	8000ec8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000be0:	f000 f952 	bl	8000e88 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000be4:	f000 f8c6 	bl	8000d74 <_ZL12MX_ADC1_Initv>
  MX_USART2_UART_Init();
 8000be8:	f000 f920 	bl	8000e2c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bec:	f004 f926 	bl	8004e3c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controlPWMLed */
  controlPWMLedHandle = osThreadNew(controlPWMLedTask, NULL, &controlPWMLed_attributes);
 8000bf0:	4a19      	ldr	r2, [pc, #100]	; (8000c58 <main+0x88>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4819      	ldr	r0, [pc, #100]	; (8000c5c <main+0x8c>)
 8000bf6:	f004 f980 	bl	8004efa <osThreadNew>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <main+0x90>)
 8000bfe:	6013      	str	r3, [r2, #0]

  /* creation of sensorHandler */
  sensorHandlerHandle = osThreadNew(sensorHandlerTask, NULL, &sensorHandler_attributes);
 8000c00:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <main+0x94>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4818      	ldr	r0, [pc, #96]	; (8000c68 <main+0x98>)
 8000c06:	f004 f978 	bl	8004efa <osThreadNew>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <main+0x9c>)
 8000c0e:	6013      	str	r3, [r2, #0]

  /* creation of transmitData */
  transmitSensorDataHandle = osThreadNew(transmitDataTask, NULL, &transmitData_attributes);
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <main+0xa0>)
 8000c12:	2100      	movs	r1, #0
 8000c14:	4817      	ldr	r0, [pc, #92]	; (8000c74 <main+0xa4>)
 8000c16:	f004 f970 	bl	8004efa <osThreadNew>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <main+0xa8>)
 8000c1e:	6013      	str	r3, [r2, #0]

  /* creation of receiveData */
  receiveDataHandle = osThreadNew(receiveDataTask, NULL, &receiveData_attributes);
 8000c20:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <main+0xac>)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4816      	ldr	r0, [pc, #88]	; (8000c80 <main+0xb0>)
 8000c26:	f004 f968 	bl	8004efa <osThreadNew>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <main+0xb4>)
 8000c2e:	6013      	str	r3, [r2, #0]

  /* creation of buttonHandler */
  buttonHandlerHandle = osThreadNew(buttonHandlerTask, NULL, &buttonHandler_attributes);
 8000c30:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <main+0xb8>)
 8000c32:	2100      	movs	r1, #0
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <main+0xbc>)
 8000c36:	f004 f960 	bl	8004efa <osThreadNew>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a14      	ldr	r2, [pc, #80]	; (8000c90 <main+0xc0>)
 8000c3e:	6013      	str	r3, [r2, #0]

  /* creation of buttonTransmitEvent */
  buttonTransmitEventHandle = osThreadNew(buttonTransmitEventTask, NULL, &buttonTransmitEvent_attributes);
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <main+0xc4>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	4814      	ldr	r0, [pc, #80]	; (8000c98 <main+0xc8>)
 8000c46:	f004 f958 	bl	8004efa <osThreadNew>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <main+0xcc>)
 8000c4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c50:	f004 f918 	bl	8004e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <main+0x84>
 8000c56:	bf00      	nop
 8000c58:	08008d5c 	.word	0x08008d5c
 8000c5c:	08000fa9 	.word	0x08000fa9
 8000c60:	200001cc 	.word	0x200001cc
 8000c64:	08008d80 	.word	0x08008d80
 8000c68:	08000fb9 	.word	0x08000fb9
 8000c6c:	200001d0 	.word	0x200001d0
 8000c70:	08008da4 	.word	0x08008da4
 8000c74:	08001069 	.word	0x08001069
 8000c78:	200001d4 	.word	0x200001d4
 8000c7c:	08008dc8 	.word	0x08008dc8
 8000c80:	080010f5 	.word	0x080010f5
 8000c84:	200001d8 	.word	0x200001d8
 8000c88:	08008dec 	.word	0x08008dec
 8000c8c:	08001105 	.word	0x08001105
 8000c90:	200001dc 	.word	0x200001dc
 8000c94:	08008e10 	.word	0x08008e10
 8000c98:	080011b5 	.word	0x080011b5
 8000c9c:	200001e0 	.word	0x200001e0

08000ca0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b094      	sub	sp, #80	; 0x50
 8000ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2234      	movs	r2, #52	; 0x34
 8000cac:	2100      	movs	r1, #0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f007 fb84 	bl	80083bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	4b28      	ldr	r3, [pc, #160]	; (8000d6c <_Z18SystemClock_Configv+0xcc>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ccc:	4a27      	ldr	r2, [pc, #156]	; (8000d6c <_Z18SystemClock_Configv+0xcc>)
 8000cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd4:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <_Z18SystemClock_Configv+0xcc>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <_Z18SystemClock_Configv+0xd0>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cec:	4a20      	ldr	r2, [pc, #128]	; (8000d70 <_Z18SystemClock_Configv+0xd0>)
 8000cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <_Z18SystemClock_Configv+0xd0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d08:	2310      	movs	r3, #16
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 faed 	bl	80032f4 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	bf14      	ite	ne
 8000d20:	2301      	movne	r3, #1
 8000d22:	2300      	moveq	r3, #0
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000d2a:	f000 fa89 	bl	8001240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 ffdd 	bl	8002d08 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	bf14      	ite	ne
 8000d54:	2301      	movne	r3, #1
 8000d56:	2300      	moveq	r3, #0
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000d5e:	f000 fa6f 	bl	8001240 <Error_Handler>
  }
}
 8000d62:	bf00      	nop
 8000d64:	3750      	adds	r7, #80	; 0x50
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40007000 	.word	0x40007000

08000d74 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d86:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000d88:	4a26      	ldr	r2, [pc, #152]	; (8000e24 <_ZL12MX_ADC1_Initv+0xb0>)
 8000d8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d92:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9e:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000db4:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <_ZL12MX_ADC1_Initv+0xb4>)
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd2:	4813      	ldr	r0, [pc, #76]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000dd4:	f000 fcb4 	bl	8001740 <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	bf14      	ite	ne
 8000dde:	2301      	movne	r3, #1
 8000de0:	2300      	moveq	r3, #0
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8000de8:	f000 fa2a 	bl	8001240 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000df0:	2301      	movs	r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000df4:	2306      	movs	r3, #6
 8000df6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4808      	ldr	r0, [pc, #32]	; (8000e20 <_ZL12MX_ADC1_Initv+0xac>)
 8000dfe:	f000 fe11 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf14      	ite	ne
 8000e08:	2301      	movne	r3, #1
 8000e0a:	2300      	moveq	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8000e12:	f000 fa15 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	200000e0 	.word	0x200000e0
 8000e24:	40012000 	.word	0x40012000
 8000e28:	0f000001 	.word	0x0f000001

08000e2c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e32:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e62:	4807      	ldr	r0, [pc, #28]	; (8000e80 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000e64:	f002 ff92 	bl	8003d8c <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000e78:	f000 f9e2 	bl	8001240 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000188 	.word	0x20000188
 8000e84:	40004400 	.word	0x40004400

08000e88 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <_ZL11MX_DMA_Initv+0x3c>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <_ZL11MX_DMA_Initv+0x3c>)
 8000e98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <_ZL11MX_DMA_Initv+0x3c>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2105      	movs	r1, #5
 8000eae:	2038      	movs	r0, #56	; 0x38
 8000eb0:	f001 f920 	bl	80020f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eb4:	2038      	movs	r0, #56	; 0x38
 8000eb6:	f001 f939 	bl	800212c <HAL_NVIC_EnableIRQ>

}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a2d      	ldr	r2, [pc, #180]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <_ZL12MX_GPIO_Initv+0xd4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f54:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <_ZL12MX_GPIO_Initv+0xd8>)
 8000f66:	f001 fcf1 	bl	800294c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <_ZL12MX_GPIO_Initv+0xdc>)
 8000f7e:	f001 fce5 	bl	800294c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	2028      	movs	r0, #40	; 0x28
 8000f88:	f001 f8b4 	bl	80020f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8c:	2028      	movs	r0, #40	; 0x28
 8000f8e:	f001 f8cd 	bl	800212c <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020400 	.word	0x40020400

08000fa8 <_Z17controlPWMLedTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_controlPWMLedTask */
void controlPWMLedTask(void *argument)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fb0:	2001      	movs	r0, #1
 8000fb2:	f004 f834 	bl	800501e <osDelay>
 8000fb6:	e7fb      	b.n	8000fb0 <_Z17controlPWMLedTaskPv+0x8>

08000fb8 <_Z17sensorHandlerTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorHandlerTask */
void sensorHandlerTask(void *argument)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b096      	sub	sp, #88	; 0x58
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorHandlerTask */

	static DHT_sensor livingRoom = {GPIOB, GPIO_PIN_7, DHT11, GPIO_NOPULL};
	DataSensorPacket packet;

	sensorMessageQueue = osMessageQueueNew(QUEUE_SIZE, sizeof(DataSensorPacket), NULL);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2144      	movs	r1, #68	; 0x44
 8000fc4:	200a      	movs	r0, #10
 8000fc6:	f004 f8cd 	bl	8005164 <osMessageQueueNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <_Z17sensorHandlerTaskPv+0x9c>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
	  DHT_data d = DHT_getData(&livingRoom);
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <_Z17sensorHandlerTaskPv+0xa0>)
 8000fd2:	f7ff fbc7 	bl	8000764 <_Z11DHT_getDataP10DHT_sensor>
 8000fd6:	eeb0 7a40 	vmov.f32	s14, s0
 8000fda:	eef0 7a60 	vmov.f32	s15, s1
 8000fde:	ed87 7a03 	vstr	s14, [r7, #12]
 8000fe2:	edc7 7a04 	vstr	s15, [r7, #16]
	  sprintf(packet.SensorData, "Temperature %d C, Humidity %d%%", (uint8_t)d.temp, (uint8_t)d.hum);
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fee:	edc7 7a00 	vstr	s15, [r7]
 8000ff2:	783b      	ldrb	r3, [r7, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001000:	edc7 7a00 	vstr	s15, [r7]
 8001004:	783b      	ldrb	r3, [r7, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	f107 0014 	add.w	r0, r7, #20
 800100c:	4913      	ldr	r1, [pc, #76]	; (800105c <_Z17sensorHandlerTaskPv+0xa4>)
 800100e:	f007 f9dd 	bl	80083cc <siprintf>

	  HAL_ADC_Start_DMA(&hadc1, packet.adc_value, 1);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	3334      	adds	r3, #52	; 0x34
 8001018:	2201      	movs	r2, #1
 800101a:	4619      	mov	r1, r3
 800101c:	4810      	ldr	r0, [pc, #64]	; (8001060 <_Z17sensorHandlerTaskPv+0xa8>)
 800101e:	f000 fbd3 	bl	80017c8 <HAL_ADC_Start_DMA>
	  sprintf(packet.ADCData, "ADC: %d\n", static_cast<uint16_t> (packet.adc_value[0]));
 8001022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001024:	b29b      	uxth	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	3338      	adds	r3, #56	; 0x38
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <_Z17sensorHandlerTaskPv+0xac>)
 8001030:	4618      	mov	r0, r3
 8001032:	f007 f9cb 	bl	80083cc <siprintf>

	  osMessageQueuePut(sensorMessageQueue, &packet, 0, osWaitForever);
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_Z17sensorHandlerTaskPv+0x9c>)
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	f107 0114 	add.w	r1, r7, #20
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	2200      	movs	r2, #0
 8001044:	f004 f902 	bl	800524c <osMessageQueuePut>
	  osDelay(1000);
 8001048:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104c:	f003 ffe7 	bl	800501e <osDelay>
  }
 8001050:	e7be      	b.n	8000fd0 <_Z17sensorHandlerTaskPv+0x18>
 8001052:	bf00      	nop
 8001054:	200001e4 	.word	0x200001e4
 8001058:	2000003c 	.word	0x2000003c
 800105c:	08008d18 	.word	0x08008d18
 8001060:	200000e0 	.word	0x200000e0
 8001064:	08008d38 	.word	0x08008d38

08001068 <_Z16transmitDataTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitDataTask */
void transmitDataTask(void *argument)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  DataSensorPacket packet;

  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(sensorMessageQueue, &packet, NULL, osWaitForever) == osOK)
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <_Z16transmitDataTaskPv+0x80>)
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	f107 010c 	add.w	r1, r7, #12
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	2200      	movs	r2, #0
 800107e:	f004 f945 	bl	800530c <osMessageQueueGet>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	bf0c      	ite	eq
 8001088:	2301      	moveq	r3, #1
 800108a:	2300      	movne	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0ee      	beq.n	8001070 <_Z16transmitDataTaskPv+0x8>
	  {
		  osMutexAcquire(uartMutex, osWaitForever);
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <_Z16transmitDataTaskPv+0x84>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f04f 31ff 	mov.w	r1, #4294967295
 800109a:	4618      	mov	r0, r3
 800109c:	f003 ffda 	bl	8005054 <osMutexAcquire>
		  HAL_UART_Transmit(&huart2, (uint8_t*)packet.ADCData, strlen(packet.ADCData), 0xFF);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	3338      	adds	r3, #56	; 0x38
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f8b2 	bl	8000210 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80010b8:	23ff      	movs	r3, #255	; 0xff
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <_Z16transmitDataTaskPv+0x88>)
 80010bc:	f002 feb3 	bl	8003e26 <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart2, (uint8_t*)packet.SensorData, strlen(packet.SensorData), 0xFF);
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f8a3 	bl	8000210 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f107 010c 	add.w	r1, r7, #12
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <_Z16transmitDataTaskPv+0x88>)
 80010d6:	f002 fea6 	bl	8003e26 <HAL_UART_Transmit>
	      osMutexRelease(uartMutex);
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <_Z16transmitDataTaskPv+0x84>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 f803 	bl	80050ea <osMutexRelease>
	  if (osMessageQueueGet(sensorMessageQueue, &packet, NULL, osWaitForever) == osOK)
 80010e4:	e7c4      	b.n	8001070 <_Z16transmitDataTaskPv+0x8>
 80010e6:	bf00      	nop
 80010e8:	200001e4 	.word	0x200001e4
 80010ec:	200001f0 	.word	0x200001f0
 80010f0:	20000188 	.word	0x20000188

080010f4 <_Z15receiveDataTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_receiveDataTask */
void receiveDataTask(void *argument)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN receiveDataTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f003 ff8e 	bl	800501e <osDelay>
 8001102:	e7fb      	b.n	80010fc <_Z15receiveDataTaskPv+0x8>

08001104 <_Z17buttonHandlerTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buttonHandlerTask */
void buttonHandlerTask(void *argument)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonHandlerTask */

	DataButtonPacket packet;
	Button userButton;
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fd0d 	bl	8000b30 <_ZN6ButtonC1Ev>

	buttonInterruptStateQueue = osMessageQueueNew(QUEUE_SIZE, sizeof(DataButtonPacket), NULL);
 8001116:	2200      	movs	r2, #0
 8001118:	2108      	movs	r1, #8
 800111a:	200a      	movs	r0, #10
 800111c:	f004 f822 	bl	8005164 <osMessageQueueNew>
 8001120:	4603      	mov	r3, r0
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <_Z17buttonHandlerTaskPv+0xa8>)
 8001124:	6013      	str	r3, [r2, #0]
	buttonEventMessadgeQueue = osMessageQueueNew(QUEUE_SIZE, sizeof(DataButtonPacket), NULL);
 8001126:	2200      	movs	r2, #0
 8001128:	2108      	movs	r1, #8
 800112a:	200a      	movs	r0, #10
 800112c:	f004 f81a 	bl	8005164 <osMessageQueueNew>
 8001130:	4603      	mov	r3, r0
 8001132:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <_Z17buttonHandlerTaskPv+0xac>)
 8001134:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  for(;;)
  {
	 if(osMessageQueueGet(buttonInterruptStateQueue, &packet, NULL, NULL) == osOK)
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <_Z17buttonHandlerTaskPv+0xa8>)
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	f107 0120 	add.w	r1, r7, #32
 800113e:	2300      	movs	r3, #0
 8001140:	2200      	movs	r2, #0
 8001142:	f004 f8e3 	bl	800530c <osMessageQueueGet>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	bf0c      	ite	eq
 800114c:	2301      	moveq	r3, #1
 800114e:	2300      	movne	r3, #0
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d008      	beq.n	8001168 <_Z17buttonHandlerTaskPv+0x64>
	 {
		 userButton.setCurrentState(packet.ButtonState);
 8001156:	f897 3020 	ldrb.w	r3, [r7, #32]
 800115a:	461a      	mov	r2, r3
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fcd5 	bl	8000b12 <_ZN6Button15setCurrentStateEh>
	 }

	 packet.event = userButton.getButtonEvent();
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fa41 	bl	80005f4 <_ZN6Button14getButtonEventEv>
 8001172:	4603      	mov	r3, r0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
	 if(packet.event)
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <_Z17buttonHandlerTaskPv+0x8a>
	 {
		 osMessageQueuePut(buttonEventMessadgeQueue, &packet, 0, osWaitForever);
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <_Z17buttonHandlerTaskPv+0xac>)
 800117e:	6818      	ldr	r0, [r3, #0]
 8001180:	f107 0120 	add.w	r1, r7, #32
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	2200      	movs	r2, #0
 800118a:	f004 f85f 	bl	800524c <osMessageQueuePut>
	 }
	 userButton.setLastState(userButton.getCurrentState());
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fa22 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fca6 	bl	8000af4 <_ZN6Button12setLastStateEh>
	 if(osMessageQueueGet(buttonInterruptStateQueue, &packet, NULL, NULL) == osOK)
 80011a8:	e7c5      	b.n	8001136 <_Z17buttonHandlerTaskPv+0x32>
 80011aa:	bf00      	nop
 80011ac:	200001e8 	.word	0x200001e8
 80011b0:	200001ec 	.word	0x200001ec

080011b4 <_Z23buttonTransmitEventTaskPv>:
}


/* USER CODE END Header_buttonTransmitEventTask */
void buttonTransmitEventTask(void *argument)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	DataButtonPacket packet;

	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(buttonEventMessadgeQueue, &packet, NULL, osWaitForever) == osOK) {
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <_Z23buttonTransmitEventTaskPv+0x5c>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f107 0108 	add.w	r1, r7, #8
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295
 80011c8:	2200      	movs	r2, #0
 80011ca:	f004 f89f 	bl	800530c <osMessageQueueGet>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf0c      	ite	eq
 80011d4:	2301      	moveq	r3, #1
 80011d6:	2300      	movne	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0ee      	beq.n	80011bc <_Z23buttonTransmitEventTaskPv+0x8>
			osMutexAcquire(uartMutex, osWaitForever);
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <_Z23buttonTransmitEventTaskPv+0x60>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f04f 31ff 	mov.w	r1, #4294967295
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 ff34 	bl	8005054 <osMutexAcquire>
			HAL_UART_Transmit(&huart2, packet.event, strlen((const char*)packet.event), 0xFF);
 80011ec:	68fc      	ldr	r4, [r7, #12]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f80d 	bl	8000210 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	23ff      	movs	r3, #255	; 0xff
 80011fc:	4621      	mov	r1, r4
 80011fe:	4806      	ldr	r0, [pc, #24]	; (8001218 <_Z23buttonTransmitEventTaskPv+0x64>)
 8001200:	f002 fe11 	bl	8003e26 <HAL_UART_Transmit>
			osMutexRelease(uartMutex);
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <_Z23buttonTransmitEventTaskPv+0x60>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f003 ff6e 	bl	80050ea <osMutexRelease>
		if(osMessageQueueGet(buttonEventMessadgeQueue, &packet, NULL, osWaitForever) == osOK) {
 800120e:	e7d5      	b.n	80011bc <_Z23buttonTransmitEventTaskPv+0x8>
 8001210:	200001ec 	.word	0x200001ec
 8001214:	200001f0 	.word	0x200001f0
 8001218:	20000188 	.word	0x20000188

0800121c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d101      	bne.n	8001232 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800122e:	f000 fa43 	bl	80016b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40010000 	.word	0x40010000

08001240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001244:	b672      	cpsid	i
}
 8001246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001248:	e7fe      	b.n	8001248 <Error_Handler+0x8>
	...

0800124c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_MspInit+0x54>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <HAL_MspInit+0x54>)
 800125c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_MspInit+0x54>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_MspInit+0x54>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_MspInit+0x54>)
 8001278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800127c:	6413      	str	r3, [r2, #64]	; 0x40
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_MspInit+0x54>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	210f      	movs	r1, #15
 800128e:	f06f 0001 	mvn.w	r0, #1
 8001292:	f000 ff2f 	bl	80020f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	; 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <HAL_ADC_MspInit+0xdc>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d157      	bne.n	8001376 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a2d      	ldr	r2, [pc, #180]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a26      	ldr	r2, [pc, #152]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_ADC_MspInit+0xe0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012fe:	2302      	movs	r3, #2
 8001300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001302:	2303      	movs	r3, #3
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	481d      	ldr	r0, [pc, #116]	; (8001388 <HAL_ADC_MspInit+0xe4>)
 8001312:	f001 fb1b 	bl	800294c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_ADC_MspInit+0xec>)
 800131a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800131e:	2200      	movs	r2, #0
 8001320:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132e:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001334:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800133c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001344:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800134e:	4b0f      	ldr	r3, [pc, #60]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001354:	4b0d      	ldr	r3, [pc, #52]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800135a:	480c      	ldr	r0, [pc, #48]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800135c:	f000 fef4 	bl	8002148 <HAL_DMA_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001366:	f7ff ff6b 	bl	8001240 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40012000 	.word	0x40012000
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000
 800138c:	20000128 	.word	0x20000128
 8001390:	40026410 	.word	0x40026410

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_UART_MspInit+0x94>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d133      	bne.n	800141e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_UART_MspInit+0x98>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a1b      	ldr	r2, [pc, #108]	; (800142c <HAL_UART_MspInit+0x98>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <HAL_UART_MspInit+0x98>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <HAL_UART_MspInit+0x98>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a14      	ldr	r2, [pc, #80]	; (800142c <HAL_UART_MspInit+0x98>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_UART_MspInit+0x98>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fe:	2307      	movs	r3, #7
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_UART_MspInit+0x9c>)
 800140a:	f001 fa9f 	bl	800294c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	2026      	movs	r0, #38	; 0x26
 8001414:	f000 fe6e 	bl	80020f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001418:	2026      	movs	r0, #38	; 0x26
 800141a:	f000 fe87 	bl	800212c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40004400 	.word	0x40004400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_InitTick+0xd0>)
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_InitTick+0xd0>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6453      	str	r3, [r2, #68]	; 0x44
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_InitTick+0xd0>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001460:	f107 020c 	add.w	r2, r7, #12
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fd66 	bl	8002f3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001470:	f001 fd50 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8001474:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001478:	4a23      	ldr	r2, [pc, #140]	; (8001508 <HAL_InitTick+0xd4>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0c9b      	lsrs	r3, r3, #18
 8001480:	3b01      	subs	r3, #1
 8001482:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <HAL_InitTick+0xd8>)
 8001486:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_InitTick+0xdc>)
 8001488:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_InitTick+0xd8>)
 800148c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001490:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_InitTick+0xd8>)
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_InitTick+0xd8>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <HAL_InitTick+0xd8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_InitTick+0xd8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014aa:	4818      	ldr	r0, [pc, #96]	; (800150c <HAL_InitTick+0xd8>)
 80014ac:	f002 f9c0 	bl	8003830 <HAL_TIM_Base_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d11b      	bne.n	80014f6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014be:	4813      	ldr	r0, [pc, #76]	; (800150c <HAL_InitTick+0xd8>)
 80014c0:	f002 fa10 	bl	80038e4 <HAL_TIM_Base_Start_IT>
 80014c4:	4603      	mov	r3, r0
 80014c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80014ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d111      	bne.n	80014f6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d2:	2019      	movs	r0, #25
 80014d4:	f000 fe2a 	bl	800212c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	d808      	bhi.n	80014f0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80014de:	2200      	movs	r2, #0
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	2019      	movs	r0, #25
 80014e4:	f000 fe06 	bl	80020f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <HAL_InitTick+0xe0>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e002      	b.n	80014f6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3730      	adds	r7, #48	; 0x30
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	431bde83 	.word	0x431bde83
 800150c:	200001f4 	.word	0x200001f4
 8001510:	40010000 	.word	0x40010000
 8001514:	20000054 	.word	0x20000054

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800151c:	e7fe      	b.n	800151c <NMI_Handler+0x4>

0800151e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001522:	e7fe      	b.n	8001522 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <MemManage_Handler+0x4>

0800152a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <UsageFault_Handler+0x4>

08001536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800154a:	f002 fa3b 	bl	80039c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200001f4 	.word	0x200001f4

08001558 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <USART2_IRQHandler+0x10>)
 800155e:	f002 fcf5 	bl	8003f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000188 	.word	0x20000188

0800156c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001570:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001574:	f001 fbb0 	bl	8002cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <DMA2_Stream0_IRQHandler+0x10>)
 8001582:	f000 ff79 	bl	8002478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000128 	.word	0x20000128

08001590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <_sbrk+0x5c>)
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <_sbrk+0x60>)
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a4:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <_sbrk+0x64>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <_sbrk+0x64>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <_sbrk+0x68>)
 80015b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <_sbrk+0x64>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d207      	bcs.n	80015d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c0:	f006 fec4 	bl	800834c <__errno>
 80015c4:	4603      	mov	r3, r0
 80015c6:	220c      	movs	r2, #12
 80015c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e009      	b.n	80015e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d0:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <_sbrk+0x64>)
 80015e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015e2:	68fb      	ldr	r3, [r7, #12]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20020000 	.word	0x20020000
 80015f0:	00000400 	.word	0x00000400
 80015f4:	2000023c 	.word	0x2000023c
 80015f8:	20004ba8 	.word	0x20004ba8

080015fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <SystemInit+0x20>)
 8001602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <SystemInit+0x20>)
 8001608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800160c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001658 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001624:	480d      	ldr	r0, [pc, #52]	; (800165c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001626:	490e      	ldr	r1, [pc, #56]	; (8001660 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001628:	4a0e      	ldr	r2, [pc, #56]	; (8001664 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800162c:	e002      	b.n	8001634 <LoopCopyDataInit>

0800162e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001632:	3304      	adds	r3, #4

08001634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001638:	d3f9      	bcc.n	800162e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163a:	4a0b      	ldr	r2, [pc, #44]	; (8001668 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800163c:	4c0b      	ldr	r4, [pc, #44]	; (800166c <LoopFillZerobss+0x26>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001640:	e001      	b.n	8001646 <LoopFillZerobss>

08001642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001644:	3204      	adds	r2, #4

08001646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001648:	d3fb      	bcc.n	8001642 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800164a:	f7ff ffd7 	bl	80015fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164e:	f006 fe83 	bl	8008358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001652:	f7ff fabd 	bl	8000bd0 <main>
  bx  lr    
 8001656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800165c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001660:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001664:	08008e98 	.word	0x08008e98
  ldr r2, =_sbss
 8001668:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 800166c:	20004ba4 	.word	0x20004ba4

08001670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001670:	e7fe      	b.n	8001670 <ADC_IRQHandler>
	...

08001674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001678:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0d      	ldr	r2, [pc, #52]	; (80016b4 <HAL_Init+0x40>)
 800167e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <HAL_Init+0x40>)
 800168a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_Init+0x40>)
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 fd1e 	bl	80020de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f7ff fec6 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a8:	f7ff fdd0 	bl	800124c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00

080016b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_IncTick+0x20>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_IncTick+0x24>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <HAL_IncTick+0x24>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	20000058 	.word	0x20000058
 80016dc:	20000240 	.word	0x20000240

080016e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return uwTick;
 80016e4:	4b03      	ldr	r3, [pc, #12]	; (80016f4 <HAL_GetTick+0x14>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000240 	.word	0x20000240

080016f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff ffee 	bl	80016e0 <HAL_GetTick>
 8001704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001710:	d005      	beq.n	800171e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_Delay+0x44>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4413      	add	r3, r2
 800171c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800171e:	bf00      	nop
 8001720:	f7ff ffde 	bl	80016e0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8f7      	bhi.n	8001720 <HAL_Delay+0x28>
  {
  }
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000058 	.word	0x20000058

08001740 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e033      	b.n	80017be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d109      	bne.n	8001772 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff fda0 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b00      	cmp	r3, #0
 800177c:	d118      	bne.n	80017b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001786:	f023 0302 	bic.w	r3, r3, #2
 800178a:	f043 0202 	orr.w	r2, r3, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fa78 	bl	8001c88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	f043 0201 	orr.w	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
 80017ae:	e001      	b.n	80017b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_Start_DMA+0x1e>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e0e9      	b.n	80019ba <HAL_ADC_Start_DMA+0x1f2>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d018      	beq.n	800182e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800180c:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <HAL_ADC_Start_DMA+0x1fc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6d      	ldr	r2, [pc, #436]	; (80019c8 <HAL_ADC_Start_DMA+0x200>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	0c9a      	lsrs	r2, r3, #18
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001820:	e002      	b.n	8001828 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	3b01      	subs	r3, #1
 8001826:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f9      	bne.n	8001822 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800183c:	d107      	bne.n	800184e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800184c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	f040 80a1 	bne.w	80019a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001888:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800189c:	d106      	bne.n	80018ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f023 0206 	bic.w	r2, r3, #6
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
 80018aa:	e002      	b.n	80018b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018ba:	4b44      	ldr	r3, [pc, #272]	; (80019cc <HAL_ADC_Start_DMA+0x204>)
 80018bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c2:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <HAL_ADC_Start_DMA+0x208>)
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	4a42      	ldr	r2, [pc, #264]	; (80019d4 <HAL_ADC_Start_DMA+0x20c>)
 80018cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	4a41      	ldr	r2, [pc, #260]	; (80019d8 <HAL_ADC_Start_DMA+0x210>)
 80018d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80018ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	334c      	adds	r3, #76	; 0x4c
 800190a:	4619      	mov	r1, r3
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f000 fcc8 	bl	80022a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 031f 	and.w	r3, r3, #31
 800191c:	2b00      	cmp	r3, #0
 800191e:	d12a      	bne.n	8001976 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a2d      	ldr	r2, [pc, #180]	; (80019dc <HAL_ADC_Start_DMA+0x214>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d015      	beq.n	8001956 <HAL_ADC_Start_DMA+0x18e>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_ADC_Start_DMA+0x218>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d105      	bne.n	8001940 <HAL_ADC_Start_DMA+0x178>
 8001934:	4b25      	ldr	r3, [pc, #148]	; (80019cc <HAL_ADC_Start_DMA+0x204>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00a      	beq.n	8001956 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_ADC_Start_DMA+0x21c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d136      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x1f0>
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_ADC_Start_DMA+0x204>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	d130      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d129      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e020      	b.n	80019b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a18      	ldr	r2, [pc, #96]	; (80019dc <HAL_ADC_Start_DMA+0x214>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d11b      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x1f0>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d114      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	e00b      	b.n	80019b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	f043 0210 	orr.w	r2, r3, #16
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000050 	.word	0x20000050
 80019c8:	431bde83 	.word	0x431bde83
 80019cc:	40012300 	.word	0x40012300
 80019d0:	08001e81 	.word	0x08001e81
 80019d4:	08001f3b 	.word	0x08001f3b
 80019d8:	08001f57 	.word	0x08001f57
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40012100 	.word	0x40012100
 80019e4:	40012200 	.word	0x40012200

080019e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e113      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x244>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d925      	bls.n	8001a9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1e      	subs	r3, #30
 8001a66:	2207      	movs	r2, #7
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	400a      	ands	r2, r1
 8001a74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68d9      	ldr	r1, [r3, #12]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	4603      	mov	r3, r0
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4403      	add	r3, r0
 8001a8e:	3b1e      	subs	r3, #30
 8001a90:	409a      	lsls	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	e022      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6919      	ldr	r1, [r3, #16]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4403      	add	r3, r0
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d824      	bhi.n	8001b34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b05      	subs	r3, #5
 8001afc:	221f      	movs	r2, #31
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	400a      	ands	r2, r1
 8001b0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b05      	subs	r3, #5
 8001b26:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
 8001b32:	e04c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d824      	bhi.n	8001b86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b23      	subs	r3, #35	; 0x23
 8001b4e:	221f      	movs	r2, #31
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b23      	subs	r3, #35	; 0x23
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30
 8001b84:	e023      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b41      	subs	r3, #65	; 0x41
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b41      	subs	r3, #65	; 0x41
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_ADC_ConfigChannel+0x250>)
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a28      	ldr	r2, [pc, #160]	; (8001c78 <HAL_ADC_ConfigChannel+0x254>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d10f      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x1d8>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d10b      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <HAL_ADC_ConfigChannel+0x254>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d12b      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x23a>
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_ADC_ConfigChannel+0x258>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d003      	beq.n	8001c18 <HAL_ADC_ConfigChannel+0x1f4>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b11      	cmp	r3, #17
 8001c16:	d122      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <HAL_ADC_ConfigChannel+0x258>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d111      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_ADC_ConfigChannel+0x25c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_ADC_ConfigChannel+0x260>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	0c9a      	lsrs	r2, r3, #18
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c50:	e002      	b.n	8001c58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f9      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	40012300 	.word	0x40012300
 8001c78:	40012000 	.word	0x40012000
 8001c7c:	10000012 	.word	0x10000012
 8001c80:	20000050 	.word	0x20000050
 8001c84:	431bde83 	.word	0x431bde83

08001c88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c90:	4b79      	ldr	r3, [pc, #484]	; (8001e78 <ADC_Init+0x1f0>)
 8001c92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	021a      	lsls	r2, r3, #8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6899      	ldr	r1, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	430a      	orrs	r2, r1
 8001d14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1a:	4a58      	ldr	r2, [pc, #352]	; (8001e7c <ADC_Init+0x1f4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d022      	beq.n	8001d66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6899      	ldr	r1, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6899      	ldr	r1, [r3, #8]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	e00f      	b.n	8001d86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0202 	bic.w	r2, r2, #2
 8001d94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6899      	ldr	r1, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e1b      	ldrb	r3, [r3, #24]
 8001da0:	005a      	lsls	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d01b      	beq.n	8001dec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001dd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6859      	ldr	r1, [r3, #4]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dde:	3b01      	subs	r3, #1
 8001de0:	035a      	lsls	r2, r3, #13
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	e007      	b.n	8001dfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	051a      	lsls	r2, r3, #20
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e3e:	025a      	lsls	r2, r3, #9
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	029a      	lsls	r2, r3, #10
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	609a      	str	r2, [r3, #8]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40012300 	.word	0x40012300
 8001e7c:	0f000001 	.word	0x0f000001

08001e80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13c      	bne.n	8001f14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d12b      	bne.n	8001f0c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d127      	bne.n	8001f0c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d119      	bne.n	8001f0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0220 	bic.w	r2, r2, #32
 8001ee6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f043 0201 	orr.w	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff fd6b 	bl	80019e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001f12:	e00e      	b.n	8001f32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f003 0310 	and.w	r3, r3, #16
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff fd75 	bl	8001a10 <HAL_ADC_ErrorCallback>
}
 8001f26:	e004      	b.n	8001f32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
}
 8001f32:	bf00      	nop
 8001f34:	3710      	adds	r7, #16
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f7ff fd57 	bl	80019fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f043 0204 	orr.w	r2, r3, #4
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff fd4a 	bl	8001a10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9a:	68ba      	ldr	r2, [r7, #8]
 8001f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb6:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	60d3      	str	r3, [r2, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	0a1b      	lsrs	r3, r3, #8
 8001fd6:	f003 0307 	and.w	r3, r3, #7
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	db0b      	blt.n	8002012 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	f003 021f 	and.w	r2, r3, #31
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <__NVIC_EnableIRQ+0x38>)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	2001      	movs	r0, #1
 800200a:	fa00 f202 	lsl.w	r2, r0, r2
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000e100 	.word	0xe000e100

08002024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db0a      	blt.n	800204e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	490c      	ldr	r1, [pc, #48]	; (8002070 <__NVIC_SetPriority+0x4c>)
 800203e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002042:	0112      	lsls	r2, r2, #4
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	440b      	add	r3, r1
 8002048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800204c:	e00a      	b.n	8002064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4908      	ldr	r1, [pc, #32]	; (8002074 <__NVIC_SetPriority+0x50>)
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	3b04      	subs	r3, #4
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	b2d2      	uxtb	r2, r2
 8002060:	440b      	add	r3, r1
 8002062:	761a      	strb	r2, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000e100 	.word	0xe000e100
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	; 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f1c3 0307 	rsb	r3, r3, #7
 8002092:	2b04      	cmp	r3, #4
 8002094:	bf28      	it	cs
 8002096:	2304      	movcs	r3, #4
 8002098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3304      	adds	r3, #4
 800209e:	2b06      	cmp	r3, #6
 80020a0:	d902      	bls.n	80020a8 <NVIC_EncodePriority+0x30>
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3b03      	subs	r3, #3
 80020a6:	e000      	b.n	80020aa <NVIC_EncodePriority+0x32>
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 32ff 	mov.w	r2, #4294967295
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	401a      	ands	r2, r3
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c0:	f04f 31ff 	mov.w	r1, #4294967295
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ca:	43d9      	mvns	r1, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	4313      	orrs	r3, r2
         );
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3724      	adds	r7, #36	; 0x24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff4c 	bl	8001f84 <__NVIC_SetPriorityGrouping>
}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002106:	f7ff ff61 	bl	8001fcc <__NVIC_GetPriorityGrouping>
 800210a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	6978      	ldr	r0, [r7, #20]
 8002112:	f7ff ffb1 	bl	8002078 <NVIC_EncodePriority>
 8002116:	4602      	mov	r2, r0
 8002118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ff80 	bl	8002024 <__NVIC_SetPriority>
}
 8002124:	bf00      	nop
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	4603      	mov	r3, r0
 8002134:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ff54 	bl	8001fe8 <__NVIC_EnableIRQ>
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002154:	f7ff fac4 	bl	80016e0 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e099      	b.n	8002298 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002184:	e00f      	b.n	80021a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002186:	f7ff faab 	bl	80016e0 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b05      	cmp	r3, #5
 8002192:	d908      	bls.n	80021a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2220      	movs	r2, #32
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2203      	movs	r2, #3
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e078      	b.n	8002298 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e8      	bne.n	8002186 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_DMA_Init+0x158>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d107      	bne.n	8002210 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	4313      	orrs	r3, r2
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4313      	orrs	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	f023 0307 	bic.w	r3, r3, #7
 8002226:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b04      	cmp	r3, #4
 8002238:	d117      	bne.n	800226a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00e      	beq.n	800226a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fb01 	bl	8002854 <DMA_CheckFifoParam>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2240      	movs	r2, #64	; 0x40
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002266:	2301      	movs	r3, #1
 8002268:	e016      	b.n	8002298 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fab8 	bl	80027e8 <DMA_CalcBaseAndBitshift>
 8002278:	4603      	mov	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002280:	223f      	movs	r2, #63	; 0x3f
 8002282:	409a      	lsls	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	f010803f 	.word	0xf010803f

080022a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_DMA_Start_IT+0x26>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e040      	b.n	800234c <HAL_DMA_Start_IT+0xa8>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d12f      	bne.n	800233e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa4a 	bl	800278c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	223f      	movs	r2, #63	; 0x3f
 80022fe:	409a      	lsls	r2, r3
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0216 	orr.w	r2, r2, #22
 8002312:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	2b00      	cmp	r3, #0
 800231a:	d007      	beq.n	800232c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0208 	orr.w	r2, r2, #8
 800232a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f042 0201 	orr.w	r2, r2, #1
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	e005      	b.n	800234a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002346:	2302      	movs	r3, #2
 8002348:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800234a:	7dfb      	ldrb	r3, [r7, #23]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002362:	f7ff f9bd 	bl	80016e0 <HAL_GetTick>
 8002366:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d008      	beq.n	8002386 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e052      	b.n	800242c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0216 	bic.w	r2, r2, #22
 8002394:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d103      	bne.n	80023b6 <HAL_DMA_Abort+0x62>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0208 	bic.w	r2, r2, #8
 80023c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0201 	bic.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d6:	e013      	b.n	8002400 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023d8:	f7ff f982 	bl	80016e0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d90c      	bls.n	8002400 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e015      	b.n	800242c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1e4      	bne.n	80023d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	223f      	movs	r2, #63	; 0x3f
 8002414:	409a      	lsls	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2201      	movs	r2, #1
 800241e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d004      	beq.n	8002452 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2280      	movs	r2, #128	; 0x80
 800244c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00c      	b.n	800246c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2205      	movs	r2, #5
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002484:	4b8e      	ldr	r3, [pc, #568]	; (80026c0 <HAL_DMA_IRQHandler+0x248>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a8e      	ldr	r2, [pc, #568]	; (80026c4 <HAL_DMA_IRQHandler+0x24c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	0a9b      	lsrs	r3, r3, #10
 8002490:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	2208      	movs	r2, #8
 80024a4:	409a      	lsls	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01a      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0304 	and.w	r3, r3, #4
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0204 	bic.w	r2, r2, #4
 80024ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2208      	movs	r2, #8
 80024d2:	409a      	lsls	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	2201      	movs	r2, #1
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d012      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00b      	beq.n	800251a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0202 	orr.w	r2, r3, #2
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2204      	movs	r2, #4
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2204      	movs	r2, #4
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0204 	orr.w	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2210      	movs	r2, #16
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d043      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03c      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2210      	movs	r2, #16
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d018      	beq.n	80025ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d108      	bne.n	80025a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e01f      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d01b      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0208 	bic.w	r2, r2, #8
 80025d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2220      	movs	r2, #32
 80025ee:	409a      	lsls	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 808f 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8087 	beq.w	8002718 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	2220      	movs	r2, #32
 8002610:	409a      	lsls	r2, r3
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b05      	cmp	r3, #5
 8002620:	d136      	bne.n	8002690 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0216 	bic.w	r2, r2, #22
 8002630:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002640:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_DMA_IRQHandler+0x1da>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0208 	bic.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002666:	223f      	movs	r2, #63	; 0x3f
 8002668:	409a      	lsls	r2, r3
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002682:	2b00      	cmp	r3, #0
 8002684:	d07e      	beq.n	8002784 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
        }
        return;
 800268e:	e079      	b.n	8002784 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d01d      	beq.n	80026da <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d031      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	4798      	blx	r3
 80026bc:	e02c      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
 80026be:	bf00      	nop
 80026c0:	20000050 	.word	0x20000050
 80026c4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	4798      	blx	r3
 80026d8:	e01e      	b.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10f      	bne.n	8002708 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0210 	bic.w	r2, r2, #16
 80026f6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271c:	2b00      	cmp	r3, #0
 800271e:	d032      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d022      	beq.n	8002772 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2205      	movs	r2, #5
 8002730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	3301      	adds	r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	d307      	bcc.n	8002760 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f2      	bne.n	8002744 <HAL_DMA_IRQHandler+0x2cc>
 800275e:	e000      	b.n	8002762 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002760:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e000      	b.n	8002786 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002784:	bf00      	nop
    }
  }
}
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027a8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b40      	cmp	r3, #64	; 0x40
 80027b8:	d108      	bne.n	80027cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ca:	e007      	b.n	80027dc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	60da      	str	r2, [r3, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	3b10      	subs	r3, #16
 80027f8:	4a14      	ldr	r2, [pc, #80]	; (800284c <DMA_CalcBaseAndBitshift+0x64>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <DMA_CalcBaseAndBitshift+0x68>)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d909      	bls.n	800282a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	1d1a      	adds	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	; 0x58
 8002828:	e007      	b.n	800283a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	aaaaaaab 	.word	0xaaaaaaab
 8002850:	08008e4c 	.word	0x08008e4c

08002854 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d11f      	bne.n	80028ae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d856      	bhi.n	8002922 <DMA_CheckFifoParam+0xce>
 8002874:	a201      	add	r2, pc, #4	; (adr r2, 800287c <DMA_CheckFifoParam+0x28>)
 8002876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287a:	bf00      	nop
 800287c:	0800288d 	.word	0x0800288d
 8002880:	0800289f 	.word	0x0800289f
 8002884:	0800288d 	.word	0x0800288d
 8002888:	08002923 	.word	0x08002923
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d046      	beq.n	8002926 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800289c:	e043      	b.n	8002926 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a6:	d140      	bne.n	800292a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ac:	e03d      	b.n	800292a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028b6:	d121      	bne.n	80028fc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d837      	bhi.n	800292e <DMA_CheckFifoParam+0xda>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <DMA_CheckFifoParam+0x70>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028d5 	.word	0x080028d5
 80028c8:	080028db 	.word	0x080028db
 80028cc:	080028d5 	.word	0x080028d5
 80028d0:	080028ed 	.word	0x080028ed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	73fb      	strb	r3, [r7, #15]
      break;
 80028d8:	e030      	b.n	800293c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d025      	beq.n	8002932 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ea:	e022      	b.n	8002932 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028f4:	d11f      	bne.n	8002936 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028fa:	e01c      	b.n	8002936 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d903      	bls.n	800290a <DMA_CheckFifoParam+0xb6>
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d003      	beq.n	8002910 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002908:	e018      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
      break;
 800290e:	e015      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	73fb      	strb	r3, [r7, #15]
      break;
 8002920:	e00b      	b.n	800293a <DMA_CheckFifoParam+0xe6>
      break;
 8002922:	bf00      	nop
 8002924:	e00a      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002926:	bf00      	nop
 8002928:	e008      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292a:	bf00      	nop
 800292c:	e006      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800292e:	bf00      	nop
 8002930:	e004      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;   
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <DMA_CheckFifoParam+0xe8>
      break;
 800293a:	bf00      	nop
    }
  } 
  
  return status; 
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002956:	2300      	movs	r3, #0
 8002958:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e165      	b.n	8002c34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002968:	2201      	movs	r2, #1
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4013      	ands	r3, r2
 800297a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	429a      	cmp	r2, r3
 8002982:	f040 8154 	bne.w	8002c2e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b01      	cmp	r3, #1
 8002990:	d005      	beq.n	800299e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	2b02      	cmp	r3, #2
 800299c:	d130      	bne.n	8002a00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	2203      	movs	r2, #3
 80029aa:	fa02 f303 	lsl.w	r3, r2, r3
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4013      	ands	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0201 	and.w	r2, r3, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 0303 	and.w	r3, r3, #3
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	d017      	beq.n	8002a3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	2203      	movs	r2, #3
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0303 	and.w	r3, r3, #3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d123      	bne.n	8002a90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	08da      	lsrs	r2, r3, #3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3208      	adds	r2, #8
 8002a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	220f      	movs	r2, #15
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	08da      	lsrs	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3208      	adds	r2, #8
 8002a8a:	69b9      	ldr	r1, [r7, #24]
 8002a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0203 	and.w	r2, r3, #3
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80ae 	beq.w	8002c2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b5d      	ldr	r3, [pc, #372]	; (8002c4c <HAL_GPIO_Init+0x300>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a5c      	ldr	r2, [pc, #368]	; (8002c4c <HAL_GPIO_Init+0x300>)
 8002adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <HAL_GPIO_Init+0x300>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aee:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a4f      	ldr	r2, [pc, #316]	; (8002c54 <HAL_GPIO_Init+0x308>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d025      	beq.n	8002b66 <HAL_GPIO_Init+0x21a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a4e      	ldr	r2, [pc, #312]	; (8002c58 <HAL_GPIO_Init+0x30c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01f      	beq.n	8002b62 <HAL_GPIO_Init+0x216>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a4d      	ldr	r2, [pc, #308]	; (8002c5c <HAL_GPIO_Init+0x310>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d019      	beq.n	8002b5e <HAL_GPIO_Init+0x212>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a4c      	ldr	r2, [pc, #304]	; (8002c60 <HAL_GPIO_Init+0x314>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0x20e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_GPIO_Init+0x318>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00d      	beq.n	8002b56 <HAL_GPIO_Init+0x20a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <HAL_GPIO_Init+0x31c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <HAL_GPIO_Init+0x206>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a49      	ldr	r2, [pc, #292]	; (8002c6c <HAL_GPIO_Init+0x320>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_GPIO_Init+0x202>
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	e00c      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b4e:	2307      	movs	r3, #7
 8002b50:	e00a      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b52:	2305      	movs	r3, #5
 8002b54:	e008      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b56:	2304      	movs	r3, #4
 8002b58:	e006      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e004      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <HAL_GPIO_Init+0x21c>
 8002b66:	2300      	movs	r3, #0
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	f002 0203 	and.w	r2, r2, #3
 8002b6e:	0092      	lsls	r2, r2, #2
 8002b70:	4093      	lsls	r3, r2
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b78:	4935      	ldr	r1, [pc, #212]	; (8002c50 <HAL_GPIO_Init+0x304>)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	089b      	lsrs	r3, r3, #2
 8002b7e:	3302      	adds	r3, #2
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b86:	4b3a      	ldr	r3, [pc, #232]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4013      	ands	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002baa:	4a31      	ldr	r2, [pc, #196]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb0:	4b2f      	ldr	r3, [pc, #188]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d003      	beq.n	8002bd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd4:	4a26      	ldr	r2, [pc, #152]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c04:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c28:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <HAL_GPIO_Init+0x324>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3301      	adds	r3, #1
 8002c32:	61fb      	str	r3, [r7, #28]
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	f67f ae96 	bls.w	8002968 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3724      	adds	r7, #36	; 0x24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40020000 	.word	0x40020000
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	40020800 	.word	0x40020800
 8002c60:	40020c00 	.word	0x40020c00
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40021400 	.word	0x40021400
 8002c6c:	40021800 	.word	0x40021800
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	887b      	ldrh	r3, [r7, #2]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e001      	b.n	8002c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	807b      	strh	r3, [r7, #2]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb4:	787b      	ldrb	r3, [r7, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cba:	887a      	ldrh	r2, [r7, #2]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc0:	e003      	b.n	8002cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	041a      	lsls	r2, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	619a      	str	r2, [r3, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cf4:	88fb      	ldrh	r3, [r7, #6]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ff32 	bl	8000b60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013c00 	.word	0x40013c00

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0cc      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d90c      	bls.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2a:	4b65      	ldr	r3, [pc, #404]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0b8      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d020      	beq.n	8002d92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d5c:	4b59      	ldr	r3, [pc, #356]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	4a58      	ldr	r2, [pc, #352]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d74:	4b53      	ldr	r3, [pc, #332]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	494d      	ldr	r1, [pc, #308]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d044      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d107      	bne.n	8002db6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b47      	ldr	r3, [pc, #284]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d119      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e07f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc2:	2b03      	cmp	r3, #3
 8002dc4:	d107      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc6:	4b3f      	ldr	r3, [pc, #252]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d109      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e06f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e067      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de6:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0203 	bic.w	r2, r3, #3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4934      	ldr	r1, [pc, #208]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df8:	f7fe fc72 	bl	80016e0 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfe:	e00a      	b.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e00:	f7fe fc6e 	bl	80016e0 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e04f      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e16:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 020c 	and.w	r2, r3, #12
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d1eb      	bne.n	8002e00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d20c      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 030f 	and.w	r3, r3, #15
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e032      	b.n	8002eb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5c:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d009      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	00db      	lsls	r3, r3, #3
 8002e88:	490e      	ldr	r1, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e8e:	f000 f887 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	091b      	lsrs	r3, r3, #4
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	490a      	ldr	r1, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea6:	4a09      	ldr	r2, [pc, #36]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fe fac0 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	40023c00 	.word	0x40023c00
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	08008e34 	.word	0x08008e34
 8002ecc:	20000050 	.word	0x20000050
 8002ed0:	20000054 	.word	0x20000054

08002ed4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	20000050 	.word	0x20000050

08002eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ef0:	f7ff fff0 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0a9b      	lsrs	r3, r3, #10
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	08008e44 	.word	0x08008e44

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f18:	f7ff ffdc 	bl	8002ed4 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0b5b      	lsrs	r3, r3, #13
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4903      	ldr	r1, [pc, #12]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40023800 	.word	0x40023800
 8002f38:	08008e44 	.word	0x08008e44

08002f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	220f      	movs	r2, #15
 8002f4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_RCC_GetClockConfig+0x5c>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0203 	and.w	r2, r3, #3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <HAL_RCC_GetClockConfig+0x5c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_RCC_GetClockConfig+0x5c>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_GetClockConfig+0x5c>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	08db      	lsrs	r3, r3, #3
 8002f76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f7e:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <HAL_RCC_GetClockConfig+0x60>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 020f 	and.w	r2, r3, #15
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	601a      	str	r2, [r3, #0]
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40023c00 	.word	0x40023c00

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa4:	b0a6      	sub	sp, #152	; 0x98
 8002fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fc6:	4bc8      	ldr	r3, [pc, #800]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b0c      	cmp	r3, #12
 8002fd0:	f200 817e 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x330>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003011 	.word	0x08003011
 8002fe0:	080032d1 	.word	0x080032d1
 8002fe4:	080032d1 	.word	0x080032d1
 8002fe8:	080032d1 	.word	0x080032d1
 8002fec:	08003019 	.word	0x08003019
 8002ff0:	080032d1 	.word	0x080032d1
 8002ff4:	080032d1 	.word	0x080032d1
 8002ff8:	080032d1 	.word	0x080032d1
 8002ffc:	08003021 	.word	0x08003021
 8003000:	080032d1 	.word	0x080032d1
 8003004:	080032d1 	.word	0x080032d1
 8003008:	080032d1 	.word	0x080032d1
 800300c:	0800318b 	.word	0x0800318b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003010:	4bb6      	ldr	r3, [pc, #728]	; (80032ec <HAL_RCC_GetSysClockFreq+0x34c>)
 8003012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8003016:	e15f      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003018:	4bb5      	ldr	r3, [pc, #724]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x350>)
 800301a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800301e:	e15b      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003020:	4bb1      	ldr	r3, [pc, #708]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003028:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800302c:	4bae      	ldr	r3, [pc, #696]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d031      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003038:	4bab      	ldr	r3, [pc, #684]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	2200      	movs	r2, #0
 8003040:	66bb      	str	r3, [r7, #104]	; 0x68
 8003042:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800304a:	663b      	str	r3, [r7, #96]	; 0x60
 800304c:	2300      	movs	r3, #0
 800304e:	667b      	str	r3, [r7, #100]	; 0x64
 8003050:	4ba7      	ldr	r3, [pc, #668]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003052:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003056:	462a      	mov	r2, r5
 8003058:	fb03 f202 	mul.w	r2, r3, r2
 800305c:	2300      	movs	r3, #0
 800305e:	4621      	mov	r1, r4
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	4aa2      	ldr	r2, [pc, #648]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x350>)
 8003068:	4621      	mov	r1, r4
 800306a:	fba1 1202 	umull	r1, r2, r1, r2
 800306e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003070:	460a      	mov	r2, r1
 8003072:	67ba      	str	r2, [r7, #120]	; 0x78
 8003074:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003076:	4413      	add	r3, r2
 8003078:	67fb      	str	r3, [r7, #124]	; 0x7c
 800307a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800307e:	2200      	movs	r2, #0
 8003080:	65bb      	str	r3, [r7, #88]	; 0x58
 8003082:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003084:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003088:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800308c:	f7fd f918 	bl	80002c0 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4613      	mov	r3, r2
 8003096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800309a:	e064      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800309c:	4b92      	ldr	r3, [pc, #584]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	2200      	movs	r2, #0
 80030a4:	653b      	str	r3, [r7, #80]	; 0x50
 80030a6:	657a      	str	r2, [r7, #84]	; 0x54
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b0:	2300      	movs	r3, #0
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80030b8:	4622      	mov	r2, r4
 80030ba:	462b      	mov	r3, r5
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	0159      	lsls	r1, r3, #5
 80030c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ca:	0150      	lsls	r0, r2, #5
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4621      	mov	r1, r4
 80030d2:	1a51      	subs	r1, r2, r1
 80030d4:	6139      	str	r1, [r7, #16]
 80030d6:	4629      	mov	r1, r5
 80030d8:	eb63 0301 	sbc.w	r3, r3, r1
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030ea:	4659      	mov	r1, fp
 80030ec:	018b      	lsls	r3, r1, #6
 80030ee:	4651      	mov	r1, sl
 80030f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030f4:	4651      	mov	r1, sl
 80030f6:	018a      	lsls	r2, r1, #6
 80030f8:	4651      	mov	r1, sl
 80030fa:	ebb2 0801 	subs.w	r8, r2, r1
 80030fe:	4659      	mov	r1, fp
 8003100:	eb63 0901 	sbc.w	r9, r3, r1
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003114:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003118:	4690      	mov	r8, r2
 800311a:	4699      	mov	r9, r3
 800311c:	4623      	mov	r3, r4
 800311e:	eb18 0303 	adds.w	r3, r8, r3
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	462b      	mov	r3, r5
 8003126:	eb49 0303 	adc.w	r3, r9, r3
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003138:	4629      	mov	r1, r5
 800313a:	028b      	lsls	r3, r1, #10
 800313c:	4621      	mov	r1, r4
 800313e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003142:	4621      	mov	r1, r4
 8003144:	028a      	lsls	r2, r1, #10
 8003146:	4610      	mov	r0, r2
 8003148:	4619      	mov	r1, r3
 800314a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314e:	2200      	movs	r2, #0
 8003150:	643b      	str	r3, [r7, #64]	; 0x40
 8003152:	647a      	str	r2, [r7, #68]	; 0x44
 8003154:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003158:	f7fd f8b2 	bl	80002c0 <__aeabi_uldivmod>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4613      	mov	r3, r2
 8003162:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003166:	4b60      	ldr	r3, [pc, #384]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	3301      	adds	r3, #1
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003178:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800317c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003188:	e0a6      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318a:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003196:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02a      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a2:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	2200      	movs	r2, #0
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80031ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031b4:	2100      	movs	r1, #0
 80031b6:	4b4e      	ldr	r3, [pc, #312]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80031b8:	fb03 f201 	mul.w	r2, r3, r1
 80031bc:	2300      	movs	r3, #0
 80031be:	fb00 f303 	mul.w	r3, r0, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	4a4a      	ldr	r2, [pc, #296]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x350>)
 80031c6:	fba0 1202 	umull	r1, r2, r0, r2
 80031ca:	677a      	str	r2, [r7, #116]	; 0x74
 80031cc:	460a      	mov	r2, r1
 80031ce:	673a      	str	r2, [r7, #112]	; 0x70
 80031d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80031d2:	4413      	add	r3, r2
 80031d4:	677b      	str	r3, [r7, #116]	; 0x74
 80031d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031da:	2200      	movs	r2, #0
 80031dc:	633b      	str	r3, [r7, #48]	; 0x30
 80031de:	637a      	str	r2, [r7, #52]	; 0x34
 80031e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80031e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80031e8:	f7fd f86a 	bl	80002c0 <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031f6:	e05b      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	4b3b      	ldr	r3, [pc, #236]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	2200      	movs	r2, #0
 8003200:	62bb      	str	r3, [r7, #40]	; 0x28
 8003202:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	2300      	movs	r3, #0
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
 8003210:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003214:	4642      	mov	r2, r8
 8003216:	464b      	mov	r3, r9
 8003218:	f04f 0000 	mov.w	r0, #0
 800321c:	f04f 0100 	mov.w	r1, #0
 8003220:	0159      	lsls	r1, r3, #5
 8003222:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003226:	0150      	lsls	r0, r2, #5
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4641      	mov	r1, r8
 800322e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003232:	4649      	mov	r1, r9
 8003234:	eb63 0b01 	sbc.w	fp, r3, r1
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003244:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003248:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800324c:	ebb2 040a 	subs.w	r4, r2, sl
 8003250:	eb63 050b 	sbc.w	r5, r3, fp
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	00eb      	lsls	r3, r5, #3
 800325e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003262:	00e2      	lsls	r2, r4, #3
 8003264:	4614      	mov	r4, r2
 8003266:	461d      	mov	r5, r3
 8003268:	4643      	mov	r3, r8
 800326a:	18e3      	adds	r3, r4, r3
 800326c:	603b      	str	r3, [r7, #0]
 800326e:	464b      	mov	r3, r9
 8003270:	eb45 0303 	adc.w	r3, r5, r3
 8003274:	607b      	str	r3, [r7, #4]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003282:	4629      	mov	r1, r5
 8003284:	028b      	lsls	r3, r1, #10
 8003286:	4621      	mov	r1, r4
 8003288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800328c:	4621      	mov	r1, r4
 800328e:	028a      	lsls	r2, r1, #10
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003298:	2200      	movs	r2, #0
 800329a:	61bb      	str	r3, [r7, #24]
 800329c:	61fa      	str	r2, [r7, #28]
 800329e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032a2:	f7fd f80d 	bl	80002c0 <__aeabi_uldivmod>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4613      	mov	r3, r2
 80032ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032b0:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x348>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	0f1b      	lsrs	r3, r3, #28
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80032be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032ce:	e003      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_RCC_GetSysClockFreq+0x34c>)
 80032d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80032d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3798      	adds	r7, #152	; 0x98
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	00f42400 	.word	0x00f42400
 80032f0:	017d7840 	.word	0x017d7840

080032f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e28d      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8083 	beq.w	800341a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003314:	4b94      	ldr	r3, [pc, #592]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 030c 	and.w	r3, r3, #12
 800331c:	2b04      	cmp	r3, #4
 800331e:	d019      	beq.n	8003354 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003320:	4b91      	ldr	r3, [pc, #580]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003328:	2b08      	cmp	r3, #8
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800332c:	4b8e      	ldr	r3, [pc, #568]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003338:	d00c      	beq.n	8003354 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333a:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d112      	bne.n	800336c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003352:	d10b      	bne.n	800336c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	4b84      	ldr	r3, [pc, #528]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d05b      	beq.n	8003418 <HAL_RCC_OscConfig+0x124>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d157      	bne.n	8003418 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e25a      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x90>
 8003376:	4b7c      	ldr	r3, [pc, #496]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7b      	ldr	r2, [pc, #492]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e01d      	b.n	80033c0 <HAL_RCC_OscConfig+0xcc>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0xb4>
 800338e:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a75      	ldr	r2, [pc, #468]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a72      	ldr	r2, [pc, #456]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e00b      	b.n	80033c0 <HAL_RCC_OscConfig+0xcc>
 80033a8:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80033ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80033ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c8:	f7fe f98a 	bl	80016e0 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe f986 	bl	80016e0 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	; 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e21f      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b61      	ldr	r3, [pc, #388]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0xdc>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe f976 	bl	80016e0 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f8:	f7fe f972 	bl	80016e0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b64      	cmp	r3, #100	; 0x64
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e20b      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340a:	4b57      	ldr	r3, [pc, #348]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x104>
 8003416:	e000      	b.n	800341a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d06f      	beq.n	8003506 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003426:	4b50      	ldr	r3, [pc, #320]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b00      	cmp	r3, #0
 8003430:	d017      	beq.n	8003462 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003432:	4b4d      	ldr	r3, [pc, #308]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800343a:	2b08      	cmp	r3, #8
 800343c:	d105      	bne.n	800344a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800343e:	4b4a      	ldr	r3, [pc, #296]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800344a:	4b47      	ldr	r3, [pc, #284]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d11c      	bne.n	8003490 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b44      	ldr	r3, [pc, #272]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d116      	bne.n	8003490 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	4b41      	ldr	r3, [pc, #260]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <HAL_RCC_OscConfig+0x186>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d001      	beq.n	800347a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e1d3      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800347a:	4b3b      	ldr	r3, [pc, #236]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4937      	ldr	r1, [pc, #220]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	e03a      	b.n	8003506 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d020      	beq.n	80034da <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003498:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_OscConfig+0x278>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349e:	f7fe f91f 	bl	80016e0 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034a6:	f7fe f91b 	bl	80016e0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e1b4      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	4b2b      	ldr	r3, [pc, #172]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b28      	ldr	r3, [pc, #160]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4925      	ldr	r1, [pc, #148]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
 80034d8:	e015      	b.n	8003506 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034da:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_RCC_OscConfig+0x278>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe f8fe 	bl	80016e0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034e8:	f7fe f8fa 	bl	80016e0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e193      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d036      	beq.n	8003580 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d016      	beq.n	8003548 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_RCC_OscConfig+0x27c>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003520:	f7fe f8de 	bl	80016e0 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe f8da 	bl	80016e0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e173      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_OscConfig+0x274>)
 800353c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x234>
 8003546:	e01b      	b.n	8003580 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003548:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_OscConfig+0x27c>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354e:	f7fe f8c7 	bl	80016e0 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	e00e      	b.n	8003574 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003556:	f7fe f8c3 	bl	80016e0 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d907      	bls.n	8003574 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e15c      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
 8003568:	40023800 	.word	0x40023800
 800356c:	42470000 	.word	0x42470000
 8003570:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b8a      	ldr	r3, [pc, #552]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ea      	bne.n	8003556 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8097 	beq.w	80036bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b83      	ldr	r3, [pc, #524]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b7f      	ldr	r3, [pc, #508]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a7e      	ldr	r2, [pc, #504]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b7c      	ldr	r3, [pc, #496]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b79      	ldr	r3, [pc, #484]	; (80037a4 <HAL_RCC_OscConfig+0x4b0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d118      	bne.n	80035fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ca:	4b76      	ldr	r3, [pc, #472]	; (80037a4 <HAL_RCC_OscConfig+0x4b0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a75      	ldr	r2, [pc, #468]	; (80037a4 <HAL_RCC_OscConfig+0x4b0>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fe f883 	bl	80016e0 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	e008      	b.n	80035f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7fe f87f 	bl	80016e0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e118      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	4b6c      	ldr	r3, [pc, #432]	; (80037a4 <HAL_RCC_OscConfig+0x4b0>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d106      	bne.n	8003612 <HAL_RCC_OscConfig+0x31e>
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003608:	4a65      	ldr	r2, [pc, #404]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6713      	str	r3, [r2, #112]	; 0x70
 8003610:	e01c      	b.n	800364c <HAL_RCC_OscConfig+0x358>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	2b05      	cmp	r3, #5
 8003618:	d10c      	bne.n	8003634 <HAL_RCC_OscConfig+0x340>
 800361a:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	f043 0304 	orr.w	r3, r3, #4
 8003624:	6713      	str	r3, [r2, #112]	; 0x70
 8003626:	4b5e      	ldr	r3, [pc, #376]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a5d      	ldr	r2, [pc, #372]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	e00b      	b.n	800364c <HAL_RCC_OscConfig+0x358>
 8003634:	4b5a      	ldr	r3, [pc, #360]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003638:	4a59      	ldr	r2, [pc, #356]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	; 0x70
 8003640:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003644:	4a56      	ldr	r2, [pc, #344]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003646:	f023 0304 	bic.w	r3, r3, #4
 800364a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d015      	beq.n	8003680 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe f844 	bl	80016e0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe f840 	bl	80016e0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0d7      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ee      	beq.n	800365c <HAL_RCC_OscConfig+0x368>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003680:	f7fe f82e 	bl	80016e0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003686:	e00a      	b.n	800369e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003688:	f7fe f82a 	bl	80016e0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	f241 3288 	movw	r2, #5000	; 0x1388
 8003696:	4293      	cmp	r3, r2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0c1      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ee      	bne.n	8003688 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d105      	bne.n	80036bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	4a3a      	ldr	r2, [pc, #232]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80036b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80ad 	beq.w	8003820 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 030c 	and.w	r3, r3, #12
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d060      	beq.n	8003794 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d145      	bne.n	8003766 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036da:	4b33      	ldr	r3, [pc, #204]	; (80037a8 <HAL_RCC_OscConfig+0x4b4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e0:	f7fd fffe 	bl	80016e0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e8:	f7fd fffa 	bl	80016e0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e093      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fa:	4b29      	ldr	r3, [pc, #164]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	3b01      	subs	r3, #1
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	491b      	ldr	r1, [pc, #108]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003738:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4b4>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fd ffcf 	bl	80016e0 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003746:	f7fd ffcb 	bl	80016e0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e064      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003758:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x452>
 8003764:	e05c      	b.n	8003820 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x4b4>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7fd ffb8 	bl	80016e0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003774:	f7fd ffb4 	bl	80016e0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e04d      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_OscConfig+0x4ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x480>
 8003792:	e045      	b.n	8003820 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d107      	bne.n	80037ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e040      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40007000 	.word	0x40007000
 80037a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_RCC_OscConfig+0x538>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d030      	beq.n	800381c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d129      	bne.n	800381c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d122      	bne.n	800381c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037dc:	4013      	ands	r3, r2
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d119      	bne.n	800381c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d10f      	bne.n	800381c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003818:	429a      	cmp	r2, r3
 800381a:	d001      	beq.n	8003820 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800

08003830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f839 	bl	80038ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 f9d8 	bl	8003c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d001      	beq.n	80038fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e04e      	b.n	800399a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d022      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003926:	d01d      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1f      	ldr	r2, [pc, #124]	; (80039ac <HAL_TIM_Base_Start_IT+0xc8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d018      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1e      	ldr	r2, [pc, #120]	; (80039b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1c      	ldr	r2, [pc, #112]	; (80039b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00e      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a19      	ldr	r2, [pc, #100]	; (80039bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_TIM_Base_Start_IT+0x80>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a18      	ldr	r2, [pc, #96]	; (80039c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d111      	bne.n	8003988 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b06      	cmp	r3, #6
 8003974:	d010      	beq.n	8003998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f042 0201 	orr.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003986:	e007      	b.n	8003998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40010400 	.word	0x40010400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40001800 	.word	0x40001800

080039c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d122      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d11b      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0202 	mvn.w	r2, #2
 80039f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8ee 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f8e0 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f8f1 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	d122      	bne.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d11b      	bne.n	8003a74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0204 	mvn.w	r2, #4
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2202      	movs	r2, #2
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f8c4 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003a60:	e005      	b.n	8003a6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8b6 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8c7 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d122      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f003 0308 	and.w	r3, r3, #8
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f06f 0208 	mvn.w	r2, #8
 8003a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f89a 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003ab4:	e005      	b.n	8003ac2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 f88c 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f89d 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d122      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d11b      	bne.n	8003b1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0210 	mvn.w	r2, #16
 8003aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2208      	movs	r2, #8
 8003af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f870 	bl	8003be8 <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f862 	bl	8003bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f873 	bl	8003bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d10e      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d107      	bne.n	8003b48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0201 	mvn.w	r2, #1
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fd fb6a 	bl	800121c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b52:	2b80      	cmp	r3, #128	; 0x80
 8003b54:	d10e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d107      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f902 	bl	8003d78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d10e      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d107      	bne.n	8003ba0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f838 	bl	8003c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d10e      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d107      	bne.n	8003bcc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f06f 0220 	mvn.w	r2, #32
 8003bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f8cc 	bl	8003d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a40      	ldr	r2, [pc, #256]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d013      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c42:	d00f      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <TIM_Base_SetConfig+0x118>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00b      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <TIM_Base_SetConfig+0x11c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3b      	ldr	r2, [pc, #236]	; (8003d44 <TIM_Base_SetConfig+0x120>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3a      	ldr	r2, [pc, #232]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d108      	bne.n	8003c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a2f      	ldr	r2, [pc, #188]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d02b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c84:	d027      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <TIM_Base_SetConfig+0x118>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d023      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2b      	ldr	r2, [pc, #172]	; (8003d40 <TIM_Base_SetConfig+0x11c>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01f      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2a      	ldr	r2, [pc, #168]	; (8003d44 <TIM_Base_SetConfig+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d01b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a29      	ldr	r2, [pc, #164]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d017      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <TIM_Base_SetConfig+0x128>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a27      	ldr	r2, [pc, #156]	; (8003d50 <TIM_Base_SetConfig+0x12c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00f      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <TIM_Base_SetConfig+0x130>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00b      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <TIM_Base_SetConfig+0x134>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d007      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <TIM_Base_SetConfig+0x138>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d003      	beq.n	8003cd6 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a23      	ldr	r2, [pc, #140]	; (8003d60 <TIM_Base_SetConfig+0x13c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d108      	bne.n	8003ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	; (8003d38 <TIM_Base_SetConfig+0x114>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <TIM_Base_SetConfig+0x124>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d103      	bne.n	8003d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	691a      	ldr	r2, [r3, #16]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	615a      	str	r2, [r3, #20]
}
 8003d2a:	bf00      	nop
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40000c00 	.word	0x40000c00
 8003d48:	40010400 	.word	0x40010400
 8003d4c:	40014000 	.word	0x40014000
 8003d50:	40014400 	.word	0x40014400
 8003d54:	40014800 	.word	0x40014800
 8003d58:	40001800 	.word	0x40001800
 8003d5c:	40001c00 	.word	0x40001c00
 8003d60:	40002000 	.word	0x40002000

08003d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e03f      	b.n	8003e1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d106      	bne.n	8003db8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fd faee 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2224      	movs	r2, #36	; 0x24
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 fd7b 	bl	80048cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003de4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003df4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68da      	ldr	r2, [r3, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b08a      	sub	sp, #40	; 0x28
 8003e2a:	af02      	add	r7, sp, #8
 8003e2c:	60f8      	str	r0, [r7, #12]
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	603b      	str	r3, [r7, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d17c      	bne.n	8003f40 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_UART_Transmit+0x2c>
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e075      	b.n	8003f42 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_UART_Transmit+0x3e>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e06e      	b.n	8003f42 <HAL_UART_Transmit+0x11c>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2221      	movs	r2, #33	; 0x21
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e7a:	f7fd fc31 	bl	80016e0 <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	88fa      	ldrh	r2, [r7, #6]
 8003e84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e94:	d108      	bne.n	8003ea8 <HAL_UART_Transmit+0x82>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d104      	bne.n	8003ea8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	e003      	b.n	8003eb0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003eb8:	e02a      	b.n	8003f10 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2180      	movs	r1, #128	; 0x80
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 faf9 	bl	80044bc <UART_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e036      	b.n	8003f42 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ee8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	3302      	adds	r3, #2
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	e007      	b.n	8003f02 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3301      	adds	r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1cf      	bne.n	8003eba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2200      	movs	r2, #0
 8003f22:	2140      	movs	r1, #64	; 0x40
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fac9 	bl	80044bc <UART_WaitOnFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e006      	b.n	8003f42 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e000      	b.n	8003f42 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f40:	2302      	movs	r3, #2
  }
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3720      	adds	r7, #32
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b0ba      	sub	sp, #232	; 0xe8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 030f 	and.w	r3, r3, #15
 8003f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f96:	f003 0320 	and.w	r3, r3, #32
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x66>
 8003f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fbd3 	bl	8004756 <UART_Receive_IT>
      return;
 8003fb0:	e256      	b.n	8004460 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80de 	beq.w	8004178 <HAL_UART_IRQHandler+0x22c>
 8003fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d106      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fcc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f000 80d1 	beq.w	8004178 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <HAL_UART_IRQHandler+0xae>
 8003fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d005      	beq.n	8003ffa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f043 0201 	orr.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_UART_IRQHandler+0xd2>
 8004006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0202 	orr.w	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_UART_IRQHandler+0xf6>
 800402a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d005      	beq.n	8004042 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f043 0204 	orr.w	r2, r3, #4
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d011      	beq.n	8004072 <HAL_UART_IRQHandler+0x126>
 800404e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d105      	bne.n	8004066 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800405a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	f043 0208 	orr.w	r2, r3, #8
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 81ed 	beq.w	8004456 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800407c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_UART_IRQHandler+0x14e>
 8004088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fb5e 	bl	8004756 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	bf0c      	ite	eq
 80040a8:	2301      	moveq	r3, #1
 80040aa:	2300      	movne	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 0308 	and.w	r3, r3, #8
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d103      	bne.n	80040c6 <HAL_UART_IRQHandler+0x17a>
 80040be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d04f      	beq.n	8004166 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fa66 	bl	8004598 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d6:	2b40      	cmp	r3, #64	; 0x40
 80040d8:	d141      	bne.n	800415e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3314      	adds	r3, #20
 80040e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800410a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004116:	e841 2300 	strex	r3, r2, [r1]
 800411a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800411e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1d9      	bne.n	80040da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	2b00      	cmp	r3, #0
 800412c:	d013      	beq.n	8004156 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	4a7d      	ldr	r2, [pc, #500]	; (8004328 <HAL_UART_IRQHandler+0x3dc>)
 8004134:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	4618      	mov	r0, r3
 800413c:	f7fe f97a 	bl	8002434 <HAL_DMA_Abort_IT>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004150:	4610      	mov	r0, r2
 8004152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	e00e      	b.n	8004174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f99a 	bl	8004490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415c:	e00a      	b.n	8004174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f996 	bl	8004490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	e006      	b.n	8004174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f992 	bl	8004490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004172:	e170      	b.n	8004456 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	bf00      	nop
    return;
 8004176:	e16e      	b.n	8004456 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	2b01      	cmp	r3, #1
 800417e:	f040 814a 	bne.w	8004416 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8143 	beq.w	8004416 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 813c 	beq.w	8004416 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800419e:	2300      	movs	r3, #0
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60bb      	str	r3, [r7, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b40      	cmp	r3, #64	; 0x40
 80041c0:	f040 80b4 	bne.w	800432c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8140 	beq.w	800445a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041e2:	429a      	cmp	r2, r3
 80041e4:	f080 8139 	bcs.w	800445a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fa:	f000 8088 	beq.w	800430e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004208:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800421c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800422a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800422e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004232:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004236:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004242:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1d9      	bne.n	80041fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800425a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800426e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004272:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004274:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004276:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e1      	bne.n	800424a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	3314      	adds	r3, #20
 800428c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004290:	e853 3f00 	ldrex	r3, [r3]
 8004294:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004298:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800429c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3314      	adds	r3, #20
 80042a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042b2:	e841 2300 	strex	r3, r2, [r1]
 80042b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1e3      	bne.n	8004286 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042de:	f023 0310 	bic.w	r3, r3, #16
 80042e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	330c      	adds	r3, #12
 80042ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80042f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042f8:	e841 2300 	strex	r3, r2, [r1]
 80042fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e3      	bne.n	80042cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe f823 	bl	8002354 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004316:	b29b      	uxth	r3, r3
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	b29b      	uxth	r3, r3
 800431c:	4619      	mov	r1, r3
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f8c0 	bl	80044a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004324:	e099      	b.n	800445a <HAL_UART_IRQHandler+0x50e>
 8004326:	bf00      	nop
 8004328:	0800465f 	.word	0x0800465f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004334:	b29b      	uxth	r3, r3
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 808b 	beq.w	800445e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004348:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 8086 	beq.w	800445e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004368:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004376:	647a      	str	r2, [r7, #68]	; 0x44
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800437c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	623b      	str	r3, [r7, #32]
   return(result);
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3314      	adds	r3, #20
 80043aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043ae:	633a      	str	r2, [r7, #48]	; 0x30
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e3      	bne.n	800438a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	330c      	adds	r3, #12
 80043d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 0310 	bic.w	r3, r3, #16
 80043e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	330c      	adds	r3, #12
 80043f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043f4:	61fa      	str	r2, [r7, #28]
 80043f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	69b9      	ldr	r1, [r7, #24]
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	617b      	str	r3, [r7, #20]
   return(result);
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e3      	bne.n	80043d0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004408:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800440c:	4619      	mov	r1, r3
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f848 	bl	80044a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004414:	e023      	b.n	800445e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_UART_IRQHandler+0x4ea>
 8004422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f929 	bl	8004686 <UART_Transmit_IT>
    return;
 8004434:	e014      	b.n	8004460 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800443a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00e      	beq.n	8004460 <HAL_UART_IRQHandler+0x514>
 8004442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d008      	beq.n	8004460 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f969 	bl	8004726 <UART_EndTransmit_IT>
    return;
 8004454:	e004      	b.n	8004460 <HAL_UART_IRQHandler+0x514>
    return;
 8004456:	bf00      	nop
 8004458:	e002      	b.n	8004460 <HAL_UART_IRQHandler+0x514>
      return;
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <HAL_UART_IRQHandler+0x514>
      return;
 800445e:	bf00      	nop
  }
}
 8004460:	37e8      	adds	r7, #232	; 0xe8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop

08004468 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b090      	sub	sp, #64	; 0x40
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044cc:	e050      	b.n	8004570 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d4:	d04c      	beq.n	8004570 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d007      	beq.n	80044ec <UART_WaitOnFlagUntilTimeout+0x30>
 80044dc:	f7fd f900 	bl	80016e0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d241      	bcs.n	8004570 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	e853 3f00 	ldrex	r3, [r3]
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800450c:	637a      	str	r2, [r7, #52]	; 0x34
 800450e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e5      	bne.n	80044ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3314      	adds	r3, #20
 8004526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	e853 3f00 	ldrex	r3, [r3]
 800452e:	613b      	str	r3, [r7, #16]
   return(result);
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f023 0301 	bic.w	r3, r3, #1
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004540:	623a      	str	r2, [r7, #32]
 8004542:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004544:	69f9      	ldr	r1, [r7, #28]
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	e841 2300 	strex	r3, r2, [r1]
 800454c:	61bb      	str	r3, [r7, #24]
   return(result);
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e5      	bne.n	8004520 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e00f      	b.n	8004590 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4013      	ands	r3, r2
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	429a      	cmp	r2, r3
 800458c:	d09f      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3740      	adds	r7, #64	; 0x40
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b095      	sub	sp, #84	; 0x54
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045c0:	643a      	str	r2, [r7, #64]	; 0x40
 80045c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3314      	adds	r3, #20
 80045da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e5      	bne.n	80045d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	d119      	bne.n	8004644 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	330c      	adds	r3, #12
 8004616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f023 0310 	bic.w	r3, r3, #16
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004630:	61ba      	str	r2, [r7, #24]
 8004632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6979      	ldr	r1, [r7, #20]
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	613b      	str	r3, [r7, #16]
   return(result);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e5      	bne.n	8004610 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004652:	bf00      	nop
 8004654:	3754      	adds	r7, #84	; 0x54
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f7ff ff09 	bl	8004490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004686:	b480      	push	{r7}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b21      	cmp	r3, #33	; 0x21
 8004698:	d13e      	bne.n	8004718 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	d114      	bne.n	80046ce <UART_Transmit_IT+0x48>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d110      	bne.n	80046ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	1c9a      	adds	r2, r3, #2
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	621a      	str	r2, [r3, #32]
 80046cc:	e008      	b.n	80046e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	1c59      	adds	r1, r3, #1
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6211      	str	r1, [r2, #32]
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	3b01      	subs	r3, #1
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	4619      	mov	r1, r3
 80046ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10f      	bne.n	8004714 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004702:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004712:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fe8e 	bl	8004468 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b08c      	sub	sp, #48	; 0x30
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b22      	cmp	r3, #34	; 0x22
 8004768:	f040 80ab 	bne.w	80048c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	d117      	bne.n	80047a6 <UART_Receive_IT+0x50>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d113      	bne.n	80047a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800477e:	2300      	movs	r3, #0
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004786:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004794:	b29a      	uxth	r2, r3
 8004796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004798:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	1c9a      	adds	r2, r3, #2
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28
 80047a4:	e026      	b.n	80047f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b8:	d007      	beq.n	80047ca <UART_Receive_IT+0x74>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <UART_Receive_IT+0x82>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	e008      	b.n	80047ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	4619      	mov	r1, r3
 8004802:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004804:	2b00      	cmp	r3, #0
 8004806:	d15a      	bne.n	80048be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0220 	bic.w	r2, r2, #32
 8004816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004826:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004844:	2b01      	cmp	r3, #1
 8004846:	d135      	bne.n	80048b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	613b      	str	r3, [r7, #16]
   return(result);
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f023 0310 	bic.w	r3, r3, #16
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	623a      	str	r2, [r7, #32]
 8004870:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	69f9      	ldr	r1, [r7, #28]
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	61bb      	str	r3, [r7, #24]
   return(result);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e5      	bne.n	800484e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d10a      	bne.n	80048a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048aa:	4619      	mov	r1, r3
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff fdf9 	bl	80044a4 <HAL_UARTEx_RxEventCallback>
 80048b2:	e002      	b.n	80048ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff fde1 	bl	800447c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e002      	b.n	80048c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
  }
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3730      	adds	r7, #48	; 0x30
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d0:	b0c0      	sub	sp, #256	; 0x100
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	68d9      	ldr	r1, [r3, #12]
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	ea40 0301 	orr.w	r3, r0, r1
 80048f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	431a      	orrs	r2, r3
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	431a      	orrs	r2, r3
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004924:	f021 010c 	bic.w	r1, r1, #12
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004932:	430b      	orrs	r3, r1
 8004934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004946:	6999      	ldr	r1, [r3, #24]
 8004948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	ea40 0301 	orr.w	r3, r0, r1
 8004952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b8f      	ldr	r3, [pc, #572]	; (8004b98 <UART_SetConfig+0x2cc>)
 800495c:	429a      	cmp	r2, r3
 800495e:	d005      	beq.n	800496c <UART_SetConfig+0xa0>
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	4b8d      	ldr	r3, [pc, #564]	; (8004b9c <UART_SetConfig+0x2d0>)
 8004968:	429a      	cmp	r2, r3
 800496a:	d104      	bne.n	8004976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800496c:	f7fe fad2 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004970:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004974:	e003      	b.n	800497e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004976:	f7fe fab9 	bl	8002eec <HAL_RCC_GetPCLK1Freq>
 800497a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	f040 810c 	bne.w	8004ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800498c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004996:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800499a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800499e:	4622      	mov	r2, r4
 80049a0:	462b      	mov	r3, r5
 80049a2:	1891      	adds	r1, r2, r2
 80049a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049a6:	415b      	adcs	r3, r3
 80049a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049ae:	4621      	mov	r1, r4
 80049b0:	eb12 0801 	adds.w	r8, r2, r1
 80049b4:	4629      	mov	r1, r5
 80049b6:	eb43 0901 	adc.w	r9, r3, r1
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ce:	4690      	mov	r8, r2
 80049d0:	4699      	mov	r9, r3
 80049d2:	4623      	mov	r3, r4
 80049d4:	eb18 0303 	adds.w	r3, r8, r3
 80049d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049dc:	462b      	mov	r3, r5
 80049de:	eb49 0303 	adc.w	r3, r9, r3
 80049e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80049fa:	460b      	mov	r3, r1
 80049fc:	18db      	adds	r3, r3, r3
 80049fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004a00:	4613      	mov	r3, r2
 8004a02:	eb42 0303 	adc.w	r3, r2, r3
 8004a06:	657b      	str	r3, [r7, #84]	; 0x54
 8004a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a10:	f7fb fc56 	bl	80002c0 <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	011c      	lsls	r4, r3, #4
 8004a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a34:	4642      	mov	r2, r8
 8004a36:	464b      	mov	r3, r9
 8004a38:	1891      	adds	r1, r2, r2
 8004a3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a3c:	415b      	adcs	r3, r3
 8004a3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a44:	4641      	mov	r1, r8
 8004a46:	eb12 0a01 	adds.w	sl, r2, r1
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a50:	f04f 0200 	mov.w	r2, #0
 8004a54:	f04f 0300 	mov.w	r3, #0
 8004a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a64:	4692      	mov	sl, r2
 8004a66:	469b      	mov	fp, r3
 8004a68:	4643      	mov	r3, r8
 8004a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a72:	464b      	mov	r3, r9
 8004a74:	eb4b 0303 	adc.w	r3, fp, r3
 8004a78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a90:	460b      	mov	r3, r1
 8004a92:	18db      	adds	r3, r3, r3
 8004a94:	643b      	str	r3, [r7, #64]	; 0x40
 8004a96:	4613      	mov	r3, r2
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004aa6:	f7fb fc0b 	bl	80002c0 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4b3b      	ldr	r3, [pc, #236]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2264      	movs	r2, #100	; 0x64
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	1acb      	subs	r3, r1, r3
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ac6:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8004acc:	095b      	lsrs	r3, r3, #5
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad4:	441c      	add	r4, r3
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ae8:	4642      	mov	r2, r8
 8004aea:	464b      	mov	r3, r9
 8004aec:	1891      	adds	r1, r2, r2
 8004aee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004af0:	415b      	adcs	r3, r3
 8004af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004af8:	4641      	mov	r1, r8
 8004afa:	1851      	adds	r1, r2, r1
 8004afc:	6339      	str	r1, [r7, #48]	; 0x30
 8004afe:	4649      	mov	r1, r9
 8004b00:	414b      	adcs	r3, r1
 8004b02:	637b      	str	r3, [r7, #52]	; 0x34
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b10:	4659      	mov	r1, fp
 8004b12:	00cb      	lsls	r3, r1, #3
 8004b14:	4651      	mov	r1, sl
 8004b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1a:	4651      	mov	r1, sl
 8004b1c:	00ca      	lsls	r2, r1, #3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	4619      	mov	r1, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	4642      	mov	r2, r8
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	460a      	mov	r2, r1
 8004b30:	eb42 0303 	adc.w	r3, r2, r3
 8004b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	18db      	adds	r3, r3, r3
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b52:	4613      	mov	r3, r2
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b62:	f7fb fbad 	bl	80002c0 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b70:	095b      	lsrs	r3, r3, #5
 8004b72:	2164      	movs	r1, #100	; 0x64
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	3332      	adds	r3, #50	; 0x32
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <UART_SetConfig+0x2d4>)
 8004b80:	fba2 2303 	umull	r2, r3, r2, r3
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	f003 0207 	and.w	r2, r3, #7
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4422      	add	r2, r4
 8004b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b94:	e105      	b.n	8004da2 <UART_SetConfig+0x4d6>
 8004b96:	bf00      	nop
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	40011400 	.word	0x40011400
 8004ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	464b      	mov	r3, r9
 8004bba:	1891      	adds	r1, r2, r2
 8004bbc:	6239      	str	r1, [r7, #32]
 8004bbe:	415b      	adcs	r3, r3
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bc6:	4641      	mov	r1, r8
 8004bc8:	1854      	adds	r4, r2, r1
 8004bca:	4649      	mov	r1, r9
 8004bcc:	eb43 0501 	adc.w	r5, r3, r1
 8004bd0:	f04f 0200 	mov.w	r2, #0
 8004bd4:	f04f 0300 	mov.w	r3, #0
 8004bd8:	00eb      	lsls	r3, r5, #3
 8004bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bde:	00e2      	lsls	r2, r4, #3
 8004be0:	4614      	mov	r4, r2
 8004be2:	461d      	mov	r5, r3
 8004be4:	4643      	mov	r3, r8
 8004be6:	18e3      	adds	r3, r4, r3
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bec:	464b      	mov	r3, r9
 8004bee:	eb45 0303 	adc.w	r3, r5, r3
 8004bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c12:	4629      	mov	r1, r5
 8004c14:	008b      	lsls	r3, r1, #2
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	008a      	lsls	r2, r1, #2
 8004c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c24:	f7fb fb4c 	bl	80002c0 <__aeabi_uldivmod>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	4b60      	ldr	r3, [pc, #384]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c32:	095b      	lsrs	r3, r3, #5
 8004c34:	011c      	lsls	r4, r3, #4
 8004c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c48:	4642      	mov	r2, r8
 8004c4a:	464b      	mov	r3, r9
 8004c4c:	1891      	adds	r1, r2, r2
 8004c4e:	61b9      	str	r1, [r7, #24]
 8004c50:	415b      	adcs	r3, r3
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c58:	4641      	mov	r1, r8
 8004c5a:	1851      	adds	r1, r2, r1
 8004c5c:	6139      	str	r1, [r7, #16]
 8004c5e:	4649      	mov	r1, r9
 8004c60:	414b      	adcs	r3, r1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c70:	4659      	mov	r1, fp
 8004c72:	00cb      	lsls	r3, r1, #3
 8004c74:	4651      	mov	r1, sl
 8004c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7a:	4651      	mov	r1, sl
 8004c7c:	00ca      	lsls	r2, r1, #3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	4619      	mov	r1, r3
 8004c82:	4603      	mov	r3, r0
 8004c84:	4642      	mov	r2, r8
 8004c86:	189b      	adds	r3, r3, r2
 8004c88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	460a      	mov	r2, r1
 8004c90:	eb42 0303 	adc.w	r3, r2, r3
 8004c94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cb0:	4649      	mov	r1, r9
 8004cb2:	008b      	lsls	r3, r1, #2
 8004cb4:	4641      	mov	r1, r8
 8004cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cba:	4641      	mov	r1, r8
 8004cbc:	008a      	lsls	r2, r1, #2
 8004cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cc2:	f7fb fafd 	bl	80002c0 <__aeabi_uldivmod>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd0:	095b      	lsrs	r3, r3, #5
 8004cd2:	2164      	movs	r1, #100	; 0x64
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	3332      	adds	r3, #50	; 0x32
 8004cde:	4a34      	ldr	r2, [pc, #208]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cea:	441c      	add	r4, r3
 8004cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	673b      	str	r3, [r7, #112]	; 0x70
 8004cf4:	677a      	str	r2, [r7, #116]	; 0x74
 8004cf6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	1891      	adds	r1, r2, r2
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	415b      	adcs	r3, r3
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	1851      	adds	r1, r2, r1
 8004d0e:	6039      	str	r1, [r7, #0]
 8004d10:	4649      	mov	r1, r9
 8004d12:	414b      	adcs	r3, r1
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	f04f 0200 	mov.w	r2, #0
 8004d1a:	f04f 0300 	mov.w	r3, #0
 8004d1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d22:	4659      	mov	r1, fp
 8004d24:	00cb      	lsls	r3, r1, #3
 8004d26:	4651      	mov	r1, sl
 8004d28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	00ca      	lsls	r2, r1, #3
 8004d30:	4610      	mov	r0, r2
 8004d32:	4619      	mov	r1, r3
 8004d34:	4603      	mov	r3, r0
 8004d36:	4642      	mov	r2, r8
 8004d38:	189b      	adds	r3, r3, r2
 8004d3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d50:	667a      	str	r2, [r7, #100]	; 0x64
 8004d52:	f04f 0200 	mov.w	r2, #0
 8004d56:	f04f 0300 	mov.w	r3, #0
 8004d5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d5e:	4649      	mov	r1, r9
 8004d60:	008b      	lsls	r3, r1, #2
 8004d62:	4641      	mov	r1, r8
 8004d64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d68:	4641      	mov	r1, r8
 8004d6a:	008a      	lsls	r2, r1, #2
 8004d6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d70:	f7fb faa6 	bl	80002c0 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2164      	movs	r1, #100	; 0x64
 8004d82:	fb01 f303 	mul.w	r3, r1, r3
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	3332      	adds	r3, #50	; 0x32
 8004d8c:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <UART_SetConfig+0x4e4>)
 8004d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d92:	095b      	lsrs	r3, r3, #5
 8004d94:	f003 020f 	and.w	r2, r3, #15
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4422      	add	r2, r4
 8004da0:	609a      	str	r2, [r3, #8]
}
 8004da2:	bf00      	nop
 8004da4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004da8:	46bd      	mov	sp, r7
 8004daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dae:	bf00      	nop
 8004db0:	51eb851f 	.word	0x51eb851f

08004db4 <__NVIC_SetPriority>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	6039      	str	r1, [r7, #0]
 8004dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db0a      	blt.n	8004dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	490c      	ldr	r1, [pc, #48]	; (8004e00 <__NVIC_SetPriority+0x4c>)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ddc:	e00a      	b.n	8004df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4908      	ldr	r1, [pc, #32]	; (8004e04 <__NVIC_SetPriority+0x50>)
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	3b04      	subs	r3, #4
 8004dec:	0112      	lsls	r2, r2, #4
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	440b      	add	r3, r1
 8004df2:	761a      	strb	r2, [r3, #24]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000e100 	.word	0xe000e100
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <SysTick_Handler+0x1c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e10:	f002 f936 	bl	8007080 <xTaskGetSchedulerState>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d001      	beq.n	8004e1e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e1a:	f003 f81d 	bl	8007e58 <xPortSysTickHandler>
  }
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	e000e010 	.word	0xe000e010

08004e28 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	f06f 0004 	mvn.w	r0, #4
 8004e32:	f7ff ffbf 	bl	8004db4 <__NVIC_SetPriority>
#endif
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e42:	f3ef 8305 	mrs	r3, IPSR
 8004e46:	603b      	str	r3, [r7, #0]
  return(result);
 8004e48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e4e:	f06f 0305 	mvn.w	r3, #5
 8004e52:	607b      	str	r3, [r7, #4]
 8004e54:	e00c      	b.n	8004e70 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <osKernelInitialize+0x44>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e5e:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <osKernelInitialize+0x44>)
 8004e60:	2201      	movs	r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	607b      	str	r3, [r7, #4]
 8004e68:	e002      	b.n	8004e70 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004e6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e70:	687b      	ldr	r3, [r7, #4]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000244 	.word	0x20000244

08004e84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8a:	f3ef 8305 	mrs	r3, IPSR
 8004e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8004e90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e96:	f06f 0305 	mvn.w	r3, #5
 8004e9a:	607b      	str	r3, [r7, #4]
 8004e9c:	e010      	b.n	8004ec0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <osKernelStart+0x48>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d109      	bne.n	8004eba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ea6:	f7ff ffbf 	bl	8004e28 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004eaa:	4b08      	ldr	r3, [pc, #32]	; (8004ecc <osKernelStart+0x48>)
 8004eac:	2202      	movs	r2, #2
 8004eae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004eb0:	f001 fc7c 	bl	80067ac <vTaskStartScheduler>
      stat = osOK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	e002      	b.n	8004ec0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004eba:	f04f 33ff 	mov.w	r3, #4294967295
 8004ebe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ec0:	687b      	ldr	r3, [r7, #4]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000244 	.word	0x20000244

08004ed0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ed6:	f3ef 8305 	mrs	r3, IPSR
 8004eda:	603b      	str	r3, [r7, #0]
  return(result);
 8004edc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004ee2:	f001 fd85 	bl	80069f0 <xTaskGetTickCountFromISR>
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	e002      	b.n	8004ef0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004eea:	f001 fd71 	bl	80069d0 <xTaskGetTickCount>
 8004eee:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004ef0:	687b      	ldr	r3, [r7, #4]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b08e      	sub	sp, #56	; 0x38
 8004efe:	af04      	add	r7, sp, #16
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f0a:	f3ef 8305 	mrs	r3, IPSR
 8004f0e:	617b      	str	r3, [r7, #20]
  return(result);
 8004f10:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d17e      	bne.n	8005014 <osThreadNew+0x11a>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d07b      	beq.n	8005014 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f20:	2318      	movs	r3, #24
 8004f22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f24:	2300      	movs	r3, #0
 8004f26:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d045      	beq.n	8004fc0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <osThreadNew+0x48>
        name = attr->name;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <osThreadNew+0x6e>
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	2b38      	cmp	r3, #56	; 0x38
 8004f5a:	d805      	bhi.n	8004f68 <osThreadNew+0x6e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <osThreadNew+0x72>
        return (NULL);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e054      	b.n	8005016 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	089b      	lsrs	r3, r3, #2
 8004f7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <osThreadNew+0xa8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	2b5b      	cmp	r3, #91	; 0x5b
 8004f8a:	d90a      	bls.n	8004fa2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d006      	beq.n	8004fa2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <osThreadNew+0xa8>
        mem = 1;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	e010      	b.n	8004fc4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10c      	bne.n	8004fc4 <osThreadNew+0xca>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d108      	bne.n	8004fc4 <osThreadNew+0xca>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <osThreadNew+0xca>
          mem = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	e001      	b.n	8004fc4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d110      	bne.n	8004fec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fd2:	9202      	str	r2, [sp, #8]
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	6a3a      	ldr	r2, [r7, #32]
 8004fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f001 fa0d 	bl	8006400 <xTaskCreateStatic>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	613b      	str	r3, [r7, #16]
 8004fea:	e013      	b.n	8005014 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d110      	bne.n	8005014 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	f107 0310 	add.w	r3, r7, #16
 8004ffa:	9301      	str	r3, [sp, #4]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f001 fa58 	bl	80064ba <xTaskCreate>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <osThreadNew+0x11a>
            hTask = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005014:	693b      	ldr	r3, [r7, #16]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3728      	adds	r7, #40	; 0x28
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005026:	f3ef 8305 	mrs	r3, IPSR
 800502a:	60bb      	str	r3, [r7, #8]
  return(result);
 800502c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <osDelay+0x1c>
    stat = osErrorISR;
 8005032:	f06f 0305 	mvn.w	r3, #5
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	e007      	b.n	800504a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <osDelay+0x2c>
      vTaskDelay(ticks);
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f001 fb7d 	bl	8006744 <vTaskDelay>
    }
  }

  return (stat);
 800504a:	68fb      	ldr	r3, [r7, #12]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <osMutexAcquire>:
  }

  return ((osMutexId_t)hMutex);
}

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005072:	f3ef 8305 	mrs	r3, IPSR
 8005076:	60bb      	str	r3, [r7, #8]
  return(result);
 8005078:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800507e:	f06f 0305 	mvn.w	r3, #5
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e02c      	b.n	80050e0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800508c:	f06f 0303 	mvn.w	r3, #3
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e025      	b.n	80050e0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d011      	beq.n	80050be <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6938      	ldr	r0, [r7, #16]
 800509e:	f000 fbec 	bl	800587a <xQueueTakeMutexRecursive>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d01b      	beq.n	80050e0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80050ae:	f06f 0301 	mvn.w	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e014      	b.n	80050e0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80050b6:	f06f 0302 	mvn.w	r3, #2
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e010      	b.n	80050e0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	6938      	ldr	r0, [r7, #16]
 80050c2:	f000 fe8b 	bl	8005ddc <xQueueSemaphoreTake>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d009      	beq.n	80050e0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80050d2:	f06f 0301 	mvn.w	r3, #1
 80050d6:	617b      	str	r3, [r7, #20]
 80050d8:	e002      	b.n	80050e0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80050da:	f06f 0302 	mvn.w	r3, #2
 80050de:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80050e0:	697b      	ldr	r3, [r7, #20]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b086      	sub	sp, #24
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f023 0301 	bic.w	r3, r3, #1
 80050f8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005102:	2300      	movs	r3, #0
 8005104:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005106:	f3ef 8305 	mrs	r3, IPSR
 800510a:	60bb      	str	r3, [r7, #8]
  return(result);
 800510c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <osMutexRelease+0x30>
    stat = osErrorISR;
 8005112:	f06f 0305 	mvn.w	r3, #5
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e01f      	b.n	800515a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d103      	bne.n	8005128 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005120:	f06f 0303 	mvn.w	r3, #3
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	e018      	b.n	800515a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f000 fb6f 	bl	8005812 <xQueueGiveMutexRecursive>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d00f      	beq.n	800515a <osMutexRelease+0x70>
        stat = osErrorResource;
 800513a:	f06f 0302 	mvn.w	r3, #2
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e00b      	b.n	800515a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005142:	2300      	movs	r3, #0
 8005144:	2200      	movs	r2, #0
 8005146:	2100      	movs	r1, #0
 8005148:	6938      	ldr	r0, [r7, #16]
 800514a:	f000 fbcd 	bl	80058e8 <xQueueGenericSend>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d002      	beq.n	800515a <osMutexRelease+0x70>
        stat = osErrorResource;
 8005154:	f06f 0302 	mvn.w	r3, #2
 8005158:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800515a:	697b      	ldr	r3, [r7, #20]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005174:	f3ef 8305 	mrs	r3, IPSR
 8005178:	613b      	str	r3, [r7, #16]
  return(result);
 800517a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800517c:	2b00      	cmp	r3, #0
 800517e:	d15f      	bne.n	8005240 <osMessageQueueNew+0xdc>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d05c      	beq.n	8005240 <osMessageQueueNew+0xdc>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d059      	beq.n	8005240 <osMessageQueueNew+0xdc>
    mem = -1;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
 8005190:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d029      	beq.n	80051ec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d012      	beq.n	80051c6 <osMessageQueueNew+0x62>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b4f      	cmp	r3, #79	; 0x4f
 80051a6:	d90e      	bls.n	80051c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695a      	ldr	r2, [r3, #20]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68b9      	ldr	r1, [r7, #8]
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <osMessageQueueNew+0x62>
        mem = 1;
 80051c0:	2301      	movs	r3, #1
 80051c2:	61bb      	str	r3, [r7, #24]
 80051c4:	e014      	b.n	80051f0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d110      	bne.n	80051f0 <osMessageQueueNew+0x8c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10c      	bne.n	80051f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d108      	bne.n	80051f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <osMessageQueueNew+0x8c>
          mem = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e001      	b.n	80051f0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80051ec:	2300      	movs	r3, #0
 80051ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d10b      	bne.n	800520e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2100      	movs	r1, #0
 8005200:	9100      	str	r1, [sp, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 fa2f 	bl	8005668 <xQueueGenericCreateStatic>
 800520a:	61f8      	str	r0, [r7, #28]
 800520c:	e008      	b.n	8005220 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005214:	2200      	movs	r2, #0
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f000 fa9d 	bl	8005758 <xQueueGenericCreate>
 800521e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00c      	beq.n	8005240 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <osMessageQueueNew+0xd0>
        name = attr->name;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	e001      	b.n	8005238 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005238:	6979      	ldr	r1, [r7, #20]
 800523a:	69f8      	ldr	r0, [r7, #28]
 800523c:	f001 f882 	bl	8006344 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005240:	69fb      	ldr	r3, [r7, #28]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3720      	adds	r7, #32
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005260:	2300      	movs	r3, #0
 8005262:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005264:	f3ef 8305 	mrs	r3, IPSR
 8005268:	617b      	str	r3, [r7, #20]
  return(result);
 800526a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800526c:	2b00      	cmp	r3, #0
 800526e:	d028      	beq.n	80052c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <osMessageQueuePut+0x36>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <osMessageQueuePut+0x36>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005282:	f06f 0303 	mvn.w	r3, #3
 8005286:	61fb      	str	r3, [r7, #28]
 8005288:	e038      	b.n	80052fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800528e:	f107 0210 	add.w	r2, r7, #16
 8005292:	2300      	movs	r3, #0
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	69b8      	ldr	r0, [r7, #24]
 8005298:	f000 fc24 	bl	8005ae4 <xQueueGenericSendFromISR>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d003      	beq.n	80052aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80052a2:	f06f 0302 	mvn.w	r3, #2
 80052a6:	61fb      	str	r3, [r7, #28]
 80052a8:	e028      	b.n	80052fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d025      	beq.n	80052fc <osMessageQueuePut+0xb0>
 80052b0:	4b15      	ldr	r3, [pc, #84]	; (8005308 <osMessageQueuePut+0xbc>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	e01c      	b.n	80052fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <osMessageQueuePut+0x82>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80052ce:	f06f 0303 	mvn.w	r3, #3
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e012      	b.n	80052fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80052d6:	2300      	movs	r3, #0
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	69b8      	ldr	r0, [r7, #24]
 80052de:	f000 fb03 	bl	80058e8 <xQueueGenericSend>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d009      	beq.n	80052fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80052ee:	f06f 0301 	mvn.w	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	e002      	b.n	80052fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80052f6:	f06f 0302 	mvn.w	r3, #2
 80052fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005322:	f3ef 8305 	mrs	r3, IPSR
 8005326:	617b      	str	r3, [r7, #20]
  return(result);
 8005328:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800532a:	2b00      	cmp	r3, #0
 800532c:	d028      	beq.n	8005380 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <osMessageQueueGet+0x34>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <osMessageQueueGet+0x34>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005340:	f06f 0303 	mvn.w	r3, #3
 8005344:	61fb      	str	r3, [r7, #28]
 8005346:	e037      	b.n	80053b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800534c:	f107 0310 	add.w	r3, r7, #16
 8005350:	461a      	mov	r2, r3
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	69b8      	ldr	r0, [r7, #24]
 8005356:	f000 fe4d 	bl	8005ff4 <xQueueReceiveFromISR>
 800535a:	4603      	mov	r3, r0
 800535c:	2b01      	cmp	r3, #1
 800535e:	d003      	beq.n	8005368 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005360:	f06f 0302 	mvn.w	r3, #2
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e027      	b.n	80053b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d024      	beq.n	80053b8 <osMessageQueueGet+0xac>
 800536e:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <osMessageQueueGet+0xb8>)
 8005370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	e01b      	b.n	80053b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d002      	beq.n	800538c <osMessageQueueGet+0x80>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800538c:	f06f 0303 	mvn.w	r3, #3
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	e011      	b.n	80053b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	69b8      	ldr	r0, [r7, #24]
 800539a:	f000 fc3f 	bl	8005c1c <xQueueReceive>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d009      	beq.n	80053b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80053aa:	f06f 0301 	mvn.w	r3, #1
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	e002      	b.n	80053b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80053b2:	f06f 0302 	mvn.w	r3, #2
 80053b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80053b8:	69fb      	ldr	r3, [r7, #28]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3720      	adds	r7, #32
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a07      	ldr	r2, [pc, #28]	; (80053f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80053d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	4a06      	ldr	r2, [pc, #24]	; (80053f8 <vApplicationGetIdleTaskMemory+0x30>)
 80053de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2280      	movs	r2, #128	; 0x80
 80053e4:	601a      	str	r2, [r3, #0]
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000248 	.word	0x20000248
 80053f8:	200002a4 	.word	0x200002a4

080053fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a07      	ldr	r2, [pc, #28]	; (8005428 <vApplicationGetTimerTaskMemory+0x2c>)
 800540c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4a06      	ldr	r2, [pc, #24]	; (800542c <vApplicationGetTimerTaskMemory+0x30>)
 8005412:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800541a:	601a      	str	r2, [r3, #0]
}
 800541c:	bf00      	nop
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	200004a4 	.word	0x200004a4
 800542c:	20000500 	.word	0x20000500

08005430 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f103 0208 	add.w	r2, r3, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f103 0208 	add.w	r2, r3, #8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f103 0208 	add.w	r2, r3, #8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800547e:	bf00      	nop
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
 8005492:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	601a      	str	r2, [r3, #0]
}
 80054c6:	bf00      	nop
 80054c8:	3714      	adds	r7, #20
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e00c      	b.n	800550c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3308      	adds	r3, #8
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	e002      	b.n	8005500 <vListInsert+0x2e>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	429a      	cmp	r2, r3
 800550a:	d2f6      	bcs.n	80054fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	601a      	str	r2, [r3, #0]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	6892      	ldr	r2, [r2, #8]
 800555a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6852      	ldr	r2, [r2, #4]
 8005564:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d103      	bne.n	8005578 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	1e5a      	subs	r2, r3, #1
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055c2:	f002 fbb7 	bl	8007d34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	68f9      	ldr	r1, [r7, #12]
 80055d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055d2:	fb01 f303 	mul.w	r3, r1, r3
 80055d6:	441a      	add	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	3b01      	subs	r3, #1
 80055f4:	68f9      	ldr	r1, [r7, #12]
 80055f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055f8:	fb01 f303 	mul.w	r3, r1, r3
 80055fc:	441a      	add	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	22ff      	movs	r2, #255	; 0xff
 8005606:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	22ff      	movs	r2, #255	; 0xff
 800560e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d114      	bne.n	8005642 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01a      	beq.n	8005656 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	3310      	adds	r3, #16
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fb5d 	bl	8006ce4 <xTaskRemoveFromEventList>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d012      	beq.n	8005656 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005630:	4b0c      	ldr	r3, [pc, #48]	; (8005664 <xQueueGenericReset+0xcc>)
 8005632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	e009      	b.n	8005656 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3310      	adds	r3, #16
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fef2 	bl	8005430 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3324      	adds	r3, #36	; 0x24
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff feed 	bl	8005430 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005656:	f002 fb9d 	bl	8007d94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800565a:	2301      	movs	r3, #1
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	; 0x38
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <xQueueGenericCreateStatic+0x52>
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <xQueueGenericCreateStatic+0x56>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <xQueueGenericCreateStatic+0x58>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	623b      	str	r3, [r7, #32]
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <xQueueGenericCreateStatic+0x7e>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xQueueGenericCreateStatic+0x82>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xQueueGenericCreateStatic+0x84>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61fb      	str	r3, [r7, #28]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005706:	2350      	movs	r3, #80	; 0x50
 8005708:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b50      	cmp	r3, #80	; 0x50
 800570e:	d00a      	beq.n	8005726 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	61bb      	str	r3, [r7, #24]
}
 8005722:	bf00      	nop
 8005724:	e7fe      	b.n	8005724 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005726:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800573a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	4613      	mov	r3, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f83f 	bl	80057cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005750:	4618      	mov	r0, r3
 8005752:	3730      	adds	r7, #48	; 0x30
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af02      	add	r7, sp, #8
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	4613      	mov	r3, r2
 8005764:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10a      	bne.n	8005782 <xQueueGenericCreate+0x2a>
	__asm volatile
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	613b      	str	r3, [r7, #16]
}
 800577e:	bf00      	nop
 8005780:	e7fe      	b.n	8005780 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	3350      	adds	r3, #80	; 0x50
 8005790:	4618      	mov	r0, r3
 8005792:	f002 fbf1 	bl	8007f78 <pvPortMalloc>
 8005796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3350      	adds	r3, #80	; 0x50
 80057a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057b0:	79fa      	ldrb	r2, [r7, #7]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	4613      	mov	r3, r2
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f000 f805 	bl	80057cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057c2:	69bb      	ldr	r3, [r7, #24]
	}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	601a      	str	r2, [r3, #0]
 80057e6:	e002      	b.n	80057ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057fa:	2101      	movs	r1, #1
 80057fc:	69b8      	ldr	r0, [r7, #24]
 80057fe:	f7ff fecb 	bl	8005598 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	78fa      	ldrb	r2, [r7, #3]
 8005806:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005812:	b590      	push	{r4, r7, lr}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10a      	bne.n	800583a <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	60fb      	str	r3, [r7, #12]
}
 8005836:	bf00      	nop
 8005838:	e7fe      	b.n	8005838 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	689c      	ldr	r4, [r3, #8]
 800583e:	f001 fc0f 	bl	8007060 <xTaskGetCurrentTaskHandle>
 8005842:	4603      	mov	r3, r0
 8005844:	429c      	cmp	r4, r3
 8005846:	d111      	bne.n	800586c <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	1e5a      	subs	r2, r3, #1
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d105      	bne.n	8005866 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800585a:	2300      	movs	r3, #0
 800585c:	2200      	movs	r2, #0
 800585e:	2100      	movs	r1, #0
 8005860:	6938      	ldr	r0, [r7, #16]
 8005862:	f000 f841 	bl	80058e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005866:	2301      	movs	r3, #1
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e001      	b.n	8005870 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005870:	697b      	ldr	r3, [r7, #20]
	}
 8005872:	4618      	mov	r0, r3
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	bd90      	pop	{r4, r7, pc}

0800587a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800587a:	b590      	push	{r4, r7, lr}
 800587c:	b087      	sub	sp, #28
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10a      	bne.n	80058a4 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	60fb      	str	r3, [r7, #12]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	689c      	ldr	r4, [r3, #8]
 80058a8:	f001 fbda 	bl	8007060 <xTaskGetCurrentTaskHandle>
 80058ac:	4603      	mov	r3, r0
 80058ae:	429c      	cmp	r4, r3
 80058b0:	d107      	bne.n	80058c2 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80058bc:	2301      	movs	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	e00c      	b.n	80058dc <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6938      	ldr	r0, [r7, #16]
 80058c6:	f000 fa89 	bl	8005ddc <xQueueSemaphoreTake>
 80058ca:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d004      	beq.n	80058dc <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80058dc:	697b      	ldr	r3, [r7, #20]
	}
 80058de:	4618      	mov	r0, r3
 80058e0:	371c      	adds	r7, #28
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
	...

080058e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08e      	sub	sp, #56	; 0x38
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058f6:	2300      	movs	r3, #0
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <xQueueGenericSend+0x32>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <xQueueGenericSend+0x40>
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <xQueueGenericSend+0x44>
 8005928:	2301      	movs	r3, #1
 800592a:	e000      	b.n	800592e <xQueueGenericSend+0x46>
 800592c:	2300      	movs	r3, #0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <xQueueGenericSend+0x60>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d103      	bne.n	8005956 <xQueueGenericSend+0x6e>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d101      	bne.n	800595a <xQueueGenericSend+0x72>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <xQueueGenericSend+0x74>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xQueueGenericSend+0x8e>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	623b      	str	r3, [r7, #32]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005976:	f001 fb83 	bl	8007080 <xTaskGetSchedulerState>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <xQueueGenericSend+0x9e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <xQueueGenericSend+0xa2>
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <xQueueGenericSend+0xa4>
 800598a:	2300      	movs	r3, #0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	61fb      	str	r3, [r7, #28]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059a6:	f002 f9c5 	bl	8007d34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d302      	bcc.n	80059bc <xQueueGenericSend+0xd4>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d129      	bne.n	8005a10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f000 fbaf 	bl	8006124 <prvCopyDataToQueue>
 80059c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d2:	3324      	adds	r3, #36	; 0x24
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 f985 	bl	8006ce4 <xTaskRemoveFromEventList>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d013      	beq.n	8005a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059e0:	4b3f      	ldr	r3, [pc, #252]	; (8005ae0 <xQueueGenericSend+0x1f8>)
 80059e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059e6:	601a      	str	r2, [r3, #0]
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	e00a      	b.n	8005a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059f8:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <xQueueGenericSend+0x1f8>)
 80059fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a08:	f002 f9c4 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e063      	b.n	8005ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d103      	bne.n	8005a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a16:	f002 f9bd 	bl	8007d94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e05c      	b.n	8005ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d106      	bne.n	8005a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a24:	f107 0314 	add.w	r3, r7, #20
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f9bf 	bl	8006dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a32:	f002 f9af 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a36:	f000 ff1f 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a3a:	f002 f97b 	bl	8007d34 <vPortEnterCritical>
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a44:	b25b      	sxtb	r3, r3
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d103      	bne.n	8005a54 <xQueueGenericSend+0x16c>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d103      	bne.n	8005a6a <xQueueGenericSend+0x182>
 8005a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a6a:	f002 f993 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a6e:	1d3a      	adds	r2, r7, #4
 8005a70:	f107 0314 	add.w	r3, r7, #20
 8005a74:	4611      	mov	r1, r2
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 f9ae 	bl	8006dd8 <xTaskCheckForTimeOut>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d124      	bne.n	8005acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a84:	f000 fc46 	bl	8006314 <prvIsQueueFull>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d018      	beq.n	8005ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	3310      	adds	r3, #16
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	4611      	mov	r1, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f8d4 	bl	8006c44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a9e:	f000 fbd1 	bl	8006244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005aa2:	f000 fef7 	bl	8006894 <xTaskResumeAll>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f47f af7c 	bne.w	80059a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005aae:	4b0c      	ldr	r3, [pc, #48]	; (8005ae0 <xQueueGenericSend+0x1f8>)
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	e772      	b.n	80059a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ac2:	f000 fbbf 	bl	8006244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ac6:	f000 fee5 	bl	8006894 <xTaskResumeAll>
 8005aca:	e76c      	b.n	80059a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ace:	f000 fbb9 	bl	8006244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ad2:	f000 fedf 	bl	8006894 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3738      	adds	r7, #56	; 0x38
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b090      	sub	sp, #64	; 0x40
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d103      	bne.n	8005b20 <xQueueGenericSendFromISR+0x3c>
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <xQueueGenericSendFromISR+0x40>
 8005b20:	2301      	movs	r3, #1
 8005b22:	e000      	b.n	8005b26 <xQueueGenericSendFromISR+0x42>
 8005b24:	2300      	movs	r3, #0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d103      	bne.n	8005b4e <xQueueGenericSendFromISR+0x6a>
 8005b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d101      	bne.n	8005b52 <xQueueGenericSendFromISR+0x6e>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <xQueueGenericSendFromISR+0x70>
 8005b52:	2300      	movs	r3, #0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	623b      	str	r3, [r7, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b6e:	f002 f9c3 	bl	8007ef8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b72:	f3ef 8211 	mrs	r2, BASEPRI
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	61fa      	str	r2, [r7, #28]
 8005b88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d302      	bcc.n	8005ba0 <xQueueGenericSendFromISR+0xbc>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d12f      	bne.n	8005c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005bb6:	f000 fab5 	bl	8006124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d112      	bne.n	8005bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d016      	beq.n	8005bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	3324      	adds	r3, #36	; 0x24
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f887 	bl	8006ce4 <xTaskRemoveFromEventList>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00e      	beq.n	8005bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
 8005be8:	e007      	b.n	8005bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005bee:	3301      	adds	r3, #1
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	b25a      	sxtb	r2, r3
 8005bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005bfe:	e001      	b.n	8005c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3740      	adds	r7, #64	; 0x40
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08c      	sub	sp, #48	; 0x30
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <xQueueReceive+0x30>
	__asm volatile
 8005c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3a:	f383 8811 	msr	BASEPRI, r3
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f3bf 8f4f 	dsb	sy
 8005c46:	623b      	str	r3, [r7, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	e7fe      	b.n	8005c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <xQueueReceive+0x3e>
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <xQueueReceive+0x42>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <xQueueReceive+0x44>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10a      	bne.n	8005c7a <xQueueReceive+0x5e>
	__asm volatile
 8005c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c68:	f383 8811 	msr	BASEPRI, r3
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	f3bf 8f4f 	dsb	sy
 8005c74:	61fb      	str	r3, [r7, #28]
}
 8005c76:	bf00      	nop
 8005c78:	e7fe      	b.n	8005c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c7a:	f001 fa01 	bl	8007080 <xTaskGetSchedulerState>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d102      	bne.n	8005c8a <xQueueReceive+0x6e>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <xQueueReceive+0x72>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueReceive+0x74>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xQueueReceive+0x8e>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	61bb      	str	r3, [r7, #24]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005caa:	f002 f843 	bl	8007d34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d01f      	beq.n	8005cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cba:	68b9      	ldr	r1, [r7, #8]
 8005cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005cbe:	f000 fa9b 	bl	80061f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00f      	beq.n	8005cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd4:	3310      	adds	r3, #16
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 f804 	bl	8006ce4 <xTaskRemoveFromEventList>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ce2:	4b3d      	ldr	r3, [pc, #244]	; (8005dd8 <xQueueReceive+0x1bc>)
 8005ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cf2:	f002 f84f 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e069      	b.n	8005dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d103      	bne.n	8005d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d00:	f002 f848 	bl	8007d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e062      	b.n	8005dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d0e:	f107 0310 	add.w	r3, r7, #16
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 f84a 	bl	8006dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d1c:	f002 f83a 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d20:	f000 fdaa 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d24:	f002 f806 	bl	8007d34 <vPortEnterCritical>
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2e:	b25b      	sxtb	r3, r3
 8005d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d34:	d103      	bne.n	8005d3e <xQueueReceive+0x122>
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d44:	b25b      	sxtb	r3, r3
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d103      	bne.n	8005d54 <xQueueReceive+0x138>
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d54:	f002 f81e 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d58:	1d3a      	adds	r2, r7, #4
 8005d5a:	f107 0310 	add.w	r3, r7, #16
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f001 f839 	bl	8006dd8 <xTaskCheckForTimeOut>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d123      	bne.n	8005db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6e:	f000 fabb 	bl	80062e8 <prvIsQueueEmpty>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d017      	beq.n	8005da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7a:	3324      	adds	r3, #36	; 0x24
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 ff5f 	bl	8006c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d88:	f000 fa5c 	bl	8006244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d8c:	f000 fd82 	bl	8006894 <xTaskResumeAll>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d189      	bne.n	8005caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <xQueueReceive+0x1bc>)
 8005d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9c:	601a      	str	r2, [r3, #0]
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	f3bf 8f6f 	isb	sy
 8005da6:	e780      	b.n	8005caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005daa:	f000 fa4b 	bl	8006244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dae:	f000 fd71 	bl	8006894 <xTaskResumeAll>
 8005db2:	e77a      	b.n	8005caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005db6:	f000 fa45 	bl	8006244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dba:	f000 fd6b 	bl	8006894 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dc0:	f000 fa92 	bl	80062e8 <prvIsQueueEmpty>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f43f af6f 	beq.w	8005caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3730      	adds	r7, #48	; 0x30
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	; 0x38
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005dee:	2300      	movs	r3, #0
 8005df0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	623b      	str	r3, [r7, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	61fb      	str	r3, [r7, #28]
}
 8005e28:	bf00      	nop
 8005e2a:	e7fe      	b.n	8005e2a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2c:	f001 f928 	bl	8007080 <xTaskGetSchedulerState>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <xQueueSemaphoreTake+0x60>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <xQueueSemaphoreTake+0x64>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <xQueueSemaphoreTake+0x66>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	61bb      	str	r3, [r7, #24]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e5c:	f001 ff6a 	bl	8007d34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d024      	beq.n	8005eb6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6e:	1e5a      	subs	r2, r3, #1
 8005e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e7c:	f001 fa76 	bl	800736c <pvTaskIncrementMutexHeldCount>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00f      	beq.n	8005eae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	3310      	adds	r3, #16
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 ff26 	bl	8006ce4 <xTaskRemoveFromEventList>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e9e:	4b54      	ldr	r3, [pc, #336]	; (8005ff0 <xQueueSemaphoreTake+0x214>)
 8005ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005eae:	f001 ff71 	bl	8007d94 <vPortExitCritical>
				return pdPASS;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e097      	b.n	8005fe6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d111      	bne.n	8005ee0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	617b      	str	r3, [r7, #20]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ed8:	f001 ff5c 	bl	8007d94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e082      	b.n	8005fe6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ee6:	f107 030c 	add.w	r3, r7, #12
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 ff5e 	bl	8006dac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ef4:	f001 ff4e 	bl	8007d94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ef8:	f000 fcbe 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005efc:	f001 ff1a 	bl	8007d34 <vPortEnterCritical>
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f06:	b25b      	sxtb	r3, r3
 8005f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0c:	d103      	bne.n	8005f16 <xQueueSemaphoreTake+0x13a>
 8005f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f1c:	b25b      	sxtb	r3, r3
 8005f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f22:	d103      	bne.n	8005f2c <xQueueSemaphoreTake+0x150>
 8005f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f2c:	f001 ff32 	bl	8007d94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f30:	463a      	mov	r2, r7
 8005f32:	f107 030c 	add.w	r3, r7, #12
 8005f36:	4611      	mov	r1, r2
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 ff4d 	bl	8006dd8 <xTaskCheckForTimeOut>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d132      	bne.n	8005faa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f46:	f000 f9cf 	bl	80062e8 <prvIsQueueEmpty>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d026      	beq.n	8005f9e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d109      	bne.n	8005f6c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005f58:	f001 feec 	bl	8007d34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 f8ab 	bl	80070bc <xTaskPriorityInherit>
 8005f66:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005f68:	f001 ff14 	bl	8007d94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6e:	3324      	adds	r3, #36	; 0x24
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 fe65 	bl	8006c44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f7c:	f000 f962 	bl	8006244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f80:	f000 fc88 	bl	8006894 <xTaskResumeAll>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f47f af68 	bne.w	8005e5c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005f8c:	4b18      	ldr	r3, [pc, #96]	; (8005ff0 <xQueueSemaphoreTake+0x214>)
 8005f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	f3bf 8f6f 	isb	sy
 8005f9c:	e75e      	b.n	8005e5c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fa0:	f000 f950 	bl	8006244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fa4:	f000 fc76 	bl	8006894 <xTaskResumeAll>
 8005fa8:	e758      	b.n	8005e5c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005faa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fac:	f000 f94a 	bl	8006244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fb0:	f000 fc70 	bl	8006894 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fb6:	f000 f997 	bl	80062e8 <prvIsQueueEmpty>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f43f af4d 	beq.w	8005e5c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00d      	beq.n	8005fe4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005fc8:	f001 feb4 	bl	8007d34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005fce:	f000 f891 	bl	80060f4 <prvGetDisinheritPriorityAfterTimeout>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f944 	bl	8007268 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fe0:	f001 fed8 	bl	8007d94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fe4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3738      	adds	r7, #56	; 0x38
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08e      	sub	sp, #56	; 0x38
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	623b      	str	r3, [r7, #32]
}
 800601c:	bf00      	nop
 800601e:	e7fe      	b.n	800601e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <xQueueReceiveFromISR+0x3a>
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <xQueueReceiveFromISR+0x3e>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <xQueueReceiveFromISR+0x40>
 8006032:	2300      	movs	r3, #0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	61fb      	str	r3, [r7, #28]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800604e:	f001 ff53 	bl	8007ef8 <vPortValidateInterruptPriority>
	__asm volatile
 8006052:	f3ef 8211 	mrs	r2, BASEPRI
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	61ba      	str	r2, [r7, #24]
 8006068:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800606a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	2b00      	cmp	r3, #0
 8006078:	d02f      	beq.n	80060da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006088:	f000 f8b6 	bl	80061f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800608c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608e:	1e5a      	subs	r2, r3, #1
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006094:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609c:	d112      	bne.n	80060c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d016      	beq.n	80060d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	3310      	adds	r3, #16
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fe1a 	bl	8006ce4 <xTaskRemoveFromEventList>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00e      	beq.n	80060d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	e007      	b.n	80060d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060c8:	3301      	adds	r3, #1
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	b25a      	sxtb	r2, r3
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060d4:	2301      	movs	r3, #1
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
 80060d8:	e001      	b.n	80060de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80060da:	2300      	movs	r3, #0
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
 80060de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f383 8811 	msr	BASEPRI, r3
}
 80060e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3738      	adds	r7, #56	; 0x38
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	d006      	beq.n	8006112 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800610e:	60fb      	str	r3, [r7, #12]
 8006110:	e001      	b.n	8006116 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006116:	68fb      	ldr	r3, [r7, #12]
	}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10d      	bne.n	800615e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d14d      	bne.n	80061e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	4618      	mov	r0, r3
 8006150:	f001 f81c 	bl	800718c <xTaskPriorityDisinherit>
 8006154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	e043      	b.n	80061e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d119      	bne.n	8006198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6858      	ldr	r0, [r3, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616c:	461a      	mov	r2, r3
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	f002 f916 	bl	80083a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	441a      	add	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d32b      	bcc.n	80061e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	e026      	b.n	80061e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	68d8      	ldr	r0, [r3, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	461a      	mov	r2, r3
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	f002 f8fc 	bl	80083a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68da      	ldr	r2, [r3, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	425b      	negs	r3, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d207      	bcs.n	80061d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	425b      	negs	r3, r3
 80061ce:	441a      	add	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d105      	bne.n	80061e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	1c5a      	adds	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061ee:	697b      	ldr	r3, [r7, #20]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3718      	adds	r7, #24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d018      	beq.n	800623c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006212:	441a      	add	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	d303      	bcc.n	800622c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68d9      	ldr	r1, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	461a      	mov	r2, r3
 8006236:	6838      	ldr	r0, [r7, #0]
 8006238:	f002 f8b2 	bl	80083a0 <memcpy>
	}
}
 800623c:	bf00      	nop
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800624c:	f001 fd72 	bl	8007d34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006258:	e011      	b.n	800627e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	2b00      	cmp	r3, #0
 8006260:	d012      	beq.n	8006288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3324      	adds	r3, #36	; 0x24
 8006266:	4618      	mov	r0, r3
 8006268:	f000 fd3c 	bl	8006ce4 <xTaskRemoveFromEventList>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006272:	f000 fe13 	bl	8006e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	3b01      	subs	r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800627e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006282:	2b00      	cmp	r3, #0
 8006284:	dce9      	bgt.n	800625a <prvUnlockQueue+0x16>
 8006286:	e000      	b.n	800628a <prvUnlockQueue+0x46>
					break;
 8006288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	22ff      	movs	r2, #255	; 0xff
 800628e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006292:	f001 fd7f 	bl	8007d94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006296:	f001 fd4d 	bl	8007d34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062a2:	e011      	b.n	80062c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3310      	adds	r3, #16
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fd17 	bl	8006ce4 <xTaskRemoveFromEventList>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062bc:	f000 fdee 	bl	8006e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	dce9      	bgt.n	80062a4 <prvUnlockQueue+0x60>
 80062d0:	e000      	b.n	80062d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	22ff      	movs	r2, #255	; 0xff
 80062d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062dc:	f001 fd5a 	bl	8007d94 <vPortExitCritical>
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062f0:	f001 fd20 	bl	8007d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d102      	bne.n	8006302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	e001      	b.n	8006306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006306:	f001 fd45 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800631c:	f001 fd0a 	bl	8007d34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006328:	429a      	cmp	r2, r3
 800632a:	d102      	bne.n	8006332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800632c:	2301      	movs	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e001      	b.n	8006336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006336:	f001 fd2d 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 800633a:	68fb      	ldr	r3, [r7, #12]
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	e014      	b.n	800637e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006354:	4a0f      	ldr	r2, [pc, #60]	; (8006394 <vQueueAddToRegistry+0x50>)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10b      	bne.n	8006378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006360:	490c      	ldr	r1, [pc, #48]	; (8006394 <vQueueAddToRegistry+0x50>)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800636a:	4a0a      	ldr	r2, [pc, #40]	; (8006394 <vQueueAddToRegistry+0x50>)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006376:	e006      	b.n	8006386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b07      	cmp	r3, #7
 8006382:	d9e7      	bls.n	8006354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000900 	.word	0x20000900

08006398 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063a8:	f001 fcc4 	bl	8007d34 <vPortEnterCritical>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063b2:	b25b      	sxtb	r3, r3
 80063b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b8:	d103      	bne.n	80063c2 <vQueueWaitForMessageRestricted+0x2a>
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063c8:	b25b      	sxtb	r3, r3
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d103      	bne.n	80063d8 <vQueueWaitForMessageRestricted+0x40>
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d8:	f001 fcdc 	bl	8007d94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d106      	bne.n	80063f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	3324      	adds	r3, #36	; 0x24
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fc4d 	bl	8006c8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063f2:	6978      	ldr	r0, [r7, #20]
 80063f4:	f7ff ff26 	bl	8006244 <prvUnlockQueue>
	}
 80063f8:	bf00      	nop
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08e      	sub	sp, #56	; 0x38
 8006404:	af04      	add	r7, sp, #16
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	623b      	str	r3, [r7, #32]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <xTaskCreateStatic+0x46>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	61fb      	str	r3, [r7, #28]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006446:	235c      	movs	r3, #92	; 0x5c
 8006448:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b5c      	cmp	r3, #92	; 0x5c
 800644e:	d00a      	beq.n	8006466 <xTaskCreateStatic+0x66>
	__asm volatile
 8006450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006454:	f383 8811 	msr	BASEPRI, r3
 8006458:	f3bf 8f6f 	isb	sy
 800645c:	f3bf 8f4f 	dsb	sy
 8006460:	61bb      	str	r3, [r7, #24]
}
 8006462:	bf00      	nop
 8006464:	e7fe      	b.n	8006464 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006466:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646a:	2b00      	cmp	r3, #0
 800646c:	d01e      	beq.n	80064ac <xTaskCreateStatic+0xac>
 800646e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01b      	beq.n	80064ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800647c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	2202      	movs	r2, #2
 8006482:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006486:	2300      	movs	r3, #0
 8006488:	9303      	str	r3, [sp, #12]
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	9302      	str	r3, [sp, #8]
 800648e:	f107 0314 	add.w	r3, r7, #20
 8006492:	9301      	str	r3, [sp, #4]
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f850 	bl	8006544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064a6:	f000 f8dd 	bl	8006664 <prvAddNewTaskToReadyList>
 80064aa:	e001      	b.n	80064b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064b0:	697b      	ldr	r3, [r7, #20]
	}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3728      	adds	r7, #40	; 0x28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b08c      	sub	sp, #48	; 0x30
 80064be:	af04      	add	r7, sp, #16
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	603b      	str	r3, [r7, #0]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 fd52 	bl	8007f78 <pvPortMalloc>
 80064d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064dc:	205c      	movs	r0, #92	; 0x5c
 80064de:	f001 fd4b 	bl	8007f78 <pvPortMalloc>
 80064e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
 80064f0:	e005      	b.n	80064fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064f2:	6978      	ldr	r0, [r7, #20]
 80064f4:	f001 fe0c 	bl	8008110 <vPortFree>
 80064f8:	e001      	b.n	80064fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d017      	beq.n	8006534 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800650c:	88fa      	ldrh	r2, [r7, #6]
 800650e:	2300      	movs	r3, #0
 8006510:	9303      	str	r3, [sp, #12]
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	9302      	str	r3, [sp, #8]
 8006516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f80e 	bl	8006544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006528:	69f8      	ldr	r0, [r7, #28]
 800652a:	f000 f89b 	bl	8006664 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800652e:	2301      	movs	r3, #1
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e002      	b.n	800653a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800653a:	69bb      	ldr	r3, [r7, #24]
	}
 800653c:	4618      	mov	r0, r3
 800653e:	3720      	adds	r7, #32
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b088      	sub	sp, #32
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	461a      	mov	r2, r3
 800655c:	21a5      	movs	r1, #165	; 0xa5
 800655e:	f001 ff2d 	bl	80083bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800656c:	3b01      	subs	r3, #1
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	f023 0307 	bic.w	r3, r3, #7
 800657a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00a      	beq.n	800659c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	617b      	str	r3, [r7, #20]
}
 8006598:	bf00      	nop
 800659a:	e7fe      	b.n	800659a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01f      	beq.n	80065e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065a2:	2300      	movs	r3, #0
 80065a4:	61fb      	str	r3, [r7, #28]
 80065a6:	e012      	b.n	80065ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	7819      	ldrb	r1, [r3, #0]
 80065b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	4413      	add	r3, r2
 80065b6:	3334      	adds	r3, #52	; 0x34
 80065b8:	460a      	mov	r2, r1
 80065ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	4413      	add	r3, r2
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d006      	beq.n	80065d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	3301      	adds	r3, #1
 80065cc:	61fb      	str	r3, [r7, #28]
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	2b0f      	cmp	r3, #15
 80065d2:	d9e9      	bls.n	80065a8 <prvInitialiseNewTask+0x64>
 80065d4:	e000      	b.n	80065d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80065d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065e0:	e003      	b.n	80065ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ec:	2b37      	cmp	r3, #55	; 0x37
 80065ee:	d901      	bls.n	80065f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065f0:	2337      	movs	r3, #55	; 0x37
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	2200      	movs	r2, #0
 8006604:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006608:	3304      	adds	r3, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe ff30 	bl	8005470 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006612:	3318      	adds	r3, #24
 8006614:	4618      	mov	r0, r3
 8006616:	f7fe ff2b 	bl	8005470 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800662a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800662e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006632:	2200      	movs	r2, #0
 8006634:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	68f9      	ldr	r1, [r7, #12]
 8006642:	69b8      	ldr	r0, [r7, #24]
 8006644:	f001 fa48 	bl	8007ad8 <pxPortInitialiseStack>
 8006648:	4602      	mov	r2, r0
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006658:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800665a:	bf00      	nop
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800666c:	f001 fb62 	bl	8007d34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006670:	4b2d      	ldr	r3, [pc, #180]	; (8006728 <prvAddNewTaskToReadyList+0xc4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a2c      	ldr	r2, [pc, #176]	; (8006728 <prvAddNewTaskToReadyList+0xc4>)
 8006678:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800667a:	4b2c      	ldr	r3, [pc, #176]	; (800672c <prvAddNewTaskToReadyList+0xc8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d109      	bne.n	8006696 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006682:	4a2a      	ldr	r2, [pc, #168]	; (800672c <prvAddNewTaskToReadyList+0xc8>)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006688:	4b27      	ldr	r3, [pc, #156]	; (8006728 <prvAddNewTaskToReadyList+0xc4>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2b01      	cmp	r3, #1
 800668e:	d110      	bne.n	80066b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006690:	f000 fc28 	bl	8006ee4 <prvInitialiseTaskLists>
 8006694:	e00d      	b.n	80066b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006696:	4b26      	ldr	r3, [pc, #152]	; (8006730 <prvAddNewTaskToReadyList+0xcc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d109      	bne.n	80066b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800669e:	4b23      	ldr	r3, [pc, #140]	; (800672c <prvAddNewTaskToReadyList+0xc8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d802      	bhi.n	80066b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066ac:	4a1f      	ldr	r2, [pc, #124]	; (800672c <prvAddNewTaskToReadyList+0xc8>)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066b2:	4b20      	ldr	r3, [pc, #128]	; (8006734 <prvAddNewTaskToReadyList+0xd0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3301      	adds	r3, #1
 80066b8:	4a1e      	ldr	r2, [pc, #120]	; (8006734 <prvAddNewTaskToReadyList+0xd0>)
 80066ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066bc:	4b1d      	ldr	r3, [pc, #116]	; (8006734 <prvAddNewTaskToReadyList+0xd0>)
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c8:	4b1b      	ldr	r3, [pc, #108]	; (8006738 <prvAddNewTaskToReadyList+0xd4>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d903      	bls.n	80066d8 <prvAddNewTaskToReadyList+0x74>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	4a18      	ldr	r2, [pc, #96]	; (8006738 <prvAddNewTaskToReadyList+0xd4>)
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a15      	ldr	r2, [pc, #84]	; (800673c <prvAddNewTaskToReadyList+0xd8>)
 80066e6:	441a      	add	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f7fe fecb 	bl	800548a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80066f4:	f001 fb4e 	bl	8007d94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <prvAddNewTaskToReadyList+0xcc>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00e      	beq.n	800671e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006700:	4b0a      	ldr	r3, [pc, #40]	; (800672c <prvAddNewTaskToReadyList+0xc8>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670a:	429a      	cmp	r2, r3
 800670c:	d207      	bcs.n	800671e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <prvAddNewTaskToReadyList+0xdc>)
 8006710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800671e:	bf00      	nop
 8006720:	3708      	adds	r7, #8
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000e14 	.word	0x20000e14
 800672c:	20000940 	.word	0x20000940
 8006730:	20000e20 	.word	0x20000e20
 8006734:	20000e30 	.word	0x20000e30
 8006738:	20000e1c 	.word	0x20000e1c
 800673c:	20000944 	.word	0x20000944
 8006740:	e000ed04 	.word	0xe000ed04

08006744 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d017      	beq.n	8006786 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006756:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <vTaskDelay+0x60>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00a      	beq.n	8006774 <vTaskDelay+0x30>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	60bb      	str	r3, [r7, #8]
}
 8006770:	bf00      	nop
 8006772:	e7fe      	b.n	8006772 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006774:	f000 f880 	bl	8006878 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006778:	2100      	movs	r1, #0
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fe0a 	bl	8007394 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006780:	f000 f888 	bl	8006894 <xTaskResumeAll>
 8006784:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800678c:	4b06      	ldr	r3, [pc, #24]	; (80067a8 <vTaskDelay+0x64>)
 800678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	20000e3c 	.word	0x20000e3c
 80067a8:	e000ed04 	.word	0xe000ed04

080067ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08a      	sub	sp, #40	; 0x28
 80067b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067ba:	463a      	mov	r2, r7
 80067bc:	1d39      	adds	r1, r7, #4
 80067be:	f107 0308 	add.w	r3, r7, #8
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fe00 	bl	80053c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	2300      	movs	r3, #0
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	2300      	movs	r3, #0
 80067d8:	460a      	mov	r2, r1
 80067da:	4921      	ldr	r1, [pc, #132]	; (8006860 <vTaskStartScheduler+0xb4>)
 80067dc:	4821      	ldr	r0, [pc, #132]	; (8006864 <vTaskStartScheduler+0xb8>)
 80067de:	f7ff fe0f 	bl	8006400 <xTaskCreateStatic>
 80067e2:	4603      	mov	r3, r0
 80067e4:	4a20      	ldr	r2, [pc, #128]	; (8006868 <vTaskStartScheduler+0xbc>)
 80067e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067e8:	4b1f      	ldr	r3, [pc, #124]	; (8006868 <vTaskStartScheduler+0xbc>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067f0:	2301      	movs	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	e001      	b.n	80067fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067f6:	2300      	movs	r3, #0
 80067f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d102      	bne.n	8006806 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006800:	f000 fe1c 	bl	800743c <xTimerCreateTimerTask>
 8006804:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d116      	bne.n	800683a <vTaskStartScheduler+0x8e>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	613b      	str	r3, [r7, #16]
}
 800681e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006820:	4b12      	ldr	r3, [pc, #72]	; (800686c <vTaskStartScheduler+0xc0>)
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006828:	4b11      	ldr	r3, [pc, #68]	; (8006870 <vTaskStartScheduler+0xc4>)
 800682a:	2201      	movs	r2, #1
 800682c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800682e:	4b11      	ldr	r3, [pc, #68]	; (8006874 <vTaskStartScheduler+0xc8>)
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006834:	f001 f9dc 	bl	8007bf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006838:	e00e      	b.n	8006858 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006840:	d10a      	bne.n	8006858 <vTaskStartScheduler+0xac>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60fb      	str	r3, [r7, #12]
}
 8006854:	bf00      	nop
 8006856:	e7fe      	b.n	8006856 <vTaskStartScheduler+0xaa>
}
 8006858:	bf00      	nop
 800685a:	3718      	adds	r7, #24
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	08008d44 	.word	0x08008d44
 8006864:	08006eb5 	.word	0x08006eb5
 8006868:	20000e38 	.word	0x20000e38
 800686c:	20000e34 	.word	0x20000e34
 8006870:	20000e20 	.word	0x20000e20
 8006874:	20000e18 	.word	0x20000e18

08006878 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800687c:	4b04      	ldr	r3, [pc, #16]	; (8006890 <vTaskSuspendAll+0x18>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	4a03      	ldr	r2, [pc, #12]	; (8006890 <vTaskSuspendAll+0x18>)
 8006884:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006886:	bf00      	nop
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20000e3c 	.word	0x20000e3c

08006894 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068a2:	4b42      	ldr	r3, [pc, #264]	; (80069ac <xTaskResumeAll+0x118>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10a      	bne.n	80068c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	603b      	str	r3, [r7, #0]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068c0:	f001 fa38 	bl	8007d34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068c4:	4b39      	ldr	r3, [pc, #228]	; (80069ac <xTaskResumeAll+0x118>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	4a38      	ldr	r2, [pc, #224]	; (80069ac <xTaskResumeAll+0x118>)
 80068cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ce:	4b37      	ldr	r3, [pc, #220]	; (80069ac <xTaskResumeAll+0x118>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d162      	bne.n	800699c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068d6:	4b36      	ldr	r3, [pc, #216]	; (80069b0 <xTaskResumeAll+0x11c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d05e      	beq.n	800699c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068de:	e02f      	b.n	8006940 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e0:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <xTaskResumeAll+0x120>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3318      	adds	r3, #24
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fe fe29 	bl	8005544 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4618      	mov	r0, r3
 80068f8:	f7fe fe24 	bl	8005544 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006900:	4b2d      	ldr	r3, [pc, #180]	; (80069b8 <xTaskResumeAll+0x124>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	429a      	cmp	r2, r3
 8006906:	d903      	bls.n	8006910 <xTaskResumeAll+0x7c>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <xTaskResumeAll+0x124>)
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	4613      	mov	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4a27      	ldr	r2, [pc, #156]	; (80069bc <xTaskResumeAll+0x128>)
 800691e:	441a      	add	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3304      	adds	r3, #4
 8006924:	4619      	mov	r1, r3
 8006926:	4610      	mov	r0, r2
 8006928:	f7fe fdaf 	bl	800548a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	4b23      	ldr	r3, [pc, #140]	; (80069c0 <xTaskResumeAll+0x12c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800693a:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <xTaskResumeAll+0x130>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006940:	4b1c      	ldr	r3, [pc, #112]	; (80069b4 <xTaskResumeAll+0x120>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1cb      	bne.n	80068e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800694e:	f000 fb67 	bl	8007020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006952:	4b1d      	ldr	r3, [pc, #116]	; (80069c8 <xTaskResumeAll+0x134>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d010      	beq.n	8006980 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800695e:	f000 f859 	bl	8006a14 <xTaskIncrementTick>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d002      	beq.n	800696e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006968:	4b16      	ldr	r3, [pc, #88]	; (80069c4 <xTaskResumeAll+0x130>)
 800696a:	2201      	movs	r2, #1
 800696c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3b01      	subs	r3, #1
 8006972:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1f1      	bne.n	800695e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800697a:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <xTaskResumeAll+0x134>)
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006980:	4b10      	ldr	r3, [pc, #64]	; (80069c4 <xTaskResumeAll+0x130>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d009      	beq.n	800699c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800698c:	4b0f      	ldr	r3, [pc, #60]	; (80069cc <xTaskResumeAll+0x138>)
 800698e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800699c:	f001 f9fa 	bl	8007d94 <vPortExitCritical>

	return xAlreadyYielded;
 80069a0:	68bb      	ldr	r3, [r7, #8]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	20000e3c 	.word	0x20000e3c
 80069b0:	20000e14 	.word	0x20000e14
 80069b4:	20000dd4 	.word	0x20000dd4
 80069b8:	20000e1c 	.word	0x20000e1c
 80069bc:	20000944 	.word	0x20000944
 80069c0:	20000940 	.word	0x20000940
 80069c4:	20000e28 	.word	0x20000e28
 80069c8:	20000e24 	.word	0x20000e24
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069d6:	4b05      	ldr	r3, [pc, #20]	; (80069ec <xTaskGetTickCount+0x1c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069dc:	687b      	ldr	r3, [r7, #4]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	20000e18 	.word	0x20000e18

080069f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069f6:	f001 fa7f 	bl	8007ef8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80069fa:	2300      	movs	r3, #0
 80069fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80069fe:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <xTaskGetTickCountFromISR+0x20>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a04:	683b      	ldr	r3, [r7, #0]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000e18 	.word	0x20000e18

08006a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a1e:	4b4f      	ldr	r3, [pc, #316]	; (8006b5c <xTaskIncrementTick+0x148>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 808f 	bne.w	8006b46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a28:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <xTaskIncrementTick+0x14c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a30:	4a4b      	ldr	r2, [pc, #300]	; (8006b60 <xTaskIncrementTick+0x14c>)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d120      	bne.n	8006a7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a3c:	4b49      	ldr	r3, [pc, #292]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	603b      	str	r3, [r7, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <xTaskIncrementTick+0x46>
 8006a5c:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	4b41      	ldr	r3, [pc, #260]	; (8006b68 <xTaskIncrementTick+0x154>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a3f      	ldr	r2, [pc, #252]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4a3f      	ldr	r2, [pc, #252]	; (8006b68 <xTaskIncrementTick+0x154>)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b3e      	ldr	r3, [pc, #248]	; (8006b6c <xTaskIncrementTick+0x158>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <xTaskIncrementTick+0x158>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	f000 fad1 	bl	8007020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a7e:	4b3c      	ldr	r3, [pc, #240]	; (8006b70 <xTaskIncrementTick+0x15c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d349      	bcc.n	8006b1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a88:	4b36      	ldr	r3, [pc, #216]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a92:	4b37      	ldr	r3, [pc, #220]	; (8006b70 <xTaskIncrementTick+0x15c>)
 8006a94:	f04f 32ff 	mov.w	r2, #4294967295
 8006a98:	601a      	str	r2, [r3, #0]
					break;
 8006a9a:	e03f      	b.n	8006b1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	4b31      	ldr	r3, [pc, #196]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d203      	bcs.n	8006abc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ab4:	4a2e      	ldr	r2, [pc, #184]	; (8006b70 <xTaskIncrementTick+0x15c>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006aba:	e02f      	b.n	8006b1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe fd3f 	bl	8005544 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fd36 	bl	8005544 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4b25      	ldr	r3, [pc, #148]	; (8006b74 <xTaskIncrementTick+0x160>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <xTaskIncrementTick+0xd8>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	4a22      	ldr	r2, [pc, #136]	; (8006b74 <xTaskIncrementTick+0x160>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <xTaskIncrementTick+0x164>)
 8006afa:	441a      	add	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe fcc1 	bl	800548a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <xTaskIncrementTick+0x168>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d3b8      	bcc.n	8006a88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b1a:	e7b5      	b.n	8006a88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b1c:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <xTaskIncrementTick+0x168>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	4915      	ldr	r1, [pc, #84]	; (8006b78 <xTaskIncrementTick+0x164>)
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d901      	bls.n	8006b38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <xTaskIncrementTick+0x16c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e004      	b.n	8006b50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b46:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <xTaskIncrementTick+0x170>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <xTaskIncrementTick+0x170>)
 8006b4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b50:	697b      	ldr	r3, [r7, #20]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000e3c 	.word	0x20000e3c
 8006b60:	20000e18 	.word	0x20000e18
 8006b64:	20000dcc 	.word	0x20000dcc
 8006b68:	20000dd0 	.word	0x20000dd0
 8006b6c:	20000e2c 	.word	0x20000e2c
 8006b70:	20000e34 	.word	0x20000e34
 8006b74:	20000e1c 	.word	0x20000e1c
 8006b78:	20000944 	.word	0x20000944
 8006b7c:	20000940 	.word	0x20000940
 8006b80:	20000e28 	.word	0x20000e28
 8006b84:	20000e24 	.word	0x20000e24

08006b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b8e:	4b28      	ldr	r3, [pc, #160]	; (8006c30 <vTaskSwitchContext+0xa8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b96:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <vTaskSwitchContext+0xac>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b9c:	e041      	b.n	8006c22 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006b9e:	4b25      	ldr	r3, [pc, #148]	; (8006c34 <vTaskSwitchContext+0xac>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba4:	4b24      	ldr	r3, [pc, #144]	; (8006c38 <vTaskSwitchContext+0xb0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e010      	b.n	8006bce <vTaskSwitchContext+0x46>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	607b      	str	r3, [r7, #4]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <vTaskSwitchContext+0x3e>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	491b      	ldr	r1, [pc, #108]	; (8006c3c <vTaskSwitchContext+0xb4>)
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0e4      	beq.n	8006bac <vTaskSwitchContext+0x24>
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4a13      	ldr	r2, [pc, #76]	; (8006c3c <vTaskSwitchContext+0xb4>)
 8006bee:	4413      	add	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	605a      	str	r2, [r3, #4]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3308      	adds	r3, #8
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d104      	bne.n	8006c12 <vTaskSwitchContext+0x8a>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a09      	ldr	r2, [pc, #36]	; (8006c40 <vTaskSwitchContext+0xb8>)
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	4a06      	ldr	r2, [pc, #24]	; (8006c38 <vTaskSwitchContext+0xb0>)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6013      	str	r3, [r2, #0]
}
 8006c22:	bf00      	nop
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	20000e3c 	.word	0x20000e3c
 8006c34:	20000e28 	.word	0x20000e28
 8006c38:	20000e1c 	.word	0x20000e1c
 8006c3c:	20000944 	.word	0x20000944
 8006c40:	20000940 	.word	0x20000940

08006c44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	60fb      	str	r3, [r7, #12]
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c6a:	4b07      	ldr	r3, [pc, #28]	; (8006c88 <vTaskPlaceOnEventList+0x44>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3318      	adds	r3, #24
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fe fc2d 	bl	80054d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c78:	2101      	movs	r1, #1
 8006c7a:	6838      	ldr	r0, [r7, #0]
 8006c7c:	f000 fb8a 	bl	8007394 <prvAddCurrentTaskToDelayedList>
}
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000940 	.word	0x20000940

08006c8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	617b      	str	r3, [r7, #20]
}
 8006cb0:	bf00      	nop
 8006cb2:	e7fe      	b.n	8006cb2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3318      	adds	r3, #24
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7fe fbe4 	bl	800548a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ccc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cce:	6879      	ldr	r1, [r7, #4]
 8006cd0:	68b8      	ldr	r0, [r7, #8]
 8006cd2:	f000 fb5f 	bl	8007394 <prvAddCurrentTaskToDelayedList>
	}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20000940 	.word	0x20000940

08006ce4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b086      	sub	sp, #24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	60fb      	str	r3, [r7, #12]
}
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3318      	adds	r3, #24
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fc15 	bl	8005544 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d1a:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <xTaskRemoveFromEventList+0xb0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d11d      	bne.n	8006d5e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fc0c 	bl	8005544 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d30:	4b19      	ldr	r3, [pc, #100]	; (8006d98 <xTaskRemoveFromEventList+0xb4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d903      	bls.n	8006d40 <xTaskRemoveFromEventList+0x5c>
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	4a16      	ldr	r2, [pc, #88]	; (8006d98 <xTaskRemoveFromEventList+0xb4>)
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4a13      	ldr	r2, [pc, #76]	; (8006d9c <xTaskRemoveFromEventList+0xb8>)
 8006d4e:	441a      	add	r2, r3
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f7fe fb97 	bl	800548a <vListInsertEnd>
 8006d5c:	e005      	b.n	8006d6a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	3318      	adds	r3, #24
 8006d62:	4619      	mov	r1, r3
 8006d64:	480e      	ldr	r0, [pc, #56]	; (8006da0 <xTaskRemoveFromEventList+0xbc>)
 8006d66:	f7fe fb90 	bl	800548a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <xTaskRemoveFromEventList+0xc0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d905      	bls.n	8006d84 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d7c:	4b0a      	ldr	r3, [pc, #40]	; (8006da8 <xTaskRemoveFromEventList+0xc4>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	e001      	b.n	8006d88 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d88:	697b      	ldr	r3, [r7, #20]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3718      	adds	r7, #24
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000e3c 	.word	0x20000e3c
 8006d98:	20000e1c 	.word	0x20000e1c
 8006d9c:	20000944 	.word	0x20000944
 8006da0:	20000dd4 	.word	0x20000dd4
 8006da4:	20000940 	.word	0x20000940
 8006da8:	20000e28 	.word	0x20000e28

08006dac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <vTaskInternalSetTimeOutState+0x24>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <vTaskInternalSetTimeOutState+0x28>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	605a      	str	r2, [r3, #4]
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr
 8006dd0:	20000e2c 	.word	0x20000e2c
 8006dd4:	20000e18 	.word	0x20000e18

08006dd8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b088      	sub	sp, #32
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	613b      	str	r3, [r7, #16]
}
 8006dfa:	bf00      	nop
 8006dfc:	e7fe      	b.n	8006dfc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60fb      	str	r3, [r7, #12]
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e1a:	f000 ff8b 	bl	8007d34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e1e:	4b1d      	ldr	r3, [pc, #116]	; (8006e94 <xTaskCheckForTimeOut+0xbc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d102      	bne.n	8006e3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e023      	b.n	8006e86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b15      	ldr	r3, [pc, #84]	; (8006e98 <xTaskCheckForTimeOut+0xc0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d007      	beq.n	8006e5a <xTaskCheckForTimeOut+0x82>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d302      	bcc.n	8006e5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	e015      	b.n	8006e86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d20b      	bcs.n	8006e7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	1ad2      	subs	r2, r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff9b 	bl	8006dac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	e004      	b.n	8006e86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e86:	f000 ff85 	bl	8007d94 <vPortExitCritical>

	return xReturn;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	20000e18 	.word	0x20000e18
 8006e98:	20000e2c 	.word	0x20000e2c

08006e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <vTaskMissedYield+0x14>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20000e28 	.word	0x20000e28

08006eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ebc:	f000 f852 	bl	8006f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ec0:	4b06      	ldr	r3, [pc, #24]	; (8006edc <prvIdleTask+0x28>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d9f9      	bls.n	8006ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ec8:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <prvIdleTask+0x2c>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ed8:	e7f0      	b.n	8006ebc <prvIdleTask+0x8>
 8006eda:	bf00      	nop
 8006edc:	20000944 	.word	0x20000944
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
 8006eee:	e00c      	b.n	8006f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <prvInitialiseTaskLists+0x60>)
 8006efc:	4413      	add	r3, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fa96 	bl	8005430 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3301      	adds	r3, #1
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b37      	cmp	r3, #55	; 0x37
 8006f0e:	d9ef      	bls.n	8006ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f10:	480d      	ldr	r0, [pc, #52]	; (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f12:	f7fe fa8d 	bl	8005430 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f16:	480d      	ldr	r0, [pc, #52]	; (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f18:	f7fe fa8a 	bl	8005430 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f1c:	480c      	ldr	r0, [pc, #48]	; (8006f50 <prvInitialiseTaskLists+0x6c>)
 8006f1e:	f7fe fa87 	bl	8005430 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f22:	480c      	ldr	r0, [pc, #48]	; (8006f54 <prvInitialiseTaskLists+0x70>)
 8006f24:	f7fe fa84 	bl	8005430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f28:	480b      	ldr	r0, [pc, #44]	; (8006f58 <prvInitialiseTaskLists+0x74>)
 8006f2a:	f7fe fa81 	bl	8005430 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <prvInitialiseTaskLists+0x78>)
 8006f30:	4a05      	ldr	r2, [pc, #20]	; (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f34:	4b0a      	ldr	r3, [pc, #40]	; (8006f60 <prvInitialiseTaskLists+0x7c>)
 8006f36:	4a05      	ldr	r2, [pc, #20]	; (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20000944 	.word	0x20000944
 8006f48:	20000da4 	.word	0x20000da4
 8006f4c:	20000db8 	.word	0x20000db8
 8006f50:	20000dd4 	.word	0x20000dd4
 8006f54:	20000de8 	.word	0x20000de8
 8006f58:	20000e00 	.word	0x20000e00
 8006f5c:	20000dcc 	.word	0x20000dcc
 8006f60:	20000dd0 	.word	0x20000dd0

08006f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f6a:	e019      	b.n	8006fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f6c:	f000 fee2 	bl	8007d34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <prvCheckTasksWaitingTermination+0x50>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fae1 	bl	8005544 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f82:	4b0d      	ldr	r3, [pc, #52]	; (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	4a0b      	ldr	r2, [pc, #44]	; (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	4a0a      	ldr	r2, [pc, #40]	; (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f96:	f000 fefd 	bl	8007d94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f810 	bl	8006fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e1      	bne.n	8006f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000de8 	.word	0x20000de8
 8006fb8:	20000e14 	.word	0x20000e14
 8006fbc:	20000dfc 	.word	0x20000dfc

08006fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d108      	bne.n	8006fe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f89a 	bl	8008110 <vPortFree>
				vPortFree( pxTCB );
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f897 	bl	8008110 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fe2:	e018      	b.n	8007016 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d103      	bne.n	8006ff6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 f88e 	bl	8008110 <vPortFree>
	}
 8006ff4:	e00f      	b.n	8007016 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d00a      	beq.n	8007016 <prvDeleteTCB+0x56>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <prvDeleteTCB+0x54>
	}
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
	...

08007020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <prvResetNextTaskUnblockTime+0x38>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <prvResetNextTaskUnblockTime+0x3c>)
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
 8007036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007038:	e008      	b.n	800704c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703a:	4b07      	ldr	r3, [pc, #28]	; (8007058 <prvResetNextTaskUnblockTime+0x38>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a04      	ldr	r2, [pc, #16]	; (800705c <prvResetNextTaskUnblockTime+0x3c>)
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000dcc 	.word	0x20000dcc
 800705c:	20000e34 	.word	0x20000e34

08007060 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <xTaskGetCurrentTaskHandle+0x1c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800706c:	687b      	ldr	r3, [r7, #4]
	}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000940 	.word	0x20000940

08007080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <xTaskGetSchedulerState+0x34>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800708e:	2301      	movs	r3, #1
 8007090:	607b      	str	r3, [r7, #4]
 8007092:	e008      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <xTaskGetSchedulerState+0x38>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800709c:	2302      	movs	r3, #2
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e001      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070a6:	687b      	ldr	r3, [r7, #4]
	}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20000e20 	.word	0x20000e20
 80070b8:	20000e3c 	.word	0x20000e3c

080070bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d051      	beq.n	8007176 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d6:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <xTaskPriorityInherit+0xc4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d241      	bcs.n	8007164 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	db06      	blt.n	80070f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e8:	4b25      	ldr	r3, [pc, #148]	; (8007180 <xTaskPriorityInherit+0xc4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6959      	ldr	r1, [r3, #20]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <xTaskPriorityInherit+0xc8>)
 8007108:	4413      	add	r3, r2
 800710a:	4299      	cmp	r1, r3
 800710c:	d122      	bne.n	8007154 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fe fa16 	bl	8005544 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007118:	4b19      	ldr	r3, [pc, #100]	; (8007180 <xTaskPriorityInherit+0xc4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007126:	4b18      	ldr	r3, [pc, #96]	; (8007188 <xTaskPriorityInherit+0xcc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d903      	bls.n	8007136 <xTaskPriorityInherit+0x7a>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <xTaskPriorityInherit+0xcc>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4a10      	ldr	r2, [pc, #64]	; (8007184 <xTaskPriorityInherit+0xc8>)
 8007144:	441a      	add	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	3304      	adds	r3, #4
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7fe f99c 	bl	800548a <vListInsertEnd>
 8007152:	e004      	b.n	800715e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007154:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <xTaskPriorityInherit+0xc4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800715e:	2301      	movs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e008      	b.n	8007176 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <xTaskPriorityInherit+0xc4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	429a      	cmp	r2, r3
 8007170:	d201      	bcs.n	8007176 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007172:	2301      	movs	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007176:	68fb      	ldr	r3, [r7, #12]
	}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20000940 	.word	0x20000940
 8007184:	20000944 	.word	0x20000944
 8007188:	20000e1c 	.word	0x20000e1c

0800718c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d056      	beq.n	8007250 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071a2:	4b2e      	ldr	r3, [pc, #184]	; (800725c <xTaskPriorityDisinherit+0xd0>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d00a      	beq.n	80071c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60fb      	str	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	e7fe      	b.n	80071c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10a      	bne.n	80071e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	60bb      	str	r3, [r7, #8]
}
 80071dc:	bf00      	nop
 80071de:	e7fe      	b.n	80071de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e4:	1e5a      	subs	r2, r3, #1
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d02c      	beq.n	8007250 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d128      	bne.n	8007250 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f99e 	bl	8005544 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007214:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007220:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <xTaskPriorityDisinherit+0xd4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	429a      	cmp	r2, r3
 8007226:	d903      	bls.n	8007230 <xTaskPriorityDisinherit+0xa4>
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722c:	4a0c      	ldr	r2, [pc, #48]	; (8007260 <xTaskPriorityDisinherit+0xd4>)
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007234:	4613      	mov	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4a09      	ldr	r2, [pc, #36]	; (8007264 <xTaskPriorityDisinherit+0xd8>)
 800723e:	441a      	add	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	3304      	adds	r3, #4
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe f91f 	bl	800548a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800724c:	2301      	movs	r3, #1
 800724e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007250:	697b      	ldr	r3, [r7, #20]
	}
 8007252:	4618      	mov	r0, r3
 8007254:	3718      	adds	r7, #24
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000940 	.word	0x20000940
 8007260:	20000e1c 	.word	0x20000e1c
 8007264:	20000944 	.word	0x20000944

08007268 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007276:	2301      	movs	r3, #1
 8007278:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d06a      	beq.n	8007356 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	60fb      	str	r3, [r7, #12]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d902      	bls.n	80072ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	61fb      	str	r3, [r7, #28]
 80072ac:	e002      	b.n	80072b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b8:	69fa      	ldr	r2, [r7, #28]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d04b      	beq.n	8007356 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d146      	bne.n	8007356 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072c8:	4b25      	ldr	r3, [pc, #148]	; (8007360 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	69ba      	ldr	r2, [r7, #24]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d10a      	bne.n	80072e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60bb      	str	r3, [r7, #8]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	69fa      	ldr	r2, [r7, #28]
 80072f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	db04      	blt.n	8007306 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	6959      	ldr	r1, [r3, #20]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007316:	4413      	add	r3, r2
 8007318:	4299      	cmp	r1, r3
 800731a:	d11c      	bne.n	8007356 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe f90f 	bl	8005544 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800732a:	4b0f      	ldr	r3, [pc, #60]	; (8007368 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d903      	bls.n	800733a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	4a0c      	ldr	r2, [pc, #48]	; (8007368 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4a07      	ldr	r2, [pc, #28]	; (8007364 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007348:	441a      	add	r2, r3
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe f89a 	bl	800548a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007356:	bf00      	nop
 8007358:	3720      	adds	r7, #32
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000940 	.word	0x20000940
 8007364:	20000944 	.word	0x20000944
 8007368:	20000e1c 	.word	0x20000e1c

0800736c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007370:	4b07      	ldr	r3, [pc, #28]	; (8007390 <pvTaskIncrementMutexHeldCount+0x24>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <pvTaskIncrementMutexHeldCount+0x24>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800737e:	3201      	adds	r2, #1
 8007380:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007382:	4b03      	ldr	r3, [pc, #12]	; (8007390 <pvTaskIncrementMutexHeldCount+0x24>)
 8007384:	681b      	ldr	r3, [r3, #0]
	}
 8007386:	4618      	mov	r0, r3
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	20000940 	.word	0x20000940

08007394 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800739e:	4b21      	ldr	r3, [pc, #132]	; (8007424 <prvAddCurrentTaskToDelayedList+0x90>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073a4:	4b20      	ldr	r3, [pc, #128]	; (8007428 <prvAddCurrentTaskToDelayedList+0x94>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe f8ca 	bl	8005544 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b6:	d10a      	bne.n	80073ce <prvAddCurrentTaskToDelayedList+0x3a>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d007      	beq.n	80073ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073be:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4819      	ldr	r0, [pc, #100]	; (800742c <prvAddCurrentTaskToDelayedList+0x98>)
 80073c8:	f7fe f85f 	bl	800548a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073cc:	e026      	b.n	800741c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4413      	add	r3, r2
 80073d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073d6:	4b14      	ldr	r3, [pc, #80]	; (8007428 <prvAddCurrentTaskToDelayedList+0x94>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d209      	bcs.n	80073fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073e6:	4b12      	ldr	r3, [pc, #72]	; (8007430 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <prvAddCurrentTaskToDelayedList+0x94>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4619      	mov	r1, r3
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7fe f86d 	bl	80054d2 <vListInsert>
}
 80073f8:	e010      	b.n	800741c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073fa:	4b0e      	ldr	r3, [pc, #56]	; (8007434 <prvAddCurrentTaskToDelayedList+0xa0>)
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b0a      	ldr	r3, [pc, #40]	; (8007428 <prvAddCurrentTaskToDelayedList+0x94>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3304      	adds	r3, #4
 8007404:	4619      	mov	r1, r3
 8007406:	4610      	mov	r0, r2
 8007408:	f7fe f863 	bl	80054d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800740c:	4b0a      	ldr	r3, [pc, #40]	; (8007438 <prvAddCurrentTaskToDelayedList+0xa4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	429a      	cmp	r2, r3
 8007414:	d202      	bcs.n	800741c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007416:	4a08      	ldr	r2, [pc, #32]	; (8007438 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	6013      	str	r3, [r2, #0]
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000e18 	.word	0x20000e18
 8007428:	20000940 	.word	0x20000940
 800742c:	20000e00 	.word	0x20000e00
 8007430:	20000dd0 	.word	0x20000dd0
 8007434:	20000dcc 	.word	0x20000dcc
 8007438:	20000e34 	.word	0x20000e34

0800743c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08a      	sub	sp, #40	; 0x28
 8007440:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007446:	f000 fb07 	bl	8007a58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800744a:	4b1c      	ldr	r3, [pc, #112]	; (80074bc <xTimerCreateTimerTask+0x80>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d021      	beq.n	8007496 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800745a:	1d3a      	adds	r2, r7, #4
 800745c:	f107 0108 	add.w	r1, r7, #8
 8007460:	f107 030c 	add.w	r3, r7, #12
 8007464:	4618      	mov	r0, r3
 8007466:	f7fd ffc9 	bl	80053fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	9202      	str	r2, [sp, #8]
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	2302      	movs	r3, #2
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	2300      	movs	r3, #0
 800747a:	460a      	mov	r2, r1
 800747c:	4910      	ldr	r1, [pc, #64]	; (80074c0 <xTimerCreateTimerTask+0x84>)
 800747e:	4811      	ldr	r0, [pc, #68]	; (80074c4 <xTimerCreateTimerTask+0x88>)
 8007480:	f7fe ffbe 	bl	8006400 <xTaskCreateStatic>
 8007484:	4603      	mov	r3, r0
 8007486:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <xTimerCreateTimerTask+0x8c>)
 8007488:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <xTimerCreateTimerTask+0x8c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007492:	2301      	movs	r3, #1
 8007494:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	613b      	str	r3, [r7, #16]
}
 80074ae:	bf00      	nop
 80074b0:	e7fe      	b.n	80074b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074b2:	697b      	ldr	r3, [r7, #20]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	20000e70 	.word	0x20000e70
 80074c0:	08008d4c 	.word	0x08008d4c
 80074c4:	08007601 	.word	0x08007601
 80074c8:	20000e74 	.word	0x20000e74

080074cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	; 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074da:	2300      	movs	r3, #0
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10a      	bne.n	80074fa <xTimerGenericCommand+0x2e>
	__asm volatile
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	623b      	str	r3, [r7, #32]
}
 80074f6:	bf00      	nop
 80074f8:	e7fe      	b.n	80074f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80074fa:	4b1a      	ldr	r3, [pc, #104]	; (8007564 <xTimerGenericCommand+0x98>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d02a      	beq.n	8007558 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	2b05      	cmp	r3, #5
 8007512:	dc18      	bgt.n	8007546 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007514:	f7ff fdb4 	bl	8007080 <xTaskGetSchedulerState>
 8007518:	4603      	mov	r3, r0
 800751a:	2b02      	cmp	r3, #2
 800751c:	d109      	bne.n	8007532 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800751e:	4b11      	ldr	r3, [pc, #68]	; (8007564 <xTimerGenericCommand+0x98>)
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f107 0110 	add.w	r1, r7, #16
 8007526:	2300      	movs	r3, #0
 8007528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752a:	f7fe f9dd 	bl	80058e8 <xQueueGenericSend>
 800752e:	6278      	str	r0, [r7, #36]	; 0x24
 8007530:	e012      	b.n	8007558 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007532:	4b0c      	ldr	r3, [pc, #48]	; (8007564 <xTimerGenericCommand+0x98>)
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	f107 0110 	add.w	r1, r7, #16
 800753a:	2300      	movs	r3, #0
 800753c:	2200      	movs	r2, #0
 800753e:	f7fe f9d3 	bl	80058e8 <xQueueGenericSend>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24
 8007544:	e008      	b.n	8007558 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007546:	4b07      	ldr	r3, [pc, #28]	; (8007564 <xTimerGenericCommand+0x98>)
 8007548:	6818      	ldr	r0, [r3, #0]
 800754a:	f107 0110 	add.w	r1, r7, #16
 800754e:	2300      	movs	r3, #0
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	f7fe fac7 	bl	8005ae4 <xQueueGenericSendFromISR>
 8007556:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800755a:	4618      	mov	r0, r3
 800755c:	3728      	adds	r7, #40	; 0x28
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	20000e70 	.word	0x20000e70

08007568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b088      	sub	sp, #32
 800756c:	af02      	add	r7, sp, #8
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007572:	4b22      	ldr	r3, [pc, #136]	; (80075fc <prvProcessExpiredTimer+0x94>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3304      	adds	r3, #4
 8007580:	4618      	mov	r0, r3
 8007582:	f7fd ffdf 	bl	8005544 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800758c:	f003 0304 	and.w	r3, r3, #4
 8007590:	2b00      	cmp	r3, #0
 8007592:	d022      	beq.n	80075da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	699a      	ldr	r2, [r3, #24]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	18d1      	adds	r1, r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	683a      	ldr	r2, [r7, #0]
 80075a0:	6978      	ldr	r0, [r7, #20]
 80075a2:	f000 f8d1 	bl	8007748 <prvInsertTimerInActiveList>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01f      	beq.n	80075ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	2100      	movs	r1, #0
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f7ff ff88 	bl	80074cc <xTimerGenericCommand>
 80075bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d113      	bne.n	80075ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60fb      	str	r3, [r7, #12]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e0:	f023 0301 	bic.w	r3, r3, #1
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	6978      	ldr	r0, [r7, #20]
 80075f2:	4798      	blx	r3
}
 80075f4:	bf00      	nop
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000e68 	.word	0x20000e68

08007600 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007608:	f107 0308 	add.w	r3, r7, #8
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f857 	bl	80076c0 <prvGetNextExpireTime>
 8007612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4619      	mov	r1, r3
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f803 	bl	8007624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800761e:	f000 f8d5 	bl	80077cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007622:	e7f1      	b.n	8007608 <prvTimerTask+0x8>

08007624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800762e:	f7ff f923 	bl	8006878 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007632:	f107 0308 	add.w	r3, r7, #8
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f866 	bl	8007708 <prvSampleTimeNow>
 800763c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d130      	bne.n	80076a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10a      	bne.n	8007660 <prvProcessTimerOrBlockTask+0x3c>
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	429a      	cmp	r2, r3
 8007650:	d806      	bhi.n	8007660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007652:	f7ff f91f 	bl	8006894 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007656:	68f9      	ldr	r1, [r7, #12]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7ff ff85 	bl	8007568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800765e:	e024      	b.n	80076aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d008      	beq.n	8007678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007666:	4b13      	ldr	r3, [pc, #76]	; (80076b4 <prvProcessTimerOrBlockTask+0x90>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <prvProcessTimerOrBlockTask+0x50>
 8007670:	2301      	movs	r3, #1
 8007672:	e000      	b.n	8007676 <prvProcessTimerOrBlockTask+0x52>
 8007674:	2300      	movs	r3, #0
 8007676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007678:	4b0f      	ldr	r3, [pc, #60]	; (80076b8 <prvProcessTimerOrBlockTask+0x94>)
 800767a:	6818      	ldr	r0, [r3, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	f7fe fe87 	bl	8006398 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800768a:	f7ff f903 	bl	8006894 <xTaskResumeAll>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d10a      	bne.n	80076aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007694:	4b09      	ldr	r3, [pc, #36]	; (80076bc <prvProcessTimerOrBlockTask+0x98>)
 8007696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	f3bf 8f6f 	isb	sy
}
 80076a4:	e001      	b.n	80076aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076a6:	f7ff f8f5 	bl	8006894 <xTaskResumeAll>
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20000e6c 	.word	0x20000e6c
 80076b8:	20000e70 	.word	0x20000e70
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076c8:	4b0e      	ldr	r3, [pc, #56]	; (8007704 <prvGetNextExpireTime+0x44>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <prvGetNextExpireTime+0x16>
 80076d2:	2201      	movs	r2, #1
 80076d4:	e000      	b.n	80076d8 <prvGetNextExpireTime+0x18>
 80076d6:	2200      	movs	r2, #0
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d105      	bne.n	80076f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076e4:	4b07      	ldr	r3, [pc, #28]	; (8007704 <prvGetNextExpireTime+0x44>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	e001      	b.n	80076f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80076f0:	2300      	movs	r3, #0
 80076f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80076f4:	68fb      	ldr	r3, [r7, #12]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20000e68 	.word	0x20000e68

08007708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007710:	f7ff f95e 	bl	80069d0 <xTaskGetTickCount>
 8007714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007716:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <prvSampleTimeNow+0x3c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d205      	bcs.n	800772c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007720:	f000 f936 	bl	8007990 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e002      	b.n	8007732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007732:	4a04      	ldr	r2, [pc, #16]	; (8007744 <prvSampleTimeNow+0x3c>)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007738:	68fb      	ldr	r3, [r7, #12]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000e78 	.word	0x20000e78

08007748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
 8007754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007756:	2300      	movs	r3, #0
 8007758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	429a      	cmp	r2, r3
 800776c:	d812      	bhi.n	8007794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	1ad2      	subs	r2, r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	429a      	cmp	r2, r3
 800777a:	d302      	bcc.n	8007782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e01b      	b.n	80077ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007782:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <prvInsertTimerInActiveList+0x7c>)
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3304      	adds	r3, #4
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f7fd fea0 	bl	80054d2 <vListInsert>
 8007792:	e012      	b.n	80077ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d206      	bcs.n	80077aa <prvInsertTimerInActiveList+0x62>
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d302      	bcc.n	80077aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077a4:	2301      	movs	r3, #1
 80077a6:	617b      	str	r3, [r7, #20]
 80077a8:	e007      	b.n	80077ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077aa:	4b07      	ldr	r3, [pc, #28]	; (80077c8 <prvInsertTimerInActiveList+0x80>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4619      	mov	r1, r3
 80077b4:	4610      	mov	r0, r2
 80077b6:	f7fd fe8c 	bl	80054d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077ba:	697b      	ldr	r3, [r7, #20]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	20000e6c 	.word	0x20000e6c
 80077c8:	20000e68 	.word	0x20000e68

080077cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08e      	sub	sp, #56	; 0x38
 80077d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077d2:	e0ca      	b.n	800796a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da18      	bge.n	800780c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077da:	1d3b      	adds	r3, r7, #4
 80077dc:	3304      	adds	r3, #4
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10a      	bne.n	80077fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	61fb      	str	r3, [r7, #28]
}
 80077f8:	bf00      	nop
 80077fa:	e7fe      	b.n	80077fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80077fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007802:	6850      	ldr	r0, [r2, #4]
 8007804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007806:	6892      	ldr	r2, [r2, #8]
 8007808:	4611      	mov	r1, r2
 800780a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	f2c0 80aa 	blt.w	8007968 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	3304      	adds	r3, #4
 8007824:	4618      	mov	r0, r3
 8007826:	f7fd fe8d 	bl	8005544 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800782a:	463b      	mov	r3, r7
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff ff6b 	bl	8007708 <prvSampleTimeNow>
 8007832:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b09      	cmp	r3, #9
 8007838:	f200 8097 	bhi.w	800796a <prvProcessReceivedCommands+0x19e>
 800783c:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <prvProcessReceivedCommands+0x78>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	0800786d 	.word	0x0800786d
 8007848:	0800786d 	.word	0x0800786d
 800784c:	0800786d 	.word	0x0800786d
 8007850:	080078e1 	.word	0x080078e1
 8007854:	080078f5 	.word	0x080078f5
 8007858:	0800793f 	.word	0x0800793f
 800785c:	0800786d 	.word	0x0800786d
 8007860:	0800786d 	.word	0x0800786d
 8007864:	080078e1 	.word	0x080078e1
 8007868:	080078f5 	.word	0x080078f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800786e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	b2da      	uxtb	r2, r3
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	18d1      	adds	r1, r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800788a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800788c:	f7ff ff5c 	bl	8007748 <prvInsertTimerInActiveList>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d069      	beq.n	800796a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800789c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d05e      	beq.n	800796a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	441a      	add	r2, r3
 80078b4:	2300      	movs	r3, #0
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	2300      	movs	r3, #0
 80078ba:	2100      	movs	r1, #0
 80078bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078be:	f7ff fe05 	bl	80074cc <xTimerGenericCommand>
 80078c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d14f      	bne.n	800796a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	61bb      	str	r3, [r7, #24]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078e6:	f023 0301 	bic.w	r3, r3, #1
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80078f2:	e03a      	b.n	800796a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	b2da      	uxtb	r2, r3
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	617b      	str	r3, [r7, #20]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	18d1      	adds	r1, r2, r3
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007938:	f7ff ff06 	bl	8007748 <prvInsertTimerInActiveList>
					break;
 800793c:	e015      	b.n	800796a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800793e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d103      	bne.n	8007954 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800794c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800794e:	f000 fbdf 	bl	8008110 <vPortFree>
 8007952:	e00a      	b.n	800796a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	b2da      	uxtb	r2, r3
 8007960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007966:	e000      	b.n	800796a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007968:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <prvProcessReceivedCommands+0x1c0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	1d39      	adds	r1, r7, #4
 8007970:	2200      	movs	r2, #0
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe f952 	bl	8005c1c <xQueueReceive>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	f47f af2a 	bne.w	80077d4 <prvProcessReceivedCommands+0x8>
	}
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	3730      	adds	r7, #48	; 0x30
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000e70 	.word	0x20000e70

08007990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b088      	sub	sp, #32
 8007994:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007996:	e048      	b.n	8007a2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007998:	4b2d      	ldr	r3, [pc, #180]	; (8007a50 <prvSwitchTimerLists+0xc0>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a2:	4b2b      	ldr	r3, [pc, #172]	; (8007a50 <prvSwitchTimerLists+0xc0>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3304      	adds	r3, #4
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fdc7 	bl	8005544 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d02e      	beq.n	8007a2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4413      	add	r3, r2
 80079d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d90e      	bls.n	80079fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079ea:	4b19      	ldr	r3, [pc, #100]	; (8007a50 <prvSwitchTimerLists+0xc0>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3304      	adds	r3, #4
 80079f2:	4619      	mov	r1, r3
 80079f4:	4610      	mov	r0, r2
 80079f6:	f7fd fd6c 	bl	80054d2 <vListInsert>
 80079fa:	e016      	b.n	8007a2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079fc:	2300      	movs	r3, #0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	2300      	movs	r3, #0
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	2100      	movs	r1, #0
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f7ff fd60 	bl	80074cc <xTimerGenericCommand>
 8007a0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10a      	bne.n	8007a2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	603b      	str	r3, [r7, #0]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a2a:	4b09      	ldr	r3, [pc, #36]	; (8007a50 <prvSwitchTimerLists+0xc0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1b1      	bne.n	8007998 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a34:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <prvSwitchTimerLists+0xc0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <prvSwitchTimerLists+0xc4>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a04      	ldr	r2, [pc, #16]	; (8007a50 <prvSwitchTimerLists+0xc0>)
 8007a40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a42:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <prvSwitchTimerLists+0xc4>)
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	6013      	str	r3, [r2, #0]
}
 8007a48:	bf00      	nop
 8007a4a:	3718      	adds	r7, #24
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20000e68 	.word	0x20000e68
 8007a54:	20000e6c 	.word	0x20000e6c

08007a58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a5e:	f000 f969 	bl	8007d34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d120      	bne.n	8007aac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a6a:	4814      	ldr	r0, [pc, #80]	; (8007abc <prvCheckForValidListAndQueue+0x64>)
 8007a6c:	f7fd fce0 	bl	8005430 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a70:	4813      	ldr	r0, [pc, #76]	; (8007ac0 <prvCheckForValidListAndQueue+0x68>)
 8007a72:	f7fd fcdd 	bl	8005430 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a76:	4b13      	ldr	r3, [pc, #76]	; (8007ac4 <prvCheckForValidListAndQueue+0x6c>)
 8007a78:	4a10      	ldr	r2, [pc, #64]	; (8007abc <prvCheckForValidListAndQueue+0x64>)
 8007a7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a7c:	4b12      	ldr	r3, [pc, #72]	; (8007ac8 <prvCheckForValidListAndQueue+0x70>)
 8007a7e:	4a10      	ldr	r2, [pc, #64]	; (8007ac0 <prvCheckForValidListAndQueue+0x68>)
 8007a80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007a82:	2300      	movs	r3, #0
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	4b11      	ldr	r3, [pc, #68]	; (8007acc <prvCheckForValidListAndQueue+0x74>)
 8007a88:	4a11      	ldr	r2, [pc, #68]	; (8007ad0 <prvCheckForValidListAndQueue+0x78>)
 8007a8a:	2110      	movs	r1, #16
 8007a8c:	200a      	movs	r0, #10
 8007a8e:	f7fd fdeb 	bl	8005668 <xQueueGenericCreateStatic>
 8007a92:	4603      	mov	r3, r0
 8007a94:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007a96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007a98:	4b07      	ldr	r3, [pc, #28]	; (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007aa0:	4b05      	ldr	r3, [pc, #20]	; (8007ab8 <prvCheckForValidListAndQueue+0x60>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	490b      	ldr	r1, [pc, #44]	; (8007ad4 <prvCheckForValidListAndQueue+0x7c>)
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fc4c 	bl	8006344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aac:	f000 f972 	bl	8007d94 <vPortExitCritical>
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	20000e70 	.word	0x20000e70
 8007abc:	20000e40 	.word	0x20000e40
 8007ac0:	20000e54 	.word	0x20000e54
 8007ac4:	20000e68 	.word	0x20000e68
 8007ac8:	20000e6c 	.word	0x20000e6c
 8007acc:	20000f1c 	.word	0x20000f1c
 8007ad0:	20000e7c 	.word	0x20000e7c
 8007ad4:	08008d54 	.word	0x08008d54

08007ad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3b04      	subs	r3, #4
 8007ae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007af0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f023 0201 	bic.w	r2, r3, #1
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	3b04      	subs	r3, #4
 8007b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b08:	4a0c      	ldr	r2, [pc, #48]	; (8007b3c <pxPortInitialiseStack+0x64>)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3b14      	subs	r3, #20
 8007b12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f06f 0202 	mvn.w	r2, #2
 8007b26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3b20      	subs	r3, #32
 8007b2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	08007b41 	.word	0x08007b41

08007b40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b4a:	4b12      	ldr	r3, [pc, #72]	; (8007b94 <prvTaskExitError+0x54>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b52:	d00a      	beq.n	8007b6a <prvTaskExitError+0x2a>
	__asm volatile
 8007b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b58:	f383 8811 	msr	BASEPRI, r3
 8007b5c:	f3bf 8f6f 	isb	sy
 8007b60:	f3bf 8f4f 	dsb	sy
 8007b64:	60fb      	str	r3, [r7, #12]
}
 8007b66:	bf00      	nop
 8007b68:	e7fe      	b.n	8007b68 <prvTaskExitError+0x28>
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	60bb      	str	r3, [r7, #8]
}
 8007b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b7e:	bf00      	nop
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0fc      	beq.n	8007b80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	2000005c 	.word	0x2000005c
	...

08007ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007ba0:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <pxCurrentTCBConst2>)
 8007ba2:	6819      	ldr	r1, [r3, #0]
 8007ba4:	6808      	ldr	r0, [r1, #0]
 8007ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007baa:	f380 8809 	msr	PSP, r0
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8811 	msr	BASEPRI, r0
 8007bba:	4770      	bx	lr
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst2>:
 8007bc0:	20000940 	.word	0x20000940
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bc8:	4808      	ldr	r0, [pc, #32]	; (8007bec <prvPortStartFirstTask+0x24>)
 8007bca:	6800      	ldr	r0, [r0, #0]
 8007bcc:	6800      	ldr	r0, [r0, #0]
 8007bce:	f380 8808 	msr	MSP, r0
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8814 	msr	CONTROL, r0
 8007bda:	b662      	cpsie	i
 8007bdc:	b661      	cpsie	f
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	df00      	svc	0
 8007be8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bea:	bf00      	nop
 8007bec:	e000ed08 	.word	0xe000ed08

08007bf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bf6:	4b46      	ldr	r3, [pc, #280]	; (8007d10 <xPortStartScheduler+0x120>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a46      	ldr	r2, [pc, #280]	; (8007d14 <xPortStartScheduler+0x124>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10a      	bne.n	8007c16 <xPortStartScheduler+0x26>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	613b      	str	r3, [r7, #16]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c16:	4b3e      	ldr	r3, [pc, #248]	; (8007d10 <xPortStartScheduler+0x120>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a3f      	ldr	r2, [pc, #252]	; (8007d18 <xPortStartScheduler+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10a      	bne.n	8007c36 <xPortStartScheduler+0x46>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	60fb      	str	r3, [r7, #12]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c36:	4b39      	ldr	r3, [pc, #228]	; (8007d1c <xPortStartScheduler+0x12c>)
 8007c38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	22ff      	movs	r2, #255	; 0xff
 8007c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	4b31      	ldr	r3, [pc, #196]	; (8007d20 <xPortStartScheduler+0x130>)
 8007c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c5e:	4b31      	ldr	r3, [pc, #196]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c60:	2207      	movs	r2, #7
 8007c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c64:	e009      	b.n	8007c7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c66:	4b2f      	ldr	r3, [pc, #188]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a2d      	ldr	r2, [pc, #180]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b80      	cmp	r3, #128	; 0x80
 8007c84:	d0ef      	beq.n	8007c66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c86:	4b27      	ldr	r3, [pc, #156]	; (8007d24 <xPortStartScheduler+0x134>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1c3 0307 	rsb	r3, r3, #7
 8007c8e:	2b04      	cmp	r3, #4
 8007c90:	d00a      	beq.n	8007ca8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	60bb      	str	r3, [r7, #8]
}
 8007ca4:	bf00      	nop
 8007ca6:	e7fe      	b.n	8007ca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ca8:	4b1e      	ldr	r3, [pc, #120]	; (8007d24 <xPortStartScheduler+0x134>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	021b      	lsls	r3, r3, #8
 8007cae:	4a1d      	ldr	r2, [pc, #116]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cb2:	4b1c      	ldr	r3, [pc, #112]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cba:	4a1a      	ldr	r2, [pc, #104]	; (8007d24 <xPortStartScheduler+0x134>)
 8007cbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cc6:	4b18      	ldr	r3, [pc, #96]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <xPortStartScheduler+0x138>)
 8007ccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cd2:	4b15      	ldr	r3, [pc, #84]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a14      	ldr	r2, [pc, #80]	; (8007d28 <xPortStartScheduler+0x138>)
 8007cd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cde:	f000 f8dd 	bl	8007e9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ce2:	4b12      	ldr	r3, [pc, #72]	; (8007d2c <xPortStartScheduler+0x13c>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ce8:	f000 f8fc 	bl	8007ee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007cec:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a0f      	ldr	r2, [pc, #60]	; (8007d30 <xPortStartScheduler+0x140>)
 8007cf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cf8:	f7ff ff66 	bl	8007bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cfc:	f7fe ff44 	bl	8006b88 <vTaskSwitchContext>
	prvTaskExitError();
 8007d00:	f7ff ff1e 	bl	8007b40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	bf00      	nop
 8007d10:	e000ed00 	.word	0xe000ed00
 8007d14:	410fc271 	.word	0x410fc271
 8007d18:	410fc270 	.word	0x410fc270
 8007d1c:	e000e400 	.word	0xe000e400
 8007d20:	20000f6c 	.word	0x20000f6c
 8007d24:	20000f70 	.word	0x20000f70
 8007d28:	e000ed20 	.word	0xe000ed20
 8007d2c:	2000005c 	.word	0x2000005c
 8007d30:	e000ef34 	.word	0xe000ef34

08007d34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
	__asm volatile
 8007d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	607b      	str	r3, [r7, #4]
}
 8007d4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3301      	adds	r3, #1
 8007d54:	4a0d      	ldr	r2, [pc, #52]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <vPortEnterCritical+0x58>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d10f      	bne.n	8007d80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d60:	4b0b      	ldr	r3, [pc, #44]	; (8007d90 <vPortEnterCritical+0x5c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	603b      	str	r3, [r7, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <vPortEnterCritical+0x4a>
	}
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	2000005c 	.word	0x2000005c
 8007d90:	e000ed04 	.word	0xe000ed04

08007d94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <vPortExitCritical+0x50>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <vPortExitCritical+0x24>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	607b      	str	r3, [r7, #4]
}
 8007db4:	bf00      	nop
 8007db6:	e7fe      	b.n	8007db6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007db8:	4b0a      	ldr	r3, [pc, #40]	; (8007de4 <vPortExitCritical+0x50>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	4a09      	ldr	r2, [pc, #36]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dc2:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <vPortExitCritical+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <vPortExitCritical+0x42>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f383 8811 	msr	BASEPRI, r3
}
 8007dd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	2000005c 	.word	0x2000005c
	...

08007df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007df0:	f3ef 8009 	mrs	r0, PSP
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <pxCurrentTCBConst>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	f01e 0f10 	tst.w	lr, #16
 8007e00:	bf08      	it	eq
 8007e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0a:	6010      	str	r0, [r2, #0]
 8007e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e14:	f380 8811 	msr	BASEPRI, r0
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f7fe feb2 	bl	8006b88 <vTaskSwitchContext>
 8007e24:	f04f 0000 	mov.w	r0, #0
 8007e28:	f380 8811 	msr	BASEPRI, r0
 8007e2c:	bc09      	pop	{r0, r3}
 8007e2e:	6819      	ldr	r1, [r3, #0]
 8007e30:	6808      	ldr	r0, [r1, #0]
 8007e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e36:	f01e 0f10 	tst.w	lr, #16
 8007e3a:	bf08      	it	eq
 8007e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e40:	f380 8809 	msr	PSP, r0
 8007e44:	f3bf 8f6f 	isb	sy
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	f3af 8000 	nop.w

08007e50 <pxCurrentTCBConst>:
 8007e50:	20000940 	.word	0x20000940
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop

08007e58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	607b      	str	r3, [r7, #4]
}
 8007e70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e72:	f7fe fdcf 	bl	8006a14 <xTaskIncrementTick>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e7c:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <xPortSysTickHandler+0x40>)
 8007e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	2300      	movs	r3, #0
 8007e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f383 8811 	msr	BASEPRI, r3
}
 8007e8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e90:	bf00      	nop
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ea0:	4b0b      	ldr	r3, [pc, #44]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ea6:	4b0b      	ldr	r3, [pc, #44]	; (8007ed4 <vPortSetupTimerInterrupt+0x38>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007eac:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <vPortSetupTimerInterrupt+0x3c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <vPortSetupTimerInterrupt+0x40>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	099b      	lsrs	r3, r3, #6
 8007eb8:	4a09      	ldr	r2, [pc, #36]	; (8007ee0 <vPortSetupTimerInterrupt+0x44>)
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ebe:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <vPortSetupTimerInterrupt+0x34>)
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	601a      	str	r2, [r3, #0]
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr
 8007ece:	bf00      	nop
 8007ed0:	e000e010 	.word	0xe000e010
 8007ed4:	e000e018 	.word	0xe000e018
 8007ed8:	20000050 	.word	0x20000050
 8007edc:	10624dd3 	.word	0x10624dd3
 8007ee0:	e000e014 	.word	0xe000e014

08007ee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ef4 <vPortEnableVFP+0x10>
 8007ee8:	6801      	ldr	r1, [r0, #0]
 8007eea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007eee:	6001      	str	r1, [r0, #0]
 8007ef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ef2:	bf00      	nop
 8007ef4:	e000ed88 	.word	0xe000ed88

08007ef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007efe:	f3ef 8305 	mrs	r3, IPSR
 8007f02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	d914      	bls.n	8007f34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f0a:	4a17      	ldr	r2, [pc, #92]	; (8007f68 <vPortValidateInterruptPriority+0x70>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	4413      	add	r3, r2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f14:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <vPortValidateInterruptPriority+0x74>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	7afa      	ldrb	r2, [r7, #11]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d20a      	bcs.n	8007f34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	607b      	str	r3, [r7, #4]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <vPortValidateInterruptPriority+0x78>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f3c:	4b0d      	ldr	r3, [pc, #52]	; (8007f74 <vPortValidateInterruptPriority+0x7c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d90a      	bls.n	8007f5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	603b      	str	r3, [r7, #0]
}
 8007f56:	bf00      	nop
 8007f58:	e7fe      	b.n	8007f58 <vPortValidateInterruptPriority+0x60>
	}
 8007f5a:	bf00      	nop
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	e000e3f0 	.word	0xe000e3f0
 8007f6c:	20000f6c 	.word	0x20000f6c
 8007f70:	e000ed0c 	.word	0xe000ed0c
 8007f74:	20000f70 	.word	0x20000f70

08007f78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	; 0x28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007f84:	f7fe fc78 	bl	8006878 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007f88:	4b5b      	ldr	r3, [pc, #364]	; (80080f8 <pvPortMalloc+0x180>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f90:	f000 f920 	bl	80081d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f94:	4b59      	ldr	r3, [pc, #356]	; (80080fc <pvPortMalloc+0x184>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f040 8093 	bne.w	80080c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d01d      	beq.n	8007fe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fa8:	2208      	movs	r2, #8
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d014      	beq.n	8007fe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f023 0307 	bic.w	r3, r3, #7
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <pvPortMalloc+0x6c>
	__asm volatile
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	617b      	str	r3, [r7, #20]
}
 8007fe0:	bf00      	nop
 8007fe2:	e7fe      	b.n	8007fe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d06e      	beq.n	80080c8 <pvPortMalloc+0x150>
 8007fea:	4b45      	ldr	r3, [pc, #276]	; (8008100 <pvPortMalloc+0x188>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d869      	bhi.n	80080c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ff4:	4b43      	ldr	r3, [pc, #268]	; (8008104 <pvPortMalloc+0x18c>)
 8007ff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ff8:	4b42      	ldr	r3, [pc, #264]	; (8008104 <pvPortMalloc+0x18c>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ffe:	e004      	b.n	800800a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	429a      	cmp	r2, r3
 8008012:	d903      	bls.n	800801c <pvPortMalloc+0xa4>
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1f1      	bne.n	8008000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800801c:	4b36      	ldr	r3, [pc, #216]	; (80080f8 <pvPortMalloc+0x180>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008022:	429a      	cmp	r2, r3
 8008024:	d050      	beq.n	80080c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2208      	movs	r2, #8
 800802c:	4413      	add	r3, r2
 800802e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	2308      	movs	r3, #8
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	429a      	cmp	r2, r3
 8008046:	d91f      	bls.n	8008088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4413      	add	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <pvPortMalloc+0xf8>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	613b      	str	r3, [r7, #16]
}
 800806c:	bf00      	nop
 800806e:	e7fe      	b.n	800806e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008082:	69b8      	ldr	r0, [r7, #24]
 8008084:	f000 f908 	bl	8008298 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008088:	4b1d      	ldr	r3, [pc, #116]	; (8008100 <pvPortMalloc+0x188>)
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <pvPortMalloc+0x188>)
 8008094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008096:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <pvPortMalloc+0x188>)
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <pvPortMalloc+0x190>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d203      	bcs.n	80080aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080a2:	4b17      	ldr	r3, [pc, #92]	; (8008100 <pvPortMalloc+0x188>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a18      	ldr	r2, [pc, #96]	; (8008108 <pvPortMalloc+0x190>)
 80080a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	4b13      	ldr	r3, [pc, #76]	; (80080fc <pvPortMalloc+0x184>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	431a      	orrs	r2, r3
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080be:	4b13      	ldr	r3, [pc, #76]	; (800810c <pvPortMalloc+0x194>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a11      	ldr	r2, [pc, #68]	; (800810c <pvPortMalloc+0x194>)
 80080c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080c8:	f7fe fbe4 	bl	8006894 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00a      	beq.n	80080ec <pvPortMalloc+0x174>
	__asm volatile
 80080d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080da:	f383 8811 	msr	BASEPRI, r3
 80080de:	f3bf 8f6f 	isb	sy
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	60fb      	str	r3, [r7, #12]
}
 80080e8:	bf00      	nop
 80080ea:	e7fe      	b.n	80080ea <pvPortMalloc+0x172>
	return pvReturn;
 80080ec:	69fb      	ldr	r3, [r7, #28]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	; 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	20004b7c 	.word	0x20004b7c
 80080fc:	20004b90 	.word	0x20004b90
 8008100:	20004b80 	.word	0x20004b80
 8008104:	20004b74 	.word	0x20004b74
 8008108:	20004b84 	.word	0x20004b84
 800810c:	20004b88 	.word	0x20004b88

08008110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d04d      	beq.n	80081be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008122:	2308      	movs	r3, #8
 8008124:	425b      	negs	r3, r3
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	4413      	add	r3, r2
 800812a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	4b24      	ldr	r3, [pc, #144]	; (80081c8 <vPortFree+0xb8>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4013      	ands	r3, r2
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10a      	bne.n	8008154 <vPortFree+0x44>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60fb      	str	r3, [r7, #12]
}
 8008150:	bf00      	nop
 8008152:	e7fe      	b.n	8008152 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <vPortFree+0x62>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	60bb      	str	r3, [r7, #8]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	4b14      	ldr	r3, [pc, #80]	; (80081c8 <vPortFree+0xb8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4013      	ands	r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01e      	beq.n	80081be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11a      	bne.n	80081be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	685a      	ldr	r2, [r3, #4]
 800818c:	4b0e      	ldr	r3, [pc, #56]	; (80081c8 <vPortFree+0xb8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	43db      	mvns	r3, r3
 8008192:	401a      	ands	r2, r3
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008198:	f7fe fb6e 	bl	8006878 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <vPortFree+0xbc>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4413      	add	r3, r2
 80081a6:	4a09      	ldr	r2, [pc, #36]	; (80081cc <vPortFree+0xbc>)
 80081a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081aa:	6938      	ldr	r0, [r7, #16]
 80081ac:	f000 f874 	bl	8008298 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081b0:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <vPortFree+0xc0>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a06      	ldr	r2, [pc, #24]	; (80081d0 <vPortFree+0xc0>)
 80081b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081ba:	f7fe fb6b 	bl	8006894 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081be:	bf00      	nop
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20004b90 	.word	0x20004b90
 80081cc:	20004b80 	.word	0x20004b80
 80081d0:	20004b8c 	.word	0x20004b8c

080081d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081e0:	4b27      	ldr	r3, [pc, #156]	; (8008280 <prvHeapInit+0xac>)
 80081e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f003 0307 	and.w	r3, r3, #7
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00c      	beq.n	8008208 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3307      	adds	r3, #7
 80081f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0307 	bic.w	r3, r3, #7
 80081fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	4a1f      	ldr	r2, [pc, #124]	; (8008280 <prvHeapInit+0xac>)
 8008204:	4413      	add	r3, r2
 8008206:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800820c:	4a1d      	ldr	r2, [pc, #116]	; (8008284 <prvHeapInit+0xb0>)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008212:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <prvHeapInit+0xb0>)
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008220:	2208      	movs	r2, #8
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0307 	bic.w	r3, r3, #7
 800822e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4a15      	ldr	r2, [pc, #84]	; (8008288 <prvHeapInit+0xb4>)
 8008234:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <prvHeapInit+0xb4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800823e:	4b12      	ldr	r3, [pc, #72]	; (8008288 <prvHeapInit+0xb4>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	1ad2      	subs	r2, r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008254:	4b0c      	ldr	r3, [pc, #48]	; (8008288 <prvHeapInit+0xb4>)
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4a0a      	ldr	r2, [pc, #40]	; (800828c <prvHeapInit+0xb8>)
 8008262:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <prvHeapInit+0xbc>)
 800826a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800826c:	4b09      	ldr	r3, [pc, #36]	; (8008294 <prvHeapInit+0xc0>)
 800826e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008272:	601a      	str	r2, [r3, #0]
}
 8008274:	bf00      	nop
 8008276:	3714      	adds	r7, #20
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000f74 	.word	0x20000f74
 8008284:	20004b74 	.word	0x20004b74
 8008288:	20004b7c 	.word	0x20004b7c
 800828c:	20004b84 	.word	0x20004b84
 8008290:	20004b80 	.word	0x20004b80
 8008294:	20004b90 	.word	0x20004b90

08008298 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082a0:	4b28      	ldr	r3, [pc, #160]	; (8008344 <prvInsertBlockIntoFreeList+0xac>)
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	e002      	b.n	80082ac <prvInsertBlockIntoFreeList+0x14>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d8f7      	bhi.n	80082a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d108      	bne.n	80082da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	685a      	ldr	r2, [r3, #4]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	441a      	add	r2, r3
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	441a      	add	r2, r3
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d118      	bne.n	8008320 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <prvInsertBlockIntoFreeList+0xb0>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d00d      	beq.n	8008316 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	441a      	add	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	e008      	b.n	8008328 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008316:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <prvInsertBlockIntoFreeList+0xb0>)
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e003      	b.n	8008328 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	429a      	cmp	r2, r3
 800832e:	d002      	beq.n	8008336 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008336:	bf00      	nop
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20004b74 	.word	0x20004b74
 8008348:	20004b7c 	.word	0x20004b7c

0800834c <__errno>:
 800834c:	4b01      	ldr	r3, [pc, #4]	; (8008354 <__errno+0x8>)
 800834e:	6818      	ldr	r0, [r3, #0]
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20000060 	.word	0x20000060

08008358 <__libc_init_array>:
 8008358:	b570      	push	{r4, r5, r6, lr}
 800835a:	4d0d      	ldr	r5, [pc, #52]	; (8008390 <__libc_init_array+0x38>)
 800835c:	4c0d      	ldr	r4, [pc, #52]	; (8008394 <__libc_init_array+0x3c>)
 800835e:	1b64      	subs	r4, r4, r5
 8008360:	10a4      	asrs	r4, r4, #2
 8008362:	2600      	movs	r6, #0
 8008364:	42a6      	cmp	r6, r4
 8008366:	d109      	bne.n	800837c <__libc_init_array+0x24>
 8008368:	4d0b      	ldr	r5, [pc, #44]	; (8008398 <__libc_init_array+0x40>)
 800836a:	4c0c      	ldr	r4, [pc, #48]	; (800839c <__libc_init_array+0x44>)
 800836c:	f000 fc8e 	bl	8008c8c <_init>
 8008370:	1b64      	subs	r4, r4, r5
 8008372:	10a4      	asrs	r4, r4, #2
 8008374:	2600      	movs	r6, #0
 8008376:	42a6      	cmp	r6, r4
 8008378:	d105      	bne.n	8008386 <__libc_init_array+0x2e>
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008380:	4798      	blx	r3
 8008382:	3601      	adds	r6, #1
 8008384:	e7ee      	b.n	8008364 <__libc_init_array+0xc>
 8008386:	f855 3b04 	ldr.w	r3, [r5], #4
 800838a:	4798      	blx	r3
 800838c:	3601      	adds	r6, #1
 800838e:	e7f2      	b.n	8008376 <__libc_init_array+0x1e>
 8008390:	08008e90 	.word	0x08008e90
 8008394:	08008e90 	.word	0x08008e90
 8008398:	08008e90 	.word	0x08008e90
 800839c:	08008e94 	.word	0x08008e94

080083a0 <memcpy>:
 80083a0:	440a      	add	r2, r1
 80083a2:	4291      	cmp	r1, r2
 80083a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083a8:	d100      	bne.n	80083ac <memcpy+0xc>
 80083aa:	4770      	bx	lr
 80083ac:	b510      	push	{r4, lr}
 80083ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b6:	4291      	cmp	r1, r2
 80083b8:	d1f9      	bne.n	80083ae <memcpy+0xe>
 80083ba:	bd10      	pop	{r4, pc}

080083bc <memset>:
 80083bc:	4402      	add	r2, r0
 80083be:	4603      	mov	r3, r0
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d100      	bne.n	80083c6 <memset+0xa>
 80083c4:	4770      	bx	lr
 80083c6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ca:	e7f9      	b.n	80083c0 <memset+0x4>

080083cc <siprintf>:
 80083cc:	b40e      	push	{r1, r2, r3}
 80083ce:	b500      	push	{lr}
 80083d0:	b09c      	sub	sp, #112	; 0x70
 80083d2:	ab1d      	add	r3, sp, #116	; 0x74
 80083d4:	9002      	str	r0, [sp, #8]
 80083d6:	9006      	str	r0, [sp, #24]
 80083d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083dc:	4809      	ldr	r0, [pc, #36]	; (8008404 <siprintf+0x38>)
 80083de:	9107      	str	r1, [sp, #28]
 80083e0:	9104      	str	r1, [sp, #16]
 80083e2:	4909      	ldr	r1, [pc, #36]	; (8008408 <siprintf+0x3c>)
 80083e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80083e8:	9105      	str	r1, [sp, #20]
 80083ea:	6800      	ldr	r0, [r0, #0]
 80083ec:	9301      	str	r3, [sp, #4]
 80083ee:	a902      	add	r1, sp, #8
 80083f0:	f000 f868 	bl	80084c4 <_svfiprintf_r>
 80083f4:	9b02      	ldr	r3, [sp, #8]
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	b01c      	add	sp, #112	; 0x70
 80083fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008400:	b003      	add	sp, #12
 8008402:	4770      	bx	lr
 8008404:	20000060 	.word	0x20000060
 8008408:	ffff0208 	.word	0xffff0208

0800840c <__ssputs_r>:
 800840c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	688e      	ldr	r6, [r1, #8]
 8008412:	429e      	cmp	r6, r3
 8008414:	4682      	mov	sl, r0
 8008416:	460c      	mov	r4, r1
 8008418:	4690      	mov	r8, r2
 800841a:	461f      	mov	r7, r3
 800841c:	d838      	bhi.n	8008490 <__ssputs_r+0x84>
 800841e:	898a      	ldrh	r2, [r1, #12]
 8008420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008424:	d032      	beq.n	800848c <__ssputs_r+0x80>
 8008426:	6825      	ldr	r5, [r4, #0]
 8008428:	6909      	ldr	r1, [r1, #16]
 800842a:	eba5 0901 	sub.w	r9, r5, r1
 800842e:	6965      	ldr	r5, [r4, #20]
 8008430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008434:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008438:	3301      	adds	r3, #1
 800843a:	444b      	add	r3, r9
 800843c:	106d      	asrs	r5, r5, #1
 800843e:	429d      	cmp	r5, r3
 8008440:	bf38      	it	cc
 8008442:	461d      	movcc	r5, r3
 8008444:	0553      	lsls	r3, r2, #21
 8008446:	d531      	bpl.n	80084ac <__ssputs_r+0xa0>
 8008448:	4629      	mov	r1, r5
 800844a:	f000 fb55 	bl	8008af8 <_malloc_r>
 800844e:	4606      	mov	r6, r0
 8008450:	b950      	cbnz	r0, 8008468 <__ssputs_r+0x5c>
 8008452:	230c      	movs	r3, #12
 8008454:	f8ca 3000 	str.w	r3, [sl]
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008468:	6921      	ldr	r1, [r4, #16]
 800846a:	464a      	mov	r2, r9
 800846c:	f7ff ff98 	bl	80083a0 <memcpy>
 8008470:	89a3      	ldrh	r3, [r4, #12]
 8008472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800847a:	81a3      	strh	r3, [r4, #12]
 800847c:	6126      	str	r6, [r4, #16]
 800847e:	6165      	str	r5, [r4, #20]
 8008480:	444e      	add	r6, r9
 8008482:	eba5 0509 	sub.w	r5, r5, r9
 8008486:	6026      	str	r6, [r4, #0]
 8008488:	60a5      	str	r5, [r4, #8]
 800848a:	463e      	mov	r6, r7
 800848c:	42be      	cmp	r6, r7
 800848e:	d900      	bls.n	8008492 <__ssputs_r+0x86>
 8008490:	463e      	mov	r6, r7
 8008492:	6820      	ldr	r0, [r4, #0]
 8008494:	4632      	mov	r2, r6
 8008496:	4641      	mov	r1, r8
 8008498:	f000 faa8 	bl	80089ec <memmove>
 800849c:	68a3      	ldr	r3, [r4, #8]
 800849e:	1b9b      	subs	r3, r3, r6
 80084a0:	60a3      	str	r3, [r4, #8]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	4433      	add	r3, r6
 80084a6:	6023      	str	r3, [r4, #0]
 80084a8:	2000      	movs	r0, #0
 80084aa:	e7db      	b.n	8008464 <__ssputs_r+0x58>
 80084ac:	462a      	mov	r2, r5
 80084ae:	f000 fb97 	bl	8008be0 <_realloc_r>
 80084b2:	4606      	mov	r6, r0
 80084b4:	2800      	cmp	r0, #0
 80084b6:	d1e1      	bne.n	800847c <__ssputs_r+0x70>
 80084b8:	6921      	ldr	r1, [r4, #16]
 80084ba:	4650      	mov	r0, sl
 80084bc:	f000 fab0 	bl	8008a20 <_free_r>
 80084c0:	e7c7      	b.n	8008452 <__ssputs_r+0x46>
	...

080084c4 <_svfiprintf_r>:
 80084c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c8:	4698      	mov	r8, r3
 80084ca:	898b      	ldrh	r3, [r1, #12]
 80084cc:	061b      	lsls	r3, r3, #24
 80084ce:	b09d      	sub	sp, #116	; 0x74
 80084d0:	4607      	mov	r7, r0
 80084d2:	460d      	mov	r5, r1
 80084d4:	4614      	mov	r4, r2
 80084d6:	d50e      	bpl.n	80084f6 <_svfiprintf_r+0x32>
 80084d8:	690b      	ldr	r3, [r1, #16]
 80084da:	b963      	cbnz	r3, 80084f6 <_svfiprintf_r+0x32>
 80084dc:	2140      	movs	r1, #64	; 0x40
 80084de:	f000 fb0b 	bl	8008af8 <_malloc_r>
 80084e2:	6028      	str	r0, [r5, #0]
 80084e4:	6128      	str	r0, [r5, #16]
 80084e6:	b920      	cbnz	r0, 80084f2 <_svfiprintf_r+0x2e>
 80084e8:	230c      	movs	r3, #12
 80084ea:	603b      	str	r3, [r7, #0]
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	e0d1      	b.n	8008696 <_svfiprintf_r+0x1d2>
 80084f2:	2340      	movs	r3, #64	; 0x40
 80084f4:	616b      	str	r3, [r5, #20]
 80084f6:	2300      	movs	r3, #0
 80084f8:	9309      	str	r3, [sp, #36]	; 0x24
 80084fa:	2320      	movs	r3, #32
 80084fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008500:	f8cd 800c 	str.w	r8, [sp, #12]
 8008504:	2330      	movs	r3, #48	; 0x30
 8008506:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80086b0 <_svfiprintf_r+0x1ec>
 800850a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800850e:	f04f 0901 	mov.w	r9, #1
 8008512:	4623      	mov	r3, r4
 8008514:	469a      	mov	sl, r3
 8008516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800851a:	b10a      	cbz	r2, 8008520 <_svfiprintf_r+0x5c>
 800851c:	2a25      	cmp	r2, #37	; 0x25
 800851e:	d1f9      	bne.n	8008514 <_svfiprintf_r+0x50>
 8008520:	ebba 0b04 	subs.w	fp, sl, r4
 8008524:	d00b      	beq.n	800853e <_svfiprintf_r+0x7a>
 8008526:	465b      	mov	r3, fp
 8008528:	4622      	mov	r2, r4
 800852a:	4629      	mov	r1, r5
 800852c:	4638      	mov	r0, r7
 800852e:	f7ff ff6d 	bl	800840c <__ssputs_r>
 8008532:	3001      	adds	r0, #1
 8008534:	f000 80aa 	beq.w	800868c <_svfiprintf_r+0x1c8>
 8008538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800853a:	445a      	add	r2, fp
 800853c:	9209      	str	r2, [sp, #36]	; 0x24
 800853e:	f89a 3000 	ldrb.w	r3, [sl]
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 80a2 	beq.w	800868c <_svfiprintf_r+0x1c8>
 8008548:	2300      	movs	r3, #0
 800854a:	f04f 32ff 	mov.w	r2, #4294967295
 800854e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008552:	f10a 0a01 	add.w	sl, sl, #1
 8008556:	9304      	str	r3, [sp, #16]
 8008558:	9307      	str	r3, [sp, #28]
 800855a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800855e:	931a      	str	r3, [sp, #104]	; 0x68
 8008560:	4654      	mov	r4, sl
 8008562:	2205      	movs	r2, #5
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	4851      	ldr	r0, [pc, #324]	; (80086b0 <_svfiprintf_r+0x1ec>)
 800856a:	f7f7 fe59 	bl	8000220 <memchr>
 800856e:	9a04      	ldr	r2, [sp, #16]
 8008570:	b9d8      	cbnz	r0, 80085aa <_svfiprintf_r+0xe6>
 8008572:	06d0      	lsls	r0, r2, #27
 8008574:	bf44      	itt	mi
 8008576:	2320      	movmi	r3, #32
 8008578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800857c:	0711      	lsls	r1, r2, #28
 800857e:	bf44      	itt	mi
 8008580:	232b      	movmi	r3, #43	; 0x2b
 8008582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008586:	f89a 3000 	ldrb.w	r3, [sl]
 800858a:	2b2a      	cmp	r3, #42	; 0x2a
 800858c:	d015      	beq.n	80085ba <_svfiprintf_r+0xf6>
 800858e:	9a07      	ldr	r2, [sp, #28]
 8008590:	4654      	mov	r4, sl
 8008592:	2000      	movs	r0, #0
 8008594:	f04f 0c0a 	mov.w	ip, #10
 8008598:	4621      	mov	r1, r4
 800859a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800859e:	3b30      	subs	r3, #48	; 0x30
 80085a0:	2b09      	cmp	r3, #9
 80085a2:	d94e      	bls.n	8008642 <_svfiprintf_r+0x17e>
 80085a4:	b1b0      	cbz	r0, 80085d4 <_svfiprintf_r+0x110>
 80085a6:	9207      	str	r2, [sp, #28]
 80085a8:	e014      	b.n	80085d4 <_svfiprintf_r+0x110>
 80085aa:	eba0 0308 	sub.w	r3, r0, r8
 80085ae:	fa09 f303 	lsl.w	r3, r9, r3
 80085b2:	4313      	orrs	r3, r2
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	46a2      	mov	sl, r4
 80085b8:	e7d2      	b.n	8008560 <_svfiprintf_r+0x9c>
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	1d19      	adds	r1, r3, #4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	9103      	str	r1, [sp, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	bfbb      	ittet	lt
 80085c6:	425b      	neglt	r3, r3
 80085c8:	f042 0202 	orrlt.w	r2, r2, #2
 80085cc:	9307      	strge	r3, [sp, #28]
 80085ce:	9307      	strlt	r3, [sp, #28]
 80085d0:	bfb8      	it	lt
 80085d2:	9204      	strlt	r2, [sp, #16]
 80085d4:	7823      	ldrb	r3, [r4, #0]
 80085d6:	2b2e      	cmp	r3, #46	; 0x2e
 80085d8:	d10c      	bne.n	80085f4 <_svfiprintf_r+0x130>
 80085da:	7863      	ldrb	r3, [r4, #1]
 80085dc:	2b2a      	cmp	r3, #42	; 0x2a
 80085de:	d135      	bne.n	800864c <_svfiprintf_r+0x188>
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	1d1a      	adds	r2, r3, #4
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	9203      	str	r2, [sp, #12]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	bfb8      	it	lt
 80085ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80085f0:	3402      	adds	r4, #2
 80085f2:	9305      	str	r3, [sp, #20]
 80085f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086c0 <_svfiprintf_r+0x1fc>
 80085f8:	7821      	ldrb	r1, [r4, #0]
 80085fa:	2203      	movs	r2, #3
 80085fc:	4650      	mov	r0, sl
 80085fe:	f7f7 fe0f 	bl	8000220 <memchr>
 8008602:	b140      	cbz	r0, 8008616 <_svfiprintf_r+0x152>
 8008604:	2340      	movs	r3, #64	; 0x40
 8008606:	eba0 000a 	sub.w	r0, r0, sl
 800860a:	fa03 f000 	lsl.w	r0, r3, r0
 800860e:	9b04      	ldr	r3, [sp, #16]
 8008610:	4303      	orrs	r3, r0
 8008612:	3401      	adds	r4, #1
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861a:	4826      	ldr	r0, [pc, #152]	; (80086b4 <_svfiprintf_r+0x1f0>)
 800861c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008620:	2206      	movs	r2, #6
 8008622:	f7f7 fdfd 	bl	8000220 <memchr>
 8008626:	2800      	cmp	r0, #0
 8008628:	d038      	beq.n	800869c <_svfiprintf_r+0x1d8>
 800862a:	4b23      	ldr	r3, [pc, #140]	; (80086b8 <_svfiprintf_r+0x1f4>)
 800862c:	bb1b      	cbnz	r3, 8008676 <_svfiprintf_r+0x1b2>
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	3307      	adds	r3, #7
 8008632:	f023 0307 	bic.w	r3, r3, #7
 8008636:	3308      	adds	r3, #8
 8008638:	9303      	str	r3, [sp, #12]
 800863a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800863c:	4433      	add	r3, r6
 800863e:	9309      	str	r3, [sp, #36]	; 0x24
 8008640:	e767      	b.n	8008512 <_svfiprintf_r+0x4e>
 8008642:	fb0c 3202 	mla	r2, ip, r2, r3
 8008646:	460c      	mov	r4, r1
 8008648:	2001      	movs	r0, #1
 800864a:	e7a5      	b.n	8008598 <_svfiprintf_r+0xd4>
 800864c:	2300      	movs	r3, #0
 800864e:	3401      	adds	r4, #1
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	4619      	mov	r1, r3
 8008654:	f04f 0c0a 	mov.w	ip, #10
 8008658:	4620      	mov	r0, r4
 800865a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800865e:	3a30      	subs	r2, #48	; 0x30
 8008660:	2a09      	cmp	r2, #9
 8008662:	d903      	bls.n	800866c <_svfiprintf_r+0x1a8>
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0c5      	beq.n	80085f4 <_svfiprintf_r+0x130>
 8008668:	9105      	str	r1, [sp, #20]
 800866a:	e7c3      	b.n	80085f4 <_svfiprintf_r+0x130>
 800866c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008670:	4604      	mov	r4, r0
 8008672:	2301      	movs	r3, #1
 8008674:	e7f0      	b.n	8008658 <_svfiprintf_r+0x194>
 8008676:	ab03      	add	r3, sp, #12
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	462a      	mov	r2, r5
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <_svfiprintf_r+0x1f8>)
 800867e:	a904      	add	r1, sp, #16
 8008680:	4638      	mov	r0, r7
 8008682:	f3af 8000 	nop.w
 8008686:	1c42      	adds	r2, r0, #1
 8008688:	4606      	mov	r6, r0
 800868a:	d1d6      	bne.n	800863a <_svfiprintf_r+0x176>
 800868c:	89ab      	ldrh	r3, [r5, #12]
 800868e:	065b      	lsls	r3, r3, #25
 8008690:	f53f af2c 	bmi.w	80084ec <_svfiprintf_r+0x28>
 8008694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008696:	b01d      	add	sp, #116	; 0x74
 8008698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869c:	ab03      	add	r3, sp, #12
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	462a      	mov	r2, r5
 80086a2:	4b06      	ldr	r3, [pc, #24]	; (80086bc <_svfiprintf_r+0x1f8>)
 80086a4:	a904      	add	r1, sp, #16
 80086a6:	4638      	mov	r0, r7
 80086a8:	f000 f87a 	bl	80087a0 <_printf_i>
 80086ac:	e7eb      	b.n	8008686 <_svfiprintf_r+0x1c2>
 80086ae:	bf00      	nop
 80086b0:	08008e54 	.word	0x08008e54
 80086b4:	08008e5e 	.word	0x08008e5e
 80086b8:	00000000 	.word	0x00000000
 80086bc:	0800840d 	.word	0x0800840d
 80086c0:	08008e5a 	.word	0x08008e5a

080086c4 <_printf_common>:
 80086c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086c8:	4616      	mov	r6, r2
 80086ca:	4699      	mov	r9, r3
 80086cc:	688a      	ldr	r2, [r1, #8]
 80086ce:	690b      	ldr	r3, [r1, #16]
 80086d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bfb8      	it	lt
 80086d8:	4613      	movlt	r3, r2
 80086da:	6033      	str	r3, [r6, #0]
 80086dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086e0:	4607      	mov	r7, r0
 80086e2:	460c      	mov	r4, r1
 80086e4:	b10a      	cbz	r2, 80086ea <_printf_common+0x26>
 80086e6:	3301      	adds	r3, #1
 80086e8:	6033      	str	r3, [r6, #0]
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	0699      	lsls	r1, r3, #26
 80086ee:	bf42      	ittt	mi
 80086f0:	6833      	ldrmi	r3, [r6, #0]
 80086f2:	3302      	addmi	r3, #2
 80086f4:	6033      	strmi	r3, [r6, #0]
 80086f6:	6825      	ldr	r5, [r4, #0]
 80086f8:	f015 0506 	ands.w	r5, r5, #6
 80086fc:	d106      	bne.n	800870c <_printf_common+0x48>
 80086fe:	f104 0a19 	add.w	sl, r4, #25
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	6832      	ldr	r2, [r6, #0]
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	42ab      	cmp	r3, r5
 800870a:	dc26      	bgt.n	800875a <_printf_common+0x96>
 800870c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008710:	1e13      	subs	r3, r2, #0
 8008712:	6822      	ldr	r2, [r4, #0]
 8008714:	bf18      	it	ne
 8008716:	2301      	movne	r3, #1
 8008718:	0692      	lsls	r2, r2, #26
 800871a:	d42b      	bmi.n	8008774 <_printf_common+0xb0>
 800871c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008720:	4649      	mov	r1, r9
 8008722:	4638      	mov	r0, r7
 8008724:	47c0      	blx	r8
 8008726:	3001      	adds	r0, #1
 8008728:	d01e      	beq.n	8008768 <_printf_common+0xa4>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	68e5      	ldr	r5, [r4, #12]
 800872e:	6832      	ldr	r2, [r6, #0]
 8008730:	f003 0306 	and.w	r3, r3, #6
 8008734:	2b04      	cmp	r3, #4
 8008736:	bf08      	it	eq
 8008738:	1aad      	subeq	r5, r5, r2
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	6922      	ldr	r2, [r4, #16]
 800873e:	bf0c      	ite	eq
 8008740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008744:	2500      	movne	r5, #0
 8008746:	4293      	cmp	r3, r2
 8008748:	bfc4      	itt	gt
 800874a:	1a9b      	subgt	r3, r3, r2
 800874c:	18ed      	addgt	r5, r5, r3
 800874e:	2600      	movs	r6, #0
 8008750:	341a      	adds	r4, #26
 8008752:	42b5      	cmp	r5, r6
 8008754:	d11a      	bne.n	800878c <_printf_common+0xc8>
 8008756:	2000      	movs	r0, #0
 8008758:	e008      	b.n	800876c <_printf_common+0xa8>
 800875a:	2301      	movs	r3, #1
 800875c:	4652      	mov	r2, sl
 800875e:	4649      	mov	r1, r9
 8008760:	4638      	mov	r0, r7
 8008762:	47c0      	blx	r8
 8008764:	3001      	adds	r0, #1
 8008766:	d103      	bne.n	8008770 <_printf_common+0xac>
 8008768:	f04f 30ff 	mov.w	r0, #4294967295
 800876c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008770:	3501      	adds	r5, #1
 8008772:	e7c6      	b.n	8008702 <_printf_common+0x3e>
 8008774:	18e1      	adds	r1, r4, r3
 8008776:	1c5a      	adds	r2, r3, #1
 8008778:	2030      	movs	r0, #48	; 0x30
 800877a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800877e:	4422      	add	r2, r4
 8008780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008784:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008788:	3302      	adds	r3, #2
 800878a:	e7c7      	b.n	800871c <_printf_common+0x58>
 800878c:	2301      	movs	r3, #1
 800878e:	4622      	mov	r2, r4
 8008790:	4649      	mov	r1, r9
 8008792:	4638      	mov	r0, r7
 8008794:	47c0      	blx	r8
 8008796:	3001      	adds	r0, #1
 8008798:	d0e6      	beq.n	8008768 <_printf_common+0xa4>
 800879a:	3601      	adds	r6, #1
 800879c:	e7d9      	b.n	8008752 <_printf_common+0x8e>
	...

080087a0 <_printf_i>:
 80087a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087a4:	7e0f      	ldrb	r7, [r1, #24]
 80087a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087a8:	2f78      	cmp	r7, #120	; 0x78
 80087aa:	4691      	mov	r9, r2
 80087ac:	4680      	mov	r8, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	469a      	mov	sl, r3
 80087b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087b6:	d807      	bhi.n	80087c8 <_printf_i+0x28>
 80087b8:	2f62      	cmp	r7, #98	; 0x62
 80087ba:	d80a      	bhi.n	80087d2 <_printf_i+0x32>
 80087bc:	2f00      	cmp	r7, #0
 80087be:	f000 80d8 	beq.w	8008972 <_printf_i+0x1d2>
 80087c2:	2f58      	cmp	r7, #88	; 0x58
 80087c4:	f000 80a3 	beq.w	800890e <_printf_i+0x16e>
 80087c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80087d0:	e03a      	b.n	8008848 <_printf_i+0xa8>
 80087d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087d6:	2b15      	cmp	r3, #21
 80087d8:	d8f6      	bhi.n	80087c8 <_printf_i+0x28>
 80087da:	a101      	add	r1, pc, #4	; (adr r1, 80087e0 <_printf_i+0x40>)
 80087dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087e0:	08008839 	.word	0x08008839
 80087e4:	0800884d 	.word	0x0800884d
 80087e8:	080087c9 	.word	0x080087c9
 80087ec:	080087c9 	.word	0x080087c9
 80087f0:	080087c9 	.word	0x080087c9
 80087f4:	080087c9 	.word	0x080087c9
 80087f8:	0800884d 	.word	0x0800884d
 80087fc:	080087c9 	.word	0x080087c9
 8008800:	080087c9 	.word	0x080087c9
 8008804:	080087c9 	.word	0x080087c9
 8008808:	080087c9 	.word	0x080087c9
 800880c:	08008959 	.word	0x08008959
 8008810:	0800887d 	.word	0x0800887d
 8008814:	0800893b 	.word	0x0800893b
 8008818:	080087c9 	.word	0x080087c9
 800881c:	080087c9 	.word	0x080087c9
 8008820:	0800897b 	.word	0x0800897b
 8008824:	080087c9 	.word	0x080087c9
 8008828:	0800887d 	.word	0x0800887d
 800882c:	080087c9 	.word	0x080087c9
 8008830:	080087c9 	.word	0x080087c9
 8008834:	08008943 	.word	0x08008943
 8008838:	682b      	ldr	r3, [r5, #0]
 800883a:	1d1a      	adds	r2, r3, #4
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	602a      	str	r2, [r5, #0]
 8008840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008848:	2301      	movs	r3, #1
 800884a:	e0a3      	b.n	8008994 <_printf_i+0x1f4>
 800884c:	6820      	ldr	r0, [r4, #0]
 800884e:	6829      	ldr	r1, [r5, #0]
 8008850:	0606      	lsls	r6, r0, #24
 8008852:	f101 0304 	add.w	r3, r1, #4
 8008856:	d50a      	bpl.n	800886e <_printf_i+0xce>
 8008858:	680e      	ldr	r6, [r1, #0]
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	2e00      	cmp	r6, #0
 800885e:	da03      	bge.n	8008868 <_printf_i+0xc8>
 8008860:	232d      	movs	r3, #45	; 0x2d
 8008862:	4276      	negs	r6, r6
 8008864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008868:	485e      	ldr	r0, [pc, #376]	; (80089e4 <_printf_i+0x244>)
 800886a:	230a      	movs	r3, #10
 800886c:	e019      	b.n	80088a2 <_printf_i+0x102>
 800886e:	680e      	ldr	r6, [r1, #0]
 8008870:	602b      	str	r3, [r5, #0]
 8008872:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008876:	bf18      	it	ne
 8008878:	b236      	sxthne	r6, r6
 800887a:	e7ef      	b.n	800885c <_printf_i+0xbc>
 800887c:	682b      	ldr	r3, [r5, #0]
 800887e:	6820      	ldr	r0, [r4, #0]
 8008880:	1d19      	adds	r1, r3, #4
 8008882:	6029      	str	r1, [r5, #0]
 8008884:	0601      	lsls	r1, r0, #24
 8008886:	d501      	bpl.n	800888c <_printf_i+0xec>
 8008888:	681e      	ldr	r6, [r3, #0]
 800888a:	e002      	b.n	8008892 <_printf_i+0xf2>
 800888c:	0646      	lsls	r6, r0, #25
 800888e:	d5fb      	bpl.n	8008888 <_printf_i+0xe8>
 8008890:	881e      	ldrh	r6, [r3, #0]
 8008892:	4854      	ldr	r0, [pc, #336]	; (80089e4 <_printf_i+0x244>)
 8008894:	2f6f      	cmp	r7, #111	; 0x6f
 8008896:	bf0c      	ite	eq
 8008898:	2308      	moveq	r3, #8
 800889a:	230a      	movne	r3, #10
 800889c:	2100      	movs	r1, #0
 800889e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088a2:	6865      	ldr	r5, [r4, #4]
 80088a4:	60a5      	str	r5, [r4, #8]
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	bfa2      	ittt	ge
 80088aa:	6821      	ldrge	r1, [r4, #0]
 80088ac:	f021 0104 	bicge.w	r1, r1, #4
 80088b0:	6021      	strge	r1, [r4, #0]
 80088b2:	b90e      	cbnz	r6, 80088b8 <_printf_i+0x118>
 80088b4:	2d00      	cmp	r5, #0
 80088b6:	d04d      	beq.n	8008954 <_printf_i+0x1b4>
 80088b8:	4615      	mov	r5, r2
 80088ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80088be:	fb03 6711 	mls	r7, r3, r1, r6
 80088c2:	5dc7      	ldrb	r7, [r0, r7]
 80088c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088c8:	4637      	mov	r7, r6
 80088ca:	42bb      	cmp	r3, r7
 80088cc:	460e      	mov	r6, r1
 80088ce:	d9f4      	bls.n	80088ba <_printf_i+0x11a>
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d10b      	bne.n	80088ec <_printf_i+0x14c>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	07de      	lsls	r6, r3, #31
 80088d8:	d508      	bpl.n	80088ec <_printf_i+0x14c>
 80088da:	6923      	ldr	r3, [r4, #16]
 80088dc:	6861      	ldr	r1, [r4, #4]
 80088de:	4299      	cmp	r1, r3
 80088e0:	bfde      	ittt	le
 80088e2:	2330      	movle	r3, #48	; 0x30
 80088e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088ec:	1b52      	subs	r2, r2, r5
 80088ee:	6122      	str	r2, [r4, #16]
 80088f0:	f8cd a000 	str.w	sl, [sp]
 80088f4:	464b      	mov	r3, r9
 80088f6:	aa03      	add	r2, sp, #12
 80088f8:	4621      	mov	r1, r4
 80088fa:	4640      	mov	r0, r8
 80088fc:	f7ff fee2 	bl	80086c4 <_printf_common>
 8008900:	3001      	adds	r0, #1
 8008902:	d14c      	bne.n	800899e <_printf_i+0x1fe>
 8008904:	f04f 30ff 	mov.w	r0, #4294967295
 8008908:	b004      	add	sp, #16
 800890a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800890e:	4835      	ldr	r0, [pc, #212]	; (80089e4 <_printf_i+0x244>)
 8008910:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008914:	6829      	ldr	r1, [r5, #0]
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	f851 6b04 	ldr.w	r6, [r1], #4
 800891c:	6029      	str	r1, [r5, #0]
 800891e:	061d      	lsls	r5, r3, #24
 8008920:	d514      	bpl.n	800894c <_printf_i+0x1ac>
 8008922:	07df      	lsls	r7, r3, #31
 8008924:	bf44      	itt	mi
 8008926:	f043 0320 	orrmi.w	r3, r3, #32
 800892a:	6023      	strmi	r3, [r4, #0]
 800892c:	b91e      	cbnz	r6, 8008936 <_printf_i+0x196>
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	f023 0320 	bic.w	r3, r3, #32
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	2310      	movs	r3, #16
 8008938:	e7b0      	b.n	800889c <_printf_i+0xfc>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	f043 0320 	orr.w	r3, r3, #32
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	2378      	movs	r3, #120	; 0x78
 8008944:	4828      	ldr	r0, [pc, #160]	; (80089e8 <_printf_i+0x248>)
 8008946:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800894a:	e7e3      	b.n	8008914 <_printf_i+0x174>
 800894c:	0659      	lsls	r1, r3, #25
 800894e:	bf48      	it	mi
 8008950:	b2b6      	uxthmi	r6, r6
 8008952:	e7e6      	b.n	8008922 <_printf_i+0x182>
 8008954:	4615      	mov	r5, r2
 8008956:	e7bb      	b.n	80088d0 <_printf_i+0x130>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	6826      	ldr	r6, [r4, #0]
 800895c:	6961      	ldr	r1, [r4, #20]
 800895e:	1d18      	adds	r0, r3, #4
 8008960:	6028      	str	r0, [r5, #0]
 8008962:	0635      	lsls	r5, r6, #24
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	d501      	bpl.n	800896c <_printf_i+0x1cc>
 8008968:	6019      	str	r1, [r3, #0]
 800896a:	e002      	b.n	8008972 <_printf_i+0x1d2>
 800896c:	0670      	lsls	r0, r6, #25
 800896e:	d5fb      	bpl.n	8008968 <_printf_i+0x1c8>
 8008970:	8019      	strh	r1, [r3, #0]
 8008972:	2300      	movs	r3, #0
 8008974:	6123      	str	r3, [r4, #16]
 8008976:	4615      	mov	r5, r2
 8008978:	e7ba      	b.n	80088f0 <_printf_i+0x150>
 800897a:	682b      	ldr	r3, [r5, #0]
 800897c:	1d1a      	adds	r2, r3, #4
 800897e:	602a      	str	r2, [r5, #0]
 8008980:	681d      	ldr	r5, [r3, #0]
 8008982:	6862      	ldr	r2, [r4, #4]
 8008984:	2100      	movs	r1, #0
 8008986:	4628      	mov	r0, r5
 8008988:	f7f7 fc4a 	bl	8000220 <memchr>
 800898c:	b108      	cbz	r0, 8008992 <_printf_i+0x1f2>
 800898e:	1b40      	subs	r0, r0, r5
 8008990:	6060      	str	r0, [r4, #4]
 8008992:	6863      	ldr	r3, [r4, #4]
 8008994:	6123      	str	r3, [r4, #16]
 8008996:	2300      	movs	r3, #0
 8008998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800899c:	e7a8      	b.n	80088f0 <_printf_i+0x150>
 800899e:	6923      	ldr	r3, [r4, #16]
 80089a0:	462a      	mov	r2, r5
 80089a2:	4649      	mov	r1, r9
 80089a4:	4640      	mov	r0, r8
 80089a6:	47d0      	blx	sl
 80089a8:	3001      	adds	r0, #1
 80089aa:	d0ab      	beq.n	8008904 <_printf_i+0x164>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	079b      	lsls	r3, r3, #30
 80089b0:	d413      	bmi.n	80089da <_printf_i+0x23a>
 80089b2:	68e0      	ldr	r0, [r4, #12]
 80089b4:	9b03      	ldr	r3, [sp, #12]
 80089b6:	4298      	cmp	r0, r3
 80089b8:	bfb8      	it	lt
 80089ba:	4618      	movlt	r0, r3
 80089bc:	e7a4      	b.n	8008908 <_printf_i+0x168>
 80089be:	2301      	movs	r3, #1
 80089c0:	4632      	mov	r2, r6
 80089c2:	4649      	mov	r1, r9
 80089c4:	4640      	mov	r0, r8
 80089c6:	47d0      	blx	sl
 80089c8:	3001      	adds	r0, #1
 80089ca:	d09b      	beq.n	8008904 <_printf_i+0x164>
 80089cc:	3501      	adds	r5, #1
 80089ce:	68e3      	ldr	r3, [r4, #12]
 80089d0:	9903      	ldr	r1, [sp, #12]
 80089d2:	1a5b      	subs	r3, r3, r1
 80089d4:	42ab      	cmp	r3, r5
 80089d6:	dcf2      	bgt.n	80089be <_printf_i+0x21e>
 80089d8:	e7eb      	b.n	80089b2 <_printf_i+0x212>
 80089da:	2500      	movs	r5, #0
 80089dc:	f104 0619 	add.w	r6, r4, #25
 80089e0:	e7f5      	b.n	80089ce <_printf_i+0x22e>
 80089e2:	bf00      	nop
 80089e4:	08008e65 	.word	0x08008e65
 80089e8:	08008e76 	.word	0x08008e76

080089ec <memmove>:
 80089ec:	4288      	cmp	r0, r1
 80089ee:	b510      	push	{r4, lr}
 80089f0:	eb01 0402 	add.w	r4, r1, r2
 80089f4:	d902      	bls.n	80089fc <memmove+0x10>
 80089f6:	4284      	cmp	r4, r0
 80089f8:	4623      	mov	r3, r4
 80089fa:	d807      	bhi.n	8008a0c <memmove+0x20>
 80089fc:	1e43      	subs	r3, r0, #1
 80089fe:	42a1      	cmp	r1, r4
 8008a00:	d008      	beq.n	8008a14 <memmove+0x28>
 8008a02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a0a:	e7f8      	b.n	80089fe <memmove+0x12>
 8008a0c:	4402      	add	r2, r0
 8008a0e:	4601      	mov	r1, r0
 8008a10:	428a      	cmp	r2, r1
 8008a12:	d100      	bne.n	8008a16 <memmove+0x2a>
 8008a14:	bd10      	pop	{r4, pc}
 8008a16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a1e:	e7f7      	b.n	8008a10 <memmove+0x24>

08008a20 <_free_r>:
 8008a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a22:	2900      	cmp	r1, #0
 8008a24:	d044      	beq.n	8008ab0 <_free_r+0x90>
 8008a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a2a:	9001      	str	r0, [sp, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a32:	bfb8      	it	lt
 8008a34:	18e4      	addlt	r4, r4, r3
 8008a36:	f000 f913 	bl	8008c60 <__malloc_lock>
 8008a3a:	4a1e      	ldr	r2, [pc, #120]	; (8008ab4 <_free_r+0x94>)
 8008a3c:	9801      	ldr	r0, [sp, #4]
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	b933      	cbnz	r3, 8008a50 <_free_r+0x30>
 8008a42:	6063      	str	r3, [r4, #4]
 8008a44:	6014      	str	r4, [r2, #0]
 8008a46:	b003      	add	sp, #12
 8008a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a4c:	f000 b90e 	b.w	8008c6c <__malloc_unlock>
 8008a50:	42a3      	cmp	r3, r4
 8008a52:	d908      	bls.n	8008a66 <_free_r+0x46>
 8008a54:	6825      	ldr	r5, [r4, #0]
 8008a56:	1961      	adds	r1, r4, r5
 8008a58:	428b      	cmp	r3, r1
 8008a5a:	bf01      	itttt	eq
 8008a5c:	6819      	ldreq	r1, [r3, #0]
 8008a5e:	685b      	ldreq	r3, [r3, #4]
 8008a60:	1949      	addeq	r1, r1, r5
 8008a62:	6021      	streq	r1, [r4, #0]
 8008a64:	e7ed      	b.n	8008a42 <_free_r+0x22>
 8008a66:	461a      	mov	r2, r3
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	b10b      	cbz	r3, 8008a70 <_free_r+0x50>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d9fa      	bls.n	8008a66 <_free_r+0x46>
 8008a70:	6811      	ldr	r1, [r2, #0]
 8008a72:	1855      	adds	r5, r2, r1
 8008a74:	42a5      	cmp	r5, r4
 8008a76:	d10b      	bne.n	8008a90 <_free_r+0x70>
 8008a78:	6824      	ldr	r4, [r4, #0]
 8008a7a:	4421      	add	r1, r4
 8008a7c:	1854      	adds	r4, r2, r1
 8008a7e:	42a3      	cmp	r3, r4
 8008a80:	6011      	str	r1, [r2, #0]
 8008a82:	d1e0      	bne.n	8008a46 <_free_r+0x26>
 8008a84:	681c      	ldr	r4, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	6053      	str	r3, [r2, #4]
 8008a8a:	4421      	add	r1, r4
 8008a8c:	6011      	str	r1, [r2, #0]
 8008a8e:	e7da      	b.n	8008a46 <_free_r+0x26>
 8008a90:	d902      	bls.n	8008a98 <_free_r+0x78>
 8008a92:	230c      	movs	r3, #12
 8008a94:	6003      	str	r3, [r0, #0]
 8008a96:	e7d6      	b.n	8008a46 <_free_r+0x26>
 8008a98:	6825      	ldr	r5, [r4, #0]
 8008a9a:	1961      	adds	r1, r4, r5
 8008a9c:	428b      	cmp	r3, r1
 8008a9e:	bf04      	itt	eq
 8008aa0:	6819      	ldreq	r1, [r3, #0]
 8008aa2:	685b      	ldreq	r3, [r3, #4]
 8008aa4:	6063      	str	r3, [r4, #4]
 8008aa6:	bf04      	itt	eq
 8008aa8:	1949      	addeq	r1, r1, r5
 8008aaa:	6021      	streq	r1, [r4, #0]
 8008aac:	6054      	str	r4, [r2, #4]
 8008aae:	e7ca      	b.n	8008a46 <_free_r+0x26>
 8008ab0:	b003      	add	sp, #12
 8008ab2:	bd30      	pop	{r4, r5, pc}
 8008ab4:	20004b94 	.word	0x20004b94

08008ab8 <sbrk_aligned>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	4e0e      	ldr	r6, [pc, #56]	; (8008af4 <sbrk_aligned+0x3c>)
 8008abc:	460c      	mov	r4, r1
 8008abe:	6831      	ldr	r1, [r6, #0]
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	b911      	cbnz	r1, 8008aca <sbrk_aligned+0x12>
 8008ac4:	f000 f8bc 	bl	8008c40 <_sbrk_r>
 8008ac8:	6030      	str	r0, [r6, #0]
 8008aca:	4621      	mov	r1, r4
 8008acc:	4628      	mov	r0, r5
 8008ace:	f000 f8b7 	bl	8008c40 <_sbrk_r>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	d00a      	beq.n	8008aec <sbrk_aligned+0x34>
 8008ad6:	1cc4      	adds	r4, r0, #3
 8008ad8:	f024 0403 	bic.w	r4, r4, #3
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	d007      	beq.n	8008af0 <sbrk_aligned+0x38>
 8008ae0:	1a21      	subs	r1, r4, r0
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	f000 f8ac 	bl	8008c40 <_sbrk_r>
 8008ae8:	3001      	adds	r0, #1
 8008aea:	d101      	bne.n	8008af0 <sbrk_aligned+0x38>
 8008aec:	f04f 34ff 	mov.w	r4, #4294967295
 8008af0:	4620      	mov	r0, r4
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
 8008af4:	20004b98 	.word	0x20004b98

08008af8 <_malloc_r>:
 8008af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008afc:	1ccd      	adds	r5, r1, #3
 8008afe:	f025 0503 	bic.w	r5, r5, #3
 8008b02:	3508      	adds	r5, #8
 8008b04:	2d0c      	cmp	r5, #12
 8008b06:	bf38      	it	cc
 8008b08:	250c      	movcc	r5, #12
 8008b0a:	2d00      	cmp	r5, #0
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	db01      	blt.n	8008b14 <_malloc_r+0x1c>
 8008b10:	42a9      	cmp	r1, r5
 8008b12:	d905      	bls.n	8008b20 <_malloc_r+0x28>
 8008b14:	230c      	movs	r3, #12
 8008b16:	603b      	str	r3, [r7, #0]
 8008b18:	2600      	movs	r6, #0
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b20:	4e2e      	ldr	r6, [pc, #184]	; (8008bdc <_malloc_r+0xe4>)
 8008b22:	f000 f89d 	bl	8008c60 <__malloc_lock>
 8008b26:	6833      	ldr	r3, [r6, #0]
 8008b28:	461c      	mov	r4, r3
 8008b2a:	bb34      	cbnz	r4, 8008b7a <_malloc_r+0x82>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7ff ffc2 	bl	8008ab8 <sbrk_aligned>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	4604      	mov	r4, r0
 8008b38:	d14d      	bne.n	8008bd6 <_malloc_r+0xde>
 8008b3a:	6834      	ldr	r4, [r6, #0]
 8008b3c:	4626      	mov	r6, r4
 8008b3e:	2e00      	cmp	r6, #0
 8008b40:	d140      	bne.n	8008bc4 <_malloc_r+0xcc>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	4631      	mov	r1, r6
 8008b46:	4638      	mov	r0, r7
 8008b48:	eb04 0803 	add.w	r8, r4, r3
 8008b4c:	f000 f878 	bl	8008c40 <_sbrk_r>
 8008b50:	4580      	cmp	r8, r0
 8008b52:	d13a      	bne.n	8008bca <_malloc_r+0xd2>
 8008b54:	6821      	ldr	r1, [r4, #0]
 8008b56:	3503      	adds	r5, #3
 8008b58:	1a6d      	subs	r5, r5, r1
 8008b5a:	f025 0503 	bic.w	r5, r5, #3
 8008b5e:	3508      	adds	r5, #8
 8008b60:	2d0c      	cmp	r5, #12
 8008b62:	bf38      	it	cc
 8008b64:	250c      	movcc	r5, #12
 8008b66:	4629      	mov	r1, r5
 8008b68:	4638      	mov	r0, r7
 8008b6a:	f7ff ffa5 	bl	8008ab8 <sbrk_aligned>
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d02b      	beq.n	8008bca <_malloc_r+0xd2>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	442b      	add	r3, r5
 8008b76:	6023      	str	r3, [r4, #0]
 8008b78:	e00e      	b.n	8008b98 <_malloc_r+0xa0>
 8008b7a:	6822      	ldr	r2, [r4, #0]
 8008b7c:	1b52      	subs	r2, r2, r5
 8008b7e:	d41e      	bmi.n	8008bbe <_malloc_r+0xc6>
 8008b80:	2a0b      	cmp	r2, #11
 8008b82:	d916      	bls.n	8008bb2 <_malloc_r+0xba>
 8008b84:	1961      	adds	r1, r4, r5
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	6025      	str	r5, [r4, #0]
 8008b8a:	bf18      	it	ne
 8008b8c:	6059      	strne	r1, [r3, #4]
 8008b8e:	6863      	ldr	r3, [r4, #4]
 8008b90:	bf08      	it	eq
 8008b92:	6031      	streq	r1, [r6, #0]
 8008b94:	5162      	str	r2, [r4, r5]
 8008b96:	604b      	str	r3, [r1, #4]
 8008b98:	4638      	mov	r0, r7
 8008b9a:	f104 060b 	add.w	r6, r4, #11
 8008b9e:	f000 f865 	bl	8008c6c <__malloc_unlock>
 8008ba2:	f026 0607 	bic.w	r6, r6, #7
 8008ba6:	1d23      	adds	r3, r4, #4
 8008ba8:	1af2      	subs	r2, r6, r3
 8008baa:	d0b6      	beq.n	8008b1a <_malloc_r+0x22>
 8008bac:	1b9b      	subs	r3, r3, r6
 8008bae:	50a3      	str	r3, [r4, r2]
 8008bb0:	e7b3      	b.n	8008b1a <_malloc_r+0x22>
 8008bb2:	6862      	ldr	r2, [r4, #4]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	bf0c      	ite	eq
 8008bb8:	6032      	streq	r2, [r6, #0]
 8008bba:	605a      	strne	r2, [r3, #4]
 8008bbc:	e7ec      	b.n	8008b98 <_malloc_r+0xa0>
 8008bbe:	4623      	mov	r3, r4
 8008bc0:	6864      	ldr	r4, [r4, #4]
 8008bc2:	e7b2      	b.n	8008b2a <_malloc_r+0x32>
 8008bc4:	4634      	mov	r4, r6
 8008bc6:	6876      	ldr	r6, [r6, #4]
 8008bc8:	e7b9      	b.n	8008b3e <_malloc_r+0x46>
 8008bca:	230c      	movs	r3, #12
 8008bcc:	603b      	str	r3, [r7, #0]
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f000 f84c 	bl	8008c6c <__malloc_unlock>
 8008bd4:	e7a1      	b.n	8008b1a <_malloc_r+0x22>
 8008bd6:	6025      	str	r5, [r4, #0]
 8008bd8:	e7de      	b.n	8008b98 <_malloc_r+0xa0>
 8008bda:	bf00      	nop
 8008bdc:	20004b94 	.word	0x20004b94

08008be0 <_realloc_r>:
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	4680      	mov	r8, r0
 8008be6:	4614      	mov	r4, r2
 8008be8:	460e      	mov	r6, r1
 8008bea:	b921      	cbnz	r1, 8008bf6 <_realloc_r+0x16>
 8008bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	f7ff bf81 	b.w	8008af8 <_malloc_r>
 8008bf6:	b92a      	cbnz	r2, 8008c04 <_realloc_r+0x24>
 8008bf8:	f7ff ff12 	bl	8008a20 <_free_r>
 8008bfc:	4625      	mov	r5, r4
 8008bfe:	4628      	mov	r0, r5
 8008c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c04:	f000 f838 	bl	8008c78 <_malloc_usable_size_r>
 8008c08:	4284      	cmp	r4, r0
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	d802      	bhi.n	8008c14 <_realloc_r+0x34>
 8008c0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c12:	d812      	bhi.n	8008c3a <_realloc_r+0x5a>
 8008c14:	4621      	mov	r1, r4
 8008c16:	4640      	mov	r0, r8
 8008c18:	f7ff ff6e 	bl	8008af8 <_malloc_r>
 8008c1c:	4605      	mov	r5, r0
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d0ed      	beq.n	8008bfe <_realloc_r+0x1e>
 8008c22:	42bc      	cmp	r4, r7
 8008c24:	4622      	mov	r2, r4
 8008c26:	4631      	mov	r1, r6
 8008c28:	bf28      	it	cs
 8008c2a:	463a      	movcs	r2, r7
 8008c2c:	f7ff fbb8 	bl	80083a0 <memcpy>
 8008c30:	4631      	mov	r1, r6
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7ff fef4 	bl	8008a20 <_free_r>
 8008c38:	e7e1      	b.n	8008bfe <_realloc_r+0x1e>
 8008c3a:	4635      	mov	r5, r6
 8008c3c:	e7df      	b.n	8008bfe <_realloc_r+0x1e>
	...

08008c40 <_sbrk_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d06      	ldr	r5, [pc, #24]	; (8008c5c <_sbrk_r+0x1c>)
 8008c44:	2300      	movs	r3, #0
 8008c46:	4604      	mov	r4, r0
 8008c48:	4608      	mov	r0, r1
 8008c4a:	602b      	str	r3, [r5, #0]
 8008c4c:	f7f8 fca0 	bl	8001590 <_sbrk>
 8008c50:	1c43      	adds	r3, r0, #1
 8008c52:	d102      	bne.n	8008c5a <_sbrk_r+0x1a>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b103      	cbz	r3, 8008c5a <_sbrk_r+0x1a>
 8008c58:	6023      	str	r3, [r4, #0]
 8008c5a:	bd38      	pop	{r3, r4, r5, pc}
 8008c5c:	20004b9c 	.word	0x20004b9c

08008c60 <__malloc_lock>:
 8008c60:	4801      	ldr	r0, [pc, #4]	; (8008c68 <__malloc_lock+0x8>)
 8008c62:	f000 b811 	b.w	8008c88 <__retarget_lock_acquire_recursive>
 8008c66:	bf00      	nop
 8008c68:	20004ba0 	.word	0x20004ba0

08008c6c <__malloc_unlock>:
 8008c6c:	4801      	ldr	r0, [pc, #4]	; (8008c74 <__malloc_unlock+0x8>)
 8008c6e:	f000 b80c 	b.w	8008c8a <__retarget_lock_release_recursive>
 8008c72:	bf00      	nop
 8008c74:	20004ba0 	.word	0x20004ba0

08008c78 <_malloc_usable_size_r>:
 8008c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c7c:	1f18      	subs	r0, r3, #4
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	bfbc      	itt	lt
 8008c82:	580b      	ldrlt	r3, [r1, r0]
 8008c84:	18c0      	addlt	r0, r0, r3
 8008c86:	4770      	bx	lr

08008c88 <__retarget_lock_acquire_recursive>:
 8008c88:	4770      	bx	lr

08008c8a <__retarget_lock_release_recursive>:
 8008c8a:	4770      	bx	lr

08008c8c <_init>:
 8008c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c8e:	bf00      	nop
 8008c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c92:	bc08      	pop	{r3}
 8008c94:	469e      	mov	lr, r3
 8008c96:	4770      	bx	lr

08008c98 <_fini>:
 8008c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9a:	bf00      	nop
 8008c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c9e:	bc08      	pop	{r3}
 8008ca0:	469e      	mov	lr, r3
 8008ca2:	4770      	bx	lr
