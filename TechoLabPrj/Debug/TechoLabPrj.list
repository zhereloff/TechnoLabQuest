
TechoLabPrj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009744  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009914  08009914  00019914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac8  08009ac8  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ad0  08009ad0  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009ad0  08009ad0  00019ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08009adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cdc  200000c4  08009ba0  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004da0  08009ba0  00024da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c753  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004030  00000000  00000000  0003c847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  00040878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00041f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026333  00000000  00000000  00043530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b782  00000000  00000000  00069863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9271  00000000  00000000  00084fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016e256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  0016e2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080098fc 	.word	0x080098fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	080098fc 	.word	0x080098fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <_ZN6Button12getLastStateEv>:
		}
		void setCurrentState(uint8_t state){
			this->current_button_state = state;
		}

		uint8_t getLastState(){
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
			return this->last_button_state;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	781b      	ldrb	r3, [r3, #0]
		}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <_ZN6Button15getCurrentStateEv>:
		uint8_t getCurrentState(){
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
			return this->current_button_state;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	785b      	ldrb	r3, [r3, #1]
		}
 80005e8:	4618      	mov	r0, r3
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <_ZN6Button14getButtonEventEv>:
#include "button.h"



const uint8_t* Button::getButtonEvent()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	static ButtonEvent events;

	if(getCurrentState() == GPIO_PIN_SET && getLastState() == GPIO_PIN_RESET)
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffed 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d107      	bne.n	8000618 <_ZN6Button14getButtonEventEv+0x24>
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ffdb 	bl	80005c4 <_ZN6Button12getLastStateEv>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d101      	bne.n	8000618 <_ZN6Button14getButtonEventEv+0x24>
 8000614:	2301      	movs	r3, #1
 8000616:	e000      	b.n	800061a <_ZN6Button14getButtonEventEv+0x26>
 8000618:	2300      	movs	r3, #0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d006      	beq.n	800062c <_ZN6Button14getButtonEventEv+0x38>
	{
		this->press_start_time = osKernelGetTickCount();
 800061e:	f005 fdb7 	bl	8006190 <osKernelGetTickCount>
 8000622:	4602      	mov	r2, r0
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	609a      	str	r2, [r3, #8]
		return events.butpressed;
 8000628:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <_ZN6Button14getButtonEventEv+0xd0>)
 800062a:	e046      	b.n	80006ba <_ZN6Button14getButtonEventEv+0xc6>
	}

	else if (getCurrentState() == GPIO_PIN_SET && getLastState() == GPIO_PIN_SET)
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff ffd5 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 8000632:	4603      	mov	r3, r0
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <_ZN6Button14getButtonEventEv+0x54>
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ffc3 	bl	80005c4 <_ZN6Button12getLastStateEv>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d101      	bne.n	8000648 <_ZN6Button14getButtonEventEv+0x54>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <_ZN6Button14getButtonEventEv+0x56>
 8000648:	2300      	movs	r3, #0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d015      	beq.n	800067a <_ZN6Button14getButtonEventEv+0x86>
	{
		if (osKernelGetTickCount() - this->press_start_time >= HOLD_TIME)
 800064e:	f005 fd9f 	bl	8006190 <osKernelGetTickCount>
 8000652:	4602      	mov	r2, r0
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	f241 3287 	movw	r2, #4999	; 0x1387
 800065e:	4293      	cmp	r3, r2
 8000660:	bf8c      	ite	hi
 8000662:	2301      	movhi	r3, #1
 8000664:	2300      	movls	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d025      	beq.n	80006b8 <_ZN6Button14getButtonEventEv+0xc4>
		{
			this->press_start_time = osKernelGetTickCount();
 800066c:	f005 fd90 	bl	8006190 <osKernelGetTickCount>
 8000670:	4602      	mov	r2, r0
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	609a      	str	r2, [r3, #8]
			return events.butheld;
 8000676:	4b14      	ldr	r3, [pc, #80]	; (80006c8 <_ZN6Button14getButtonEventEv+0xd4>)
 8000678:	e01f      	b.n	80006ba <_ZN6Button14getButtonEventEv+0xc6>
		}
	}

	else if (getCurrentState() == GPIO_PIN_RESET && getLastState() == GPIO_PIN_SET)
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ffae 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d107      	bne.n	8000696 <_ZN6Button14getButtonEventEv+0xa2>
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ff9c 	bl	80005c4 <_ZN6Button12getLastStateEv>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d101      	bne.n	8000696 <_ZN6Button14getButtonEventEv+0xa2>
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <_ZN6Button14getButtonEventEv+0xa4>
 8000696:	2300      	movs	r3, #0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d00d      	beq.n	80006b8 <_ZN6Button14getButtonEventEv+0xc4>
	{
		uint32_t press_duration = osKernelGetTickCount() - this->press_start_time;
 800069c:	f005 fd78 	bl	8006190 <osKernelGetTickCount>
 80006a0:	4602      	mov	r2, r0
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
		if (press_duration < HOLD_TIME)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f241 3287 	movw	r2, #4999	; 0x1387
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d801      	bhi.n	80006b8 <_ZN6Button14getButtonEventEv+0xc4>
		{
			return events.butreleased;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <_ZN6Button14getButtonEventEv+0xd8>)
 80006b6:	e000      	b.n	80006ba <_ZN6Button14getButtonEventEv+0xc6>
		}
	}

	return nullptr;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000010 	.word	0x20000010
 80006cc:	2000002b 	.word	0x2000002b

080006d0 <_ZL10goToOutputP10DHT_sensor>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b088      	sub	sp, #32
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  //По умолчанию на линии высокий уровень
  lineUp();
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	f002 fe1c 	bl	8003330 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 80006fe:	2311      	movs	r3, #17
 8000700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	79db      	ldrb	r3, [r3, #7]
 8000706:	617b      	str	r3, [r7, #20]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8000708:	2302      	movs	r3, #2
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f107 020c 	add.w	r2, r7, #12
 8000714:	4611      	mov	r1, r2
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fc5e 	bl	8002fd8 <HAL_GPIO_Init>
}
 800071c:	bf00      	nop
 800071e:	3720      	adds	r7, #32
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZL9goToInputP10DHT_sensor>:

static void goToInput(DHT_sensor *sensor) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	79db      	ldrb	r3, [r3, #7]
 800074a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f107 020c 	add.w	r2, r7, #12
 8000754:	4611      	mov	r1, r2
 8000756:	4618      	mov	r0, r3
 8000758:	f002 fc3e 	bl	8002fd8 <HAL_GPIO_Init>
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_Z11DHT_getDataP10DHT_sensor>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b08e      	sub	sp, #56	; 0x38
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
	DHT_data data = {-128.0f, -128.0f};
 800076c:	4aa3      	ldr	r2, [pc, #652]	; (80009fc <_Z11DHT_getDataP10DHT_sensor+0x298>)
 800076e:	f107 031c 	add.w	r3, r7, #28
 8000772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000776:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	799b      	ldrb	r3, [r3, #6]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <_Z11DHT_getDataP10DHT_sensor+0x26>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8000782:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000786:	86fb      	strh	r3, [r7, #54]	; 0x36
 8000788:	e002      	b.n	8000790 <_Z11DHT_getDataP10DHT_sensor+0x2c>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 800078a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078e:	86fb      	strh	r3, [r7, #54]	; 0x36
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 8000790:	f001 faec 	bl	8001d6c <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	1ad2      	subs	r2, r2, r3
 800079c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800079e:	429a      	cmp	r2, r3
 80007a0:	d205      	bcs.n	80007ae <_Z11DHT_getDataP10DHT_sensor+0x4a>
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <_Z11DHT_getDataP10DHT_sensor+0x4a>
 80007aa:	2301      	movs	r3, #1
 80007ac:	e000      	b.n	80007b0 <_Z11DHT_getDataP10DHT_sensor+0x4c>
 80007ae:	2300      	movs	r3, #0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <_Z11DHT_getDataP10DHT_sensor+0x6e>
		data.hum = sensor->lastHum;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	61fb      	str	r3, [r7, #28]
		data.temp = sensor->lastTemp;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	623b      	str	r3, [r7, #32]
		return data;
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	f107 021c 	add.w	r2, r7, #28
 80007c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80007d0:	e183      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 80007d2:	f001 facb 	bl	8001d6c <HAL_GetTick>
 80007d6:	4603      	mov	r3, r0
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 80007de:	68f8      	ldr	r0, [r7, #12]
 80007e0:	f7ff ff76 	bl	80006d0 <_ZL10goToOutputP10DHT_sensor>
	//Опускание линии данных на 18 мс
	lineDown();
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6818      	ldr	r0, [r3, #0]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	889b      	ldrh	r3, [r3, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	4619      	mov	r1, r3
 80007f0:	f002 fd9e 	bl	8003330 <HAL_GPIO_WritePin>
	Delay(18);
 80007f4:	2012      	movs	r0, #18
 80007f6:	f001 fac5 	bl	8001d84 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	f002 fd93 	bl	8003330 <HAL_GPIO_WritePin>
	goToInput(sensor);
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f7ff ff8a 	bl	8000724 <_ZL9goToInputP10DHT_sensor>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание спада
	while(getLine()) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	4619      	mov	r1, r3
 8000822:	4610      	mov	r0, r2
 8000824:	f002 fd6c 	bl	8003300 <HAL_GPIO_ReadPin>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	bf0c      	ite	eq
 800082e:	2301      	moveq	r3, #1
 8000830:	2300      	movne	r3, #0
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d01a      	beq.n	800086e <_Z11DHT_getDataP10DHT_sensor+0x10a>
		timeout++;
 8000838:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800083a:	3301      	adds	r3, #1
 800083c:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) {
 800083e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000840:	f242 7210 	movw	r2, #10000	; 0x2710
 8000844:	4293      	cmp	r3, r2
 8000846:	d9e7      	bls.n	8000818 <_Z11DHT_getDataP10DHT_sensor+0xb4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000848:	b662      	cpsie	i
}
 800084a:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 8000852:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 800085a:	60da      	str	r2, [r3, #12]

			return data;
 800085c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000860:	f107 021c 	add.w	r2, r7, #28
 8000864:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000868:	e883 0003 	stmia.w	r3, {r0, r1}
 800086c:	e135      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
		}
	}
	timeout = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание подъёма
	while(!getLine()) {
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	889b      	ldrh	r3, [r3, #4]
 800087a:	4619      	mov	r1, r3
 800087c:	4610      	mov	r0, r2
 800087e:	f002 fd3f 	bl	8003300 <HAL_GPIO_ReadPin>
 8000882:	4603      	mov	r3, r0
 8000884:	2b01      	cmp	r3, #1
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d01a      	beq.n	80008c8 <_Z11DHT_getDataP10DHT_sensor+0x164>
		timeout++;
 8000892:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000894:	3301      	adds	r3, #1
 8000896:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) {
 8000898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800089a:	f242 7210 	movw	r2, #10000	; 0x2710
 800089e:	4293      	cmp	r3, r2
 80008a0:	d9e7      	bls.n	8000872 <_Z11DHT_getDataP10DHT_sensor+0x10e>
  __ASM volatile ("cpsie i" : : : "memory");
 80008a2:	b662      	cpsie	i
}
 80008a4:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80008ac:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	f04f 4243 	mov.w	r2, #3271557120	; 0xc3000000
 80008b4:	60da      	str	r2, [r3, #12]

			return data;
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	f107 021c 	add.w	r2, r7, #28
 80008be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80008c6:	e108      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
		}
	}
	timeout = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	86bb      	strh	r3, [r7, #52]	; 0x34
	//Ожидание спада
	while(getLine()) {
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	889b      	ldrh	r3, [r3, #4]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4610      	mov	r0, r2
 80008d8:	f002 fd12 	bl	8003300 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b01      	cmp	r3, #1
 80008e0:	bf0c      	ite	eq
 80008e2:	2301      	moveq	r3, #1
 80008e4:	2300      	movne	r3, #0
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d012      	beq.n	8000912 <_Z11DHT_getDataP10DHT_sensor+0x1ae>
		timeout++;
 80008ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008ee:	3301      	adds	r3, #1
 80008f0:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (timeout > DHT_TIMEOUT) {
 80008f2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80008f4:	f242 7210 	movw	r2, #10000	; 0x2710
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d9e7      	bls.n	80008cc <_Z11DHT_getDataP10DHT_sensor+0x168>
  __ASM volatile ("cpsie i" : : : "memory");
 80008fc:	b662      	cpsie	i
}
 80008fe:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8000900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000904:	f107 021c 	add.w	r2, r7, #28
 8000908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000910:	e0e3      	b.n	8000ada <_Z11DHT_getDataP10DHT_sensor+0x376>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8000912:	4a3b      	ldr	r2, [pc, #236]	; (8000a00 <_Z11DHT_getDataP10DHT_sensor+0x29c>)
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091c:	6018      	str	r0, [r3, #0]
 800091e:	3304      	adds	r3, #4
 8000920:	7019      	strb	r1, [r3, #0]
	for(uint8_t a = 0; a < 5; a++) {
 8000922:	2300      	movs	r3, #0
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092c:	2b04      	cmp	r3, #4
 800092e:	d86d      	bhi.n	8000a0c <_Z11DHT_getDataP10DHT_sensor+0x2a8>
		for(uint8_t b = 7; b != 255; b--) {
 8000930:	2307      	movs	r3, #7
 8000932:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8000936:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	d057      	beq.n	80009ee <_Z11DHT_getDataP10DHT_sensor+0x28a>
			uint16_t hT = 0, lT = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	863b      	strh	r3, [r7, #48]	; 0x30
 8000942:	2300      	movs	r3, #0
 8000944:	85fb      	strh	r3, [r7, #46]	; 0x2e
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	889b      	ldrh	r3, [r3, #4]
 800094e:	4619      	mov	r1, r3
 8000950:	4610      	mov	r0, r2
 8000952:	f002 fcd5 	bl	8003300 <HAL_GPIO_ReadPin>
 8000956:	4603      	mov	r3, r0
 8000958:	2b01      	cmp	r3, #1
 800095a:	d006      	beq.n	800096a <_Z11DHT_getDataP10DHT_sensor+0x206>
 800095c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800095e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000962:	4293      	cmp	r3, r2
 8000964:	d001      	beq.n	800096a <_Z11DHT_getDataP10DHT_sensor+0x206>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <_Z11DHT_getDataP10DHT_sensor+0x208>
 800096a:	2300      	movs	r3, #0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d003      	beq.n	8000978 <_Z11DHT_getDataP10DHT_sensor+0x214>
 8000970:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000972:	3301      	adds	r3, #1
 8000974:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8000976:	e7e6      	b.n	8000946 <_Z11DHT_getDataP10DHT_sensor+0x1e2>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	86bb      	strh	r3, [r7, #52]	; 0x34
			while(getLine()&& hT != 65535) hT++;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	889b      	ldrh	r3, [r3, #4]
 8000984:	4619      	mov	r1, r3
 8000986:	4610      	mov	r0, r2
 8000988:	f002 fcba 	bl	8003300 <HAL_GPIO_ReadPin>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d106      	bne.n	80009a0 <_Z11DHT_getDataP10DHT_sensor+0x23c>
 8000992:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000998:	4293      	cmp	r3, r2
 800099a:	d001      	beq.n	80009a0 <_Z11DHT_getDataP10DHT_sensor+0x23c>
 800099c:	2301      	movs	r3, #1
 800099e:	e000      	b.n	80009a2 <_Z11DHT_getDataP10DHT_sensor+0x23e>
 80009a0:	2300      	movs	r3, #0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_Z11DHT_getDataP10DHT_sensor+0x24a>
 80009a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80009a8:	3301      	adds	r3, #1
 80009aa:	863b      	strh	r3, [r7, #48]	; 0x30
 80009ac:	e7e6      	b.n	800097c <_Z11DHT_getDataP10DHT_sensor+0x218>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80009ae:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80009b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d915      	bls.n	80009e2 <_Z11DHT_getDataP10DHT_sensor+0x27e>
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ba:	3338      	adds	r3, #56	; 0x38
 80009bc:	443b      	add	r3, r7
 80009be:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80009c2:	b25a      	sxtb	r2, r3
 80009c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80009c8:	2101      	movs	r1, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	b25b      	sxtb	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b25a      	sxtb	r2, r3
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009d8:	b2d2      	uxtb	r2, r2
 80009da:	3338      	adds	r3, #56	; 0x38
 80009dc:	443b      	add	r3, r7
 80009de:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(uint8_t b = 7; b != 255; b--) {
 80009e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80009e6:	3b01      	subs	r3, #1
 80009e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80009ec:	e7a3      	b.n	8000936 <_Z11DHT_getDataP10DHT_sensor+0x1d2>
	for(uint8_t a = 0; a < 5; a++) {
 80009ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009f2:	3301      	adds	r3, #1
 80009f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80009f8:	e796      	b.n	8000928 <_Z11DHT_getDataP10DHT_sensor+0x1c4>
 80009fa:	bf00      	nop
 80009fc:	08009914 	.word	0x08009914
 8000a00:	0800991c 	.word	0x0800991c
 8000a04:	3dcccccd 	.word	0x3dcccccd
 8000a08:	bdcccccd 	.word	0xbdcccccd
  __ASM volatile ("cpsie i" : : : "memory");
 8000a0c:	b662      	cpsie	i
}
 8000a0e:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8000a10:	7d3a      	ldrb	r2, [r7, #20]
 8000a12:	7d7b      	ldrb	r3, [r7, #21]
 8000a14:	4413      	add	r3, r2
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	7dbb      	ldrb	r3, [r7, #22]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	4413      	add	r3, r2
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	7e3b      	ldrb	r3, [r7, #24]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d149      	bne.n	8000abe <_Z11DHT_getDataP10DHT_sensor+0x35a>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	799b      	ldrb	r3, [r3, #6]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d133      	bne.n	8000a9a <_Z11DHT_getDataP10DHT_sensor+0x336>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8000a32:	7d3b      	ldrb	r3, [r7, #20]
 8000a34:	021b      	lsls	r3, r3, #8
 8000a36:	7d7a      	ldrb	r2, [r7, #21]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	ee07 3a90 	vmov	s15, r3
 8000a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a42:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 8000a04 <_Z11DHT_getDataP10DHT_sensor+0x2a0>
 8000a46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a4a:	edc7 7a07 	vstr	s15, [r7, #28]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8000a4e:	7dbb      	ldrb	r3, [r7, #22]
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0e      	blt.n	8000a74 <_Z11DHT_getDataP10DHT_sensor+0x310>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8000a56:	7dbb      	ldrb	r3, [r7, #22]
 8000a58:	021b      	lsls	r3, r3, #8
 8000a5a:	7dfa      	ldrb	r2, [r7, #23]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	ee07 3a90 	vmov	s15, r3
 8000a62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a66:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 8000a04 <_Z11DHT_getDataP10DHT_sensor+0x2a0>
 8000a6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a6e:	edc7 7a08 	vstr	s15, [r7, #32]
 8000a72:	e012      	b.n	8000a9a <_Z11DHT_getDataP10DHT_sensor+0x336>
			}	else {
				rawData[2] &= ~(1<<7);
 8000a74:	7dbb      	ldrb	r3, [r7, #22]
 8000a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	75bb      	strb	r3, [r7, #22]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8000a7e:	7dbb      	ldrb	r3, [r7, #22]
 8000a80:	021b      	lsls	r3, r3, #8
 8000a82:	7dfa      	ldrb	r2, [r7, #23]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	ee07 3a90 	vmov	s15, r3
 8000a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a8e:	ed1f 7a22 	vldr	s14, [pc, #-136]	; 8000a08 <_Z11DHT_getDataP10DHT_sensor+0x2a4>
 8000a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a96:	edc7 7a08 	vstr	s15, [r7, #32]
			}
		}
		if (sensor->type == DHT11) {
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	799b      	ldrb	r3, [r3, #6]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10d      	bne.n	8000abe <_Z11DHT_getDataP10DHT_sensor+0x35a>
			data.hum = (float)rawData[0];
 8000aa2:	7d3b      	ldrb	r3, [r7, #20]
 8000aa4:	ee07 3a90 	vmov	s15, r3
 8000aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aac:	edc7 7a07 	vstr	s15, [r7, #28]
			data.temp = (float)rawData[2];
 8000ab0:	7dbb      	ldrb	r3, [r7, #22]
 8000ab2:	ee07 3a90 	vmov	s15, r3
 8000ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aba:	edc7 7a08 	vstr	s15, [r7, #32]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 8000abe:	69fa      	ldr	r2, [r7, #28]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8000ac4:	6a3a      	ldr	r2, [r7, #32]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	f107 021c 	add.w	r2, r7, #28
 8000ad2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad6:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ade:	ee07 2a10 	vmov	s14, r2
 8000ae2:	ee07 3a90 	vmov	s15, r3
 8000ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8000aea:	eef0 0a67 	vmov.f32	s1, s15
 8000aee:	3738      	adds	r7, #56	; 0x38
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_ZN10PWMControl8unpacketEPhPi>:
 */

#include "PWMControl.h"

void PWMControl::unpacket(uint8_t *packet, int *PWMData)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	PWMData[0] = (packet[0]-OFFSET_CHAR_TO_INT) * 100 + (packet[1]-OFFSET_CHAR_TO_INT) * 10 + (packet[2]-OFFSET_CHAR_TO_INT);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	3b30      	subs	r3, #48	; 0x30
 8000b06:	2264      	movs	r2, #100	; 0x64
 8000b08:	fb02 f103 	mul.w	r1, r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b16:	4613      	mov	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	18ca      	adds	r2, r1, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	3302      	adds	r3, #2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	3b30      	subs	r3, #48	; 0x30
 8000b28:	441a      	add	r2, r3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	601a      	str	r2, [r3, #0]
	PWMData[1] = (packet[3]-OFFSET_CHAR_TO_INT) * 100 + (packet[4]-OFFSET_CHAR_TO_INT) * 10 + (packet[5]-OFFSET_CHAR_TO_INT);
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	3303      	adds	r3, #3
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	3b30      	subs	r3, #48	; 0x30
 8000b36:	2264      	movs	r2, #100	; 0x64
 8000b38:	fb02 f103 	mul.w	r1, r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b46:	4613      	mov	r3, r2
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4419      	add	r1, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	3305      	adds	r3, #5
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	440a      	add	r2, r1
 8000b60:	601a      	str	r2, [r3, #0]
	PWMData[2] = (packet[6]-OFFSET_CHAR_TO_INT) * 100 + (packet[7]-OFFSET_CHAR_TO_INT) * 10 + (packet[8]-OFFSET_CHAR_TO_INT);
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	3306      	adds	r3, #6
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	3b30      	subs	r3, #48	; 0x30
 8000b6a:	2264      	movs	r2, #100	; 0x64
 8000b6c:	fb02 f103 	mul.w	r1, r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	3307      	adds	r3, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4419      	add	r1, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	3308      	adds	r3, #8
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3308      	adds	r3, #8
 8000b92:	440a      	add	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi>:

void PWMControl::setPWMValue(TIM_HandleTypeDef *htim, uint32_t channel, int value)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
 8000bae:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d104      	bne.n	8000bc0 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi+0x1e>
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000bbe:	e013      	b.n	8000be8 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi+0x46>
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d104      	bne.n	8000bd0 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi+0x2e>
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	683a      	ldr	r2, [r7, #0]
 8000bcc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bce:	e00b      	b.n	8000be8 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi+0x46>
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d104      	bne.n	8000be0 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi+0x3e>
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bde:	e003      	b.n	8000be8 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi+0x46>
	__HAL_TIM_SET_COMPARE(htim, channel, value);
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN10RingBuffer5writeEh>:
 */

#include "ringBuffer.h"

bool RingBuffer::write(uint8_t data)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
	uint16_t next_write_index = (write_index + 1) % BUFFER_SIZE;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	3301      	adds	r3, #1
 8000c0a:	425a      	negs	r2, r3
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	b2d2      	uxtb	r2, r2
 8000c10:	bf58      	it	pl
 8000c12:	4253      	negpl	r3, r2
 8000c14:	81fb      	strh	r3, [r7, #14]
	if (next_write_index == read_index) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8b3 3102 	ldrh.w	r3, [r3, #258]	; 0x102
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	89fa      	ldrh	r2, [r7, #14]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	bf0c      	ite	eq
 8000c24:	2301      	moveq	r3, #1
 8000c26:	2300      	movne	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <_ZN10RingBuffer5writeEh+0x3e>
		// Buffer overflow
		return false;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e00c      	b.n	8000c4c <_ZN10RingBuffer5writeEh+0x58>
	}
	buffer[write_index] = data;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	78fa      	ldrb	r2, [r7, #3]
 8000c40:	545a      	strb	r2, [r3, r1]
	write_index = next_write_index;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	89fa      	ldrh	r2, [r7, #14]
 8000c46:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
	return true;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_ZN6Button12setLastStateEh>:
		TickType_t press_start_time = 0;
		uint32_t last_interrupt_time = 0;
		uint32_t interrupt_time;
		uint32_t press_duration;

		void setLastState(uint8_t state){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
			this->last_button_state = state;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	78fa      	ldrb	r2, [r7, #3]
 8000c68:	701a      	strb	r2, [r3, #0]
		}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <_ZN6Button15setCurrentStateEh>:
		void setCurrentState(uint8_t state){
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	70fb      	strb	r3, [r7, #3]
			this->current_button_state = state;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	78fa      	ldrb	r2, [r7, #3]
 8000c86:	705a      	strb	r2, [r3, #1]
		}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_ZN10RingBufferC1Ev>:
    	static const uint16_t BUFFER_SIZE = 256;
    	uint8_t buffer[BUFFER_SIZE];
    	volatile uint16_t write_index;
    	volatile uint16_t read_index;
	public:
    	RingBuffer(): write_index(0), read_index(0) {}
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_ZN6ButtonC1Ev>:
class Button {
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	705a      	strb	r2, [r3, #1]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]

	Button userButton;
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff ffdf 	bl	8000cba <_ZN6ButtonC1Ev>
	DataButtonPacket packet;

    userButton.last_interrupt_time = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    userButton.interrupt_time = HAL_GetTick();
 8000d00:	f001 f834 	bl	8001d6c <HAL_GetTick>
 8000d04:	4603      	mov	r3, r0
 8000d06:	623b      	str	r3, [r7, #32]

    if (GPIO_Pin == GPIO_PIN_13) {
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d0e:	d11a      	bne.n	8000d46 <HAL_GPIO_EXTI_Callback+0x5e>
        if (userButton.interrupt_time - userButton.last_interrupt_time > ANTI_BOUNCE_DELAY)
 8000d10:	6a3a      	ldr	r2, [r7, #32]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d915      	bls.n	8000d46 <HAL_GPIO_EXTI_Callback+0x5e>
        {
        	packet.ButtonState = !HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1e:	480c      	ldr	r0, [pc, #48]	; (8000d50 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d20:	f002 faee 	bl	8003300 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	723b      	strb	r3, [r7, #8]
        	osMessageQueuePut(buttonInterruptStateQueue, &packet.ButtonState, 0, 0);
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	f107 0108 	add.w	r1, r7, #8
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f005 fb5d 	bl	80063fc <osMessageQueuePut>

            userButton.last_interrupt_time = userButton.interrupt_time;
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	61fb      	str	r3, [r7, #28]
        }
    }
}
 8000d46:	bf00      	nop
 8000d48:	3728      	adds	r7, #40	; 0x28
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40020800 	.word	0x40020800
 8000d54:	200002d4 	.word	0x200002d4

08000d58 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a12      	ldr	r2, [pc, #72]	; (8000db0 <HAL_UART_RxCpltCallback+0x58>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d11d      	bne.n	8000da6 <HAL_UART_RxCpltCallback+0x4e>
        for (uint8_t i = 0; i < RECEIVE_PWM_PACKET_SIZE; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d80c      	bhi.n	8000d8e <HAL_UART_RxCpltCallback+0x36>
            rx_ring_buffer.write(rx_ring_buffer.dma_rx_buffer[i]);
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_UART_RxCpltCallback+0x5c>)
 8000d78:	4413      	add	r3, r2
 8000d7a:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <HAL_UART_RxCpltCallback+0x5c>)
 8000d82:	f7ff ff37 	bl	8000bf4 <_ZN10RingBuffer5writeEh>
        for (uint8_t i = 0; i < RECEIVE_PWM_PACKET_SIZE; i++) {
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e7ef      	b.n	8000d6e <HAL_UART_RxCpltCallback+0x16>
        }
        osMessageQueuePut(uartPWMMessageQueue, &rx_ring_buffer.dma_rx_buffer, 0, 0);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_UART_RxCpltCallback+0x60>)
 8000d90:	6818      	ldr	r0, [r3, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	2200      	movs	r2, #0
 8000d96:	4909      	ldr	r1, [pc, #36]	; (8000dbc <HAL_UART_RxCpltCallback+0x64>)
 8000d98:	f005 fb30 	bl	80063fc <osMessageQueuePut>
        HAL_UART_Receive_DMA(&huart2, rx_ring_buffer.dma_rx_buffer, RECEIVE_PWM_PACKET_SIZE);
 8000d9c:	2209      	movs	r2, #9
 8000d9e:	4907      	ldr	r1, [pc, #28]	; (8000dbc <HAL_UART_RxCpltCallback+0x64>)
 8000da0:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <HAL_UART_RxCpltCallback+0x68>)
 8000da2:	f004 f844 	bl	8004e2e <HAL_UART_Receive_DMA>
    }
}
 8000da6:	bf00      	nop
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004400 	.word	0x40004400
 8000db4:	200002e0 	.word	0x200002e0
 8000db8:	200002dc 	.word	0x200002dc
 8000dbc:	200003e4 	.word	0x200003e4
 8000dc0:	20000218 	.word	0x20000218

08000dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc8:	f000 ff9a 	bl	8001d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dcc:	f000 f898 	bl	8000f00 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd0:	f000 faa0 	bl	8001314 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000dd4:	f000 fa68 	bl	80012a8 <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000dd8:	f000 f8fc 	bl	8000fd4 <_ZL12MX_ADC1_Initv>
  MX_USART2_UART_Init();
 8000ddc:	f000 fa36 	bl	800124c <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8000de0:	f000 f954 	bl	800108c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 8000de4:	f000 f9ca 	bl	800117c <_ZL12MX_TIM4_Initv>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, rx_ring_buffer.dma_rx_buffer, RECEIVE_PWM_PACKET_SIZE);
 8000de8:	2209      	movs	r2, #9
 8000dea:	492e      	ldr	r1, [pc, #184]	; (8000ea4 <main+0xe0>)
 8000dec:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <main+0xe4>)
 8000dee:	f004 f81e 	bl	8004e2e <HAL_UART_Receive_DMA>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000df2:	2100      	movs	r1, #0
 8000df4:	482d      	ldr	r0, [pc, #180]	; (8000eac <main+0xe8>)
 8000df6:	f003 f97b 	bl	80040f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	482b      	ldr	r0, [pc, #172]	; (8000eac <main+0xe8>)
 8000dfe:	f003 f977 	bl	80040f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000e02:	2100      	movs	r1, #0
 8000e04:	482a      	ldr	r0, [pc, #168]	; (8000eb0 <main+0xec>)
 8000e06:	f003 f973 	bl	80040f0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e0a:	f005 f977 	bl	80060fc <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uartPWMMessageQueue = osMessageQueueNew(QUEUE_SIZE, RECEIVE_PWM_PACKET_SIZE * sizeof(uint8_t), NULL);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2109      	movs	r1, #9
 8000e12:	200a      	movs	r0, #10
 8000e14:	f005 fa7e 	bl	8006314 <osMessageQueueNew>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a26      	ldr	r2, [pc, #152]	; (8000eb4 <main+0xf0>)
 8000e1c:	6013      	str	r3, [r2, #0]
  sensorMessageQueue = osMessageQueueNew(QUEUE_SIZE, sizeof(DataSensorPacket), NULL);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2144      	movs	r1, #68	; 0x44
 8000e22:	200a      	movs	r0, #10
 8000e24:	f005 fa76 	bl	8006314 <osMessageQueueNew>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <main+0xf4>)
 8000e2c:	6013      	str	r3, [r2, #0]
  buttonInterruptStateQueue = osMessageQueueNew(QUEUE_SIZE, sizeof(DataButtonPacket), NULL);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2108      	movs	r1, #8
 8000e32:	200a      	movs	r0, #10
 8000e34:	f005 fa6e 	bl	8006314 <osMessageQueueNew>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	4a20      	ldr	r2, [pc, #128]	; (8000ebc <main+0xf8>)
 8000e3c:	6013      	str	r3, [r2, #0]
  buttonEventMessadgeQueue = osMessageQueueNew(QUEUE_SIZE, sizeof(DataButtonPacket), NULL);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2108      	movs	r1, #8
 8000e42:	200a      	movs	r0, #10
 8000e44:	f005 fa66 	bl	8006314 <osMessageQueueNew>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <main+0xfc>)
 8000e4c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of controlPWMLed */
  controlPWMLedHandle = osThreadNew(controlPWMLedTask, NULL, &controlPWMLed_attributes);
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <main+0x100>)
 8000e50:	2100      	movs	r1, #0
 8000e52:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <main+0x104>)
 8000e54:	f005 f9b1 	bl	80061ba <osThreadNew>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	; (8000ecc <main+0x108>)
 8000e5c:	6013      	str	r3, [r2, #0]

  /* creation of sensorHandler */
  sensorHandlerHandle = osThreadNew(sensorHandlerTask, NULL, &sensorHandler_attributes);
 8000e5e:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <main+0x10c>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	481c      	ldr	r0, [pc, #112]	; (8000ed4 <main+0x110>)
 8000e64:	f005 f9a9 	bl	80061ba <osThreadNew>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <main+0x114>)
 8000e6c:	6013      	str	r3, [r2, #0]

  /* creation of transmitData */
  transmitSensorDataHandle = osThreadNew(transmitDataTask, NULL, &transmitData_attributes);
 8000e6e:	4a1b      	ldr	r2, [pc, #108]	; (8000edc <main+0x118>)
 8000e70:	2100      	movs	r1, #0
 8000e72:	481b      	ldr	r0, [pc, #108]	; (8000ee0 <main+0x11c>)
 8000e74:	f005 f9a1 	bl	80061ba <osThreadNew>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ee4 <main+0x120>)
 8000e7c:	6013      	str	r3, [r2, #0]

  /* creation of buttonHandler */
  buttonHandlerHandle = osThreadNew(buttonHandlerTask, NULL, &buttonHandler_attributes);
 8000e7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <main+0x124>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	481a      	ldr	r0, [pc, #104]	; (8000eec <main+0x128>)
 8000e84:	f005 f999 	bl	80061ba <osThreadNew>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <main+0x12c>)
 8000e8c:	6013      	str	r3, [r2, #0]

  /* creation of buttonTransmitEvent */
  buttonTransmitEventHandle = osThreadNew(buttonTransmitEventTask, NULL, &buttonTransmitEvent_attributes);
 8000e8e:	4a19      	ldr	r2, [pc, #100]	; (8000ef4 <main+0x130>)
 8000e90:	2100      	movs	r1, #0
 8000e92:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <main+0x134>)
 8000e94:	f005 f991 	bl	80061ba <osThreadNew>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <main+0x138>)
 8000e9c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e9e:	f005 f951 	bl	8006144 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <main+0xde>
 8000ea4:	200003e4 	.word	0x200003e4
 8000ea8:	20000218 	.word	0x20000218
 8000eac:	20000188 	.word	0x20000188
 8000eb0:	200001d0 	.word	0x200001d0
 8000eb4:	200002dc 	.word	0x200002dc
 8000eb8:	200002d0 	.word	0x200002d0
 8000ebc:	200002d4 	.word	0x200002d4
 8000ec0:	200002d8 	.word	0x200002d8
 8000ec4:	080099c0 	.word	0x080099c0
 8000ec8:	080013f5 	.word	0x080013f5
 8000ecc:	200002bc 	.word	0x200002bc
 8000ed0:	080099e4 	.word	0x080099e4
 8000ed4:	08001469 	.word	0x08001469
 8000ed8:	200002c0 	.word	0x200002c0
 8000edc:	08009a08 	.word	0x08009a08
 8000ee0:	08001509 	.word	0x08001509
 8000ee4:	200002c4 	.word	0x200002c4
 8000ee8:	08009a2c 	.word	0x08009a2c
 8000eec:	08001579 	.word	0x08001579
 8000ef0:	200002c8 	.word	0x200002c8
 8000ef4:	08009a50 	.word	0x08009a50
 8000ef8:	08001609 	.word	0x08001609
 8000efc:	200002cc 	.word	0x200002cc

08000f00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b094      	sub	sp, #80	; 0x50
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2234      	movs	r2, #52	; 0x34
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f008 f88c 	bl	800902c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <_Z18SystemClock_Configv+0xcc>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <_Z18SystemClock_Configv+0xcc>)
 8000f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <_Z18SystemClock_Configv+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f40:	2300      	movs	r3, #0
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <_Z18SystemClock_Configv+0xd0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f4c:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <_Z18SystemClock_Configv+0xd0>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	4b1e      	ldr	r3, [pc, #120]	; (8000fd0 <_Z18SystemClock_Configv+0xd0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f5c:	603b      	str	r3, [r7, #0]
 8000f5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f70:	f107 031c 	add.w	r3, r7, #28
 8000f74:	4618      	mov	r0, r3
 8000f76:	f002 fd03 	bl	8003980 <HAL_RCC_OscConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf14      	ite	ne
 8000f80:	2301      	movne	r3, #1
 8000f82:	2300      	moveq	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8000f8a:	f000 fb75 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	230f      	movs	r3, #15
 8000f90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 f9f3 	bl	8003394 <HAL_RCC_ClockConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bf14      	ite	ne
 8000fb4:	2301      	movne	r3, #1
 8000fb6:	2300      	moveq	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <_Z18SystemClock_Configv+0xc2>
  {
    Error_Handler();
 8000fbe:	f000 fb5b 	bl	8001678 <Error_Handler>
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3750      	adds	r7, #80	; 0x50
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40007000 	.word	0x40007000

08000fd4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8000fe8:	4a26      	ldr	r2, [pc, #152]	; (8001084 <_ZL12MX_ADC1_Initv+0xb0>)
 8000fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000fec:	4b24      	ldr	r3, [pc, #144]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff2:	4b23      	ldr	r3, [pc, #140]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8001000:	2200      	movs	r2, #0
 8001002:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 800100e:	2200      	movs	r2, #0
 8001010:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8001014:	4a1c      	ldr	r2, [pc, #112]	; (8001088 <_ZL12MX_ADC1_Initv+0xb4>)
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8001020:	2201      	movs	r2, #1
 8001022:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8001026:	2200      	movs	r2, #0
 8001028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 800102e:	2201      	movs	r2, #1
 8001030:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001032:	4813      	ldr	r0, [pc, #76]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 8001034:	f000 feca 	bl	8001dcc <HAL_ADC_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	bf14      	ite	ne
 800103e:	2301      	movne	r3, #1
 8001040:	2300      	moveq	r3, #0
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8001048:	f000 fb16 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800104c:	2301      	movs	r3, #1
 800104e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001054:	2306      	movs	r3, #6
 8001056:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <_ZL12MX_ADC1_Initv+0xac>)
 800105e:	f001 f827 	bl	80020b0 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	bf14      	ite	ne
 8001068:	2301      	movne	r3, #1
 800106a:	2300      	moveq	r3, #0
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001072:	f000 fb01 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000e0 	.word	0x200000e0
 8001084:	40012000 	.word	0x40012000
 8001088:	0f000001 	.word	0x0f000001

0800108c <_ZL12MX_TIM3_Initv>:

  static void MX_TIM3_Init(void)
  {
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0

	  /* USER CODE BEGIN TIM3_Init 0 */

	  /* USER CODE END TIM3_Init 0 */

	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001092:	f107 0320 	add.w	r3, r7, #32
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	619a      	str	r2, [r3, #24]

	  /* USER CODE BEGIN TIM3_Init 1 */

	  /* USER CODE END TIM3_Init 1 */
	  htim3.Instance = TIM3;
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010b0:	4a31      	ldr	r2, [pc, #196]	; (8001178 <_ZL12MX_TIM3_Initv+0xec>)
 80010b2:	601a      	str	r2, [r3, #0]
	  htim3.Init.Prescaler = 0;
 80010b4:	4b2f      	ldr	r3, [pc, #188]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
	  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
	  htim3.Init.Period = 255;
 80010c0:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	60da      	str	r2, [r3, #12]
	  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c6:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
	  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b29      	ldr	r3, [pc, #164]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
	  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010d2:	4828      	ldr	r0, [pc, #160]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010d4:	f002 ffbc 	bl	8004050 <HAL_TIM_PWM_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf14      	ite	ne
 80010de:	2301      	movne	r3, #1
 80010e0:	2300      	moveq	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <_ZL12MX_TIM3_Initv+0x60>
	  {
	    Error_Handler();
 80010e8:	f000 fac6 	bl	8001678 <Error_Handler>
	  }
	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4619      	mov	r1, r3
 80010fa:	481e      	ldr	r0, [pc, #120]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 80010fc:	f003 fd28 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	bf14      	ite	ne
 8001106:	2301      	movne	r3, #1
 8001108:	2300      	moveq	r3, #0
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <_ZL12MX_TIM3_Initv+0x88>
	  {
	    Error_Handler();
 8001110:	f000 fab2 	bl	8001678 <Error_Handler>
	  }
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001114:	2360      	movs	r3, #96	; 0x60
 8001116:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	4812      	ldr	r0, [pc, #72]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 800112c:	f003 f9b0 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	bf14      	ite	ne
 8001136:	2301      	movne	r3, #1
 8001138:	2300      	moveq	r3, #0
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <_ZL12MX_TIM3_Initv+0xb8>
	  {
	    Error_Handler();
 8001140:	f000 fa9a 	bl	8001678 <Error_Handler>
	  }
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2204      	movs	r2, #4
 8001148:	4619      	mov	r1, r3
 800114a:	480a      	ldr	r0, [pc, #40]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 800114c:	f003 f9a0 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf14      	ite	ne
 8001156:	2301      	movne	r3, #1
 8001158:	2300      	moveq	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <_ZL12MX_TIM3_Initv+0xd8>
	  {
	    Error_Handler();
 8001160:	f000 fa8a 	bl	8001678 <Error_Handler>
	  }
	  /* USER CODE BEGIN TIM3_Init 2 */

	  /* USER CODE END TIM3_Init 2 */
	  HAL_TIM_MspPostInit(&htim3);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <_ZL12MX_TIM3_Initv+0xe8>)
 8001166:	f000 fb9b 	bl	80018a0 <HAL_TIM_MspPostInit>

  }
 800116a:	bf00      	nop
 800116c:	3728      	adds	r7, #40	; 0x28
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000188 	.word	0x20000188
 8001178:	40000400 	.word	0x40000400

0800117c <_ZL12MX_TIM4_Initv>:
    * @brief TIM4 Initialization Function
    * @param None
    * @retval None
    */
  static void MX_TIM4_Init(void)
  {
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	605a      	str	r2, [r3, #4]
 8001194:	609a      	str	r2, [r3, #8]
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	611a      	str	r2, [r3, #16]
 800119a:	615a      	str	r2, [r3, #20]
 800119c:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 800119e:	4b29      	ldr	r3, [pc, #164]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011a0:	4a29      	ldr	r2, [pc, #164]	; (8001248 <_ZL12MX_TIM4_Initv+0xcc>)
 80011a2:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 0;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 255;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011c2:	4820      	ldr	r0, [pc, #128]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011c4:	f002 ff44 	bl	8004050 <HAL_TIM_PWM_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <_ZL12MX_TIM4_Initv+0x60>
    {
      Error_Handler();
 80011d8:	f000 fa4e 	bl	8001678 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	4619      	mov	r1, r3
 80011ea:	4816      	ldr	r0, [pc, #88]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 80011ec:	f003 fcb0 	bl	8004b50 <HAL_TIMEx_MasterConfigSynchronization>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	bf14      	ite	ne
 80011f6:	2301      	movne	r3, #1
 80011f8:	2300      	moveq	r3, #0
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <_ZL12MX_TIM4_Initv+0x88>
    {
      Error_Handler();
 8001200:	f000 fa3a 	bl	8001678 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001204:	2360      	movs	r3, #96	; 0x60
 8001206:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2200      	movs	r2, #0
 8001218:	4619      	mov	r1, r3
 800121a:	480a      	ldr	r0, [pc, #40]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 800121c:	f003 f938 	bl	8004490 <HAL_TIM_PWM_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	bf14      	ite	ne
 8001226:	2301      	movne	r3, #1
 8001228:	2300      	moveq	r3, #0
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <_ZL12MX_TIM4_Initv+0xb8>
    {
      Error_Handler();
 8001230:	f000 fa22 	bl	8001678 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <_ZL12MX_TIM4_Initv+0xc8>)
 8001236:	f000 fb33 	bl	80018a0 <HAL_TIM_MspPostInit>

  }
 800123a:	bf00      	nop
 800123c:	3728      	adds	r7, #40	; 0x28
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001d0 	.word	0x200001d0
 8001248:	40000800 	.word	0x40000800

0800124c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4807      	ldr	r0, [pc, #28]	; (80012a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001284:	f003 fcf4 	bl	8004c70 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	bf14      	ite	ne
 800128e:	2301      	movne	r3, #1
 8001290:	2300      	moveq	r3, #0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001298:	f000 f9ee 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000218 	.word	0x20000218
 80012a4:	40004400 	.word	0x40004400

080012a8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
	  /* DMA controller clock enable */
	  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <_ZL11MX_DMA_Initv+0x68>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <_ZL11MX_DMA_Initv+0x68>)
 80012b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <_ZL11MX_DMA_Initv+0x68>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_ZL11MX_DMA_Initv+0x68>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <_ZL11MX_DMA_Initv+0x68>)
 80012d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <_ZL11MX_DMA_Initv+0x68>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	603b      	str	r3, [r7, #0]
 80012e4:	683b      	ldr	r3, [r7, #0]

	  /* DMA interrupt init */
	  /* DMA1_Stream5_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	2010      	movs	r0, #16
 80012ec:	f001 fa48 	bl	8002780 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012f0:	2010      	movs	r0, #16
 80012f2:	f001 fa61 	bl	80027b8 <HAL_NVIC_EnableIRQ>
	  /* DMA2_Stream0_IRQn interrupt configuration */
	  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2105      	movs	r1, #5
 80012fa:	2038      	movs	r0, #56	; 0x38
 80012fc:	f001 fa40 	bl	8002780 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001300:	2038      	movs	r0, #56	; 0x38
 8001302:	f001 fa59 	bl	80027b8 <HAL_NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a2d      	ldr	r2, [pc, #180]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001334:	f043 0304 	orr.w	r3, r3, #4
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b2b      	ldr	r3, [pc, #172]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a1f      	ldr	r2, [pc, #124]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 800136c:	f043 0301 	orr.w	r3, r3, #1
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b19      	ldr	r3, [pc, #100]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <_ZL12MX_GPIO_Initv+0xd4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800139a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013a0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80013a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <_ZL12MX_GPIO_Initv+0xd8>)
 80013b2:	f001 fe11 	bl	8002fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4809      	ldr	r0, [pc, #36]	; (80013f0 <_ZL12MX_GPIO_Initv+0xdc>)
 80013ca:	f001 fe05 	bl	8002fd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	2028      	movs	r0, #40	; 0x28
 80013d4:	f001 f9d4 	bl	8002780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d8:	2028      	movs	r0, #40	; 0x28
 80013da:	f001 f9ed 	bl	80027b8 <HAL_NVIC_EnableIRQ>

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020400 	.word	0x40020400

080013f4 <_Z17controlPWMLedTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_controlPWMLedTask */
void controlPWMLedTask(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	; 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    PWMControl LEDControl;
    int LEDData[3];
  /* Infinite loop */
  for(;;)
  {
      if (osMessageQueueGet(uartPWMMessageQueue, &packet, NULL, osWaitForever) == osOK)
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <_Z17controlPWMLedTaskPv+0x68>)
 80013fe:	6818      	ldr	r0, [r3, #0]
 8001400:	f107 011c 	add.w	r1, r7, #28
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
 8001408:	2200      	movs	r2, #0
 800140a:	f005 f857 	bl	80064bc <osMessageQueueGet>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf0c      	ite	eq
 8001414:	2301      	moveq	r3, #1
 8001416:	2300      	movne	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0ee      	beq.n	80013fc <_Z17controlPWMLedTaskPv+0x8>
      {
    	  LEDControl.unpacket(packet, LEDData);
 800141e:	f107 020c 	add.w	r2, r7, #12
 8001422:	f107 011c 	add.w	r1, r7, #28
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fb62 	bl	8000af4 <_ZN10PWMControl8unpacketEPhPi>
    	  LEDControl.setPWMValue(&htim3, TIM_CHANNEL_1, LEDData[0]);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f107 0018 	add.w	r0, r7, #24
 8001436:	2200      	movs	r2, #0
 8001438:	4909      	ldr	r1, [pc, #36]	; (8001460 <_Z17controlPWMLedTaskPv+0x6c>)
 800143a:	f7ff fbb2 	bl	8000ba2 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi>
    	  LEDControl.setPWMValue(&htim3, TIM_CHANNEL_2, LEDData[1]);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f107 0018 	add.w	r0, r7, #24
 8001444:	2204      	movs	r2, #4
 8001446:	4906      	ldr	r1, [pc, #24]	; (8001460 <_Z17controlPWMLedTaskPv+0x6c>)
 8001448:	f7ff fbab 	bl	8000ba2 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi>
    	  LEDControl.setPWMValue(&htim4, TIM_CHANNEL_1, LEDData[2]);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f107 0018 	add.w	r0, r7, #24
 8001452:	2200      	movs	r2, #0
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <_Z17controlPWMLedTaskPv+0x70>)
 8001456:	f7ff fba4 	bl	8000ba2 <_ZN10PWMControl11setPWMValueEP17TIM_HandleTypeDefmi>
      if (osMessageQueueGet(uartPWMMessageQueue, &packet, NULL, osWaitForever) == osOK)
 800145a:	e7cf      	b.n	80013fc <_Z17controlPWMLedTaskPv+0x8>
 800145c:	200002dc 	.word	0x200002dc
 8001460:	20000188 	.word	0x20000188
 8001464:	200001d0 	.word	0x200001d0

08001468 <_Z17sensorHandlerTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorHandlerTask */
void sensorHandlerTask(void *argument)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	DataSensorPacket packet;

  /* Infinite loop */
  for(;;)
  {
	  DHT_data d = DHT_getData(&livingRoom);
 8001470:	4820      	ldr	r0, [pc, #128]	; (80014f4 <_Z17sensorHandlerTaskPv+0x8c>)
 8001472:	f7ff f977 	bl	8000764 <_Z11DHT_getDataP10DHT_sensor>
 8001476:	eeb0 7a40 	vmov.f32	s14, s0
 800147a:	eef0 7a60 	vmov.f32	s15, s1
 800147e:	ed87 7a03 	vstr	s14, [r7, #12]
 8001482:	edc7 7a04 	vstr	s15, [r7, #16]
	  sprintf(packet.SensorData, "Temperature %d C, Humidity %d%%", (uint8_t)d.temp, (uint8_t)d.hum);
 8001486:	edd7 7a04 	vldr	s15, [r7, #16]
 800148a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800148e:	edc7 7a00 	vstr	s15, [r7]
 8001492:	783b      	ldrb	r3, [r7, #0]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	461a      	mov	r2, r3
 8001498:	edd7 7a03 	vldr	s15, [r7, #12]
 800149c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014a0:	edc7 7a00 	vstr	s15, [r7]
 80014a4:	783b      	ldrb	r3, [r7, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f107 0014 	add.w	r0, r7, #20
 80014ac:	4912      	ldr	r1, [pc, #72]	; (80014f8 <_Z17sensorHandlerTaskPv+0x90>)
 80014ae:	f007 fdc5 	bl	800903c <siprintf>

	  HAL_ADC_Start_DMA(&hadc1, packet.adc_value, 1);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	3334      	adds	r3, #52	; 0x34
 80014b8:	2201      	movs	r2, #1
 80014ba:	4619      	mov	r1, r3
 80014bc:	480f      	ldr	r0, [pc, #60]	; (80014fc <_Z17sensorHandlerTaskPv+0x94>)
 80014be:	f000 fcc9 	bl	8001e54 <HAL_ADC_Start_DMA>
	  sprintf(packet.ADCData, "ADC: %d\n", static_cast<uint16_t> (packet.adc_value[0]));
 80014c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	461a      	mov	r2, r3
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	3338      	adds	r3, #56	; 0x38
 80014ce:	490c      	ldr	r1, [pc, #48]	; (8001500 <_Z17sensorHandlerTaskPv+0x98>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f007 fdb3 	bl	800903c <siprintf>

	  osMessageQueuePut(sensorMessageQueue, &packet, 0, osWaitForever);
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <_Z17sensorHandlerTaskPv+0x9c>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	f107 0114 	add.w	r1, r7, #20
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	2200      	movs	r2, #0
 80014e4:	f004 ff8a 	bl	80063fc <osMessageQueuePut>
	  osDelay(1000);
 80014e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014ec:	f004 fef7 	bl	80062de <osDelay>
  }
 80014f0:	e7be      	b.n	8001470 <_Z17sensorHandlerTaskPv+0x8>
 80014f2:	bf00      	nop
 80014f4:	2000003c 	.word	0x2000003c
 80014f8:	0800997c 	.word	0x0800997c
 80014fc:	200000e0 	.word	0x200000e0
 8001500:	0800999c 	.word	0x0800999c
 8001504:	200002d0 	.word	0x200002d0

08001508 <_Z16transmitDataTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitDataTask */
void transmitDataTask(void *argument)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  DataSensorPacket packet;

  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(sensorMessageQueue, &packet, NULL, osWaitForever) == osOK)
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <_Z16transmitDataTaskPv+0x68>)
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	f107 010c 	add.w	r1, r7, #12
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
 800151c:	2200      	movs	r2, #0
 800151e:	f004 ffcd 	bl	80064bc <osMessageQueueGet>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0ee      	beq.n	8001510 <_Z16transmitDataTaskPv+0x8>
	  {
		  //osMutexAcquire(uartMutex, osWaitForever);
		  HAL_UART_Transmit(&huart2, (uint8_t*)packet.ADCData, strlen(packet.ADCData), 0xFF);
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	3338      	adds	r3, #56	; 0x38
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe69 	bl	8000210 <strlen>
 800153e:	4603      	mov	r3, r0
 8001540:	b29a      	uxth	r2, r3
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800154a:	23ff      	movs	r3, #255	; 0xff
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <_Z16transmitDataTaskPv+0x6c>)
 800154e:	f003 fbdc 	bl	8004d0a <HAL_UART_Transmit>
	      HAL_UART_Transmit(&huart2, (uint8_t*)packet.SensorData, strlen(packet.SensorData), 0xFF);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe fe5a 	bl	8000210 <strlen>
 800155c:	4603      	mov	r3, r0
 800155e:	b29a      	uxth	r2, r3
 8001560:	f107 010c 	add.w	r1, r7, #12
 8001564:	23ff      	movs	r3, #255	; 0xff
 8001566:	4803      	ldr	r0, [pc, #12]	; (8001574 <_Z16transmitDataTaskPv+0x6c>)
 8001568:	f003 fbcf 	bl	8004d0a <HAL_UART_Transmit>
	  if (osMessageQueueGet(sensorMessageQueue, &packet, NULL, osWaitForever) == osOK)
 800156c:	e7d0      	b.n	8001510 <_Z16transmitDataTaskPv+0x8>
 800156e:	bf00      	nop
 8001570:	200002d0 	.word	0x200002d0
 8001574:	20000218 	.word	0x20000218

08001578 <_Z17buttonHandlerTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buttonHandlerTask */
void buttonHandlerTask(void *argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonHandlerTask */

	DataButtonPacket packet;
	Button userButton;
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fb98 	bl	8000cba <_ZN6ButtonC1Ev>

  /* Infinite loop */
  for(;;)
  {
	 if(osMessageQueueGet(buttonInterruptStateQueue, &packet, NULL, NULL) == osOK)
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <_Z17buttonHandlerTaskPv+0x88>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	f107 0120 	add.w	r1, r7, #32
 8001592:	2300      	movs	r3, #0
 8001594:	2200      	movs	r2, #0
 8001596:	f004 ff91 	bl	80064bc <osMessageQueueGet>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf0c      	ite	eq
 80015a0:	2301      	moveq	r3, #1
 80015a2:	2300      	movne	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d008      	beq.n	80015bc <_Z17buttonHandlerTaskPv+0x44>
	 {
		 userButton.setCurrentState(packet.ButtonState);
 80015aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff fb5d 	bl	8000c76 <_ZN6Button15setCurrentStateEh>
	 }

	 packet.event = userButton.getButtonEvent();
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f817 	bl	80005f4 <_ZN6Button14getButtonEventEv>
 80015c6:	4603      	mov	r3, r0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
	 if(packet.event)
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d008      	beq.n	80015e2 <_Z17buttonHandlerTaskPv+0x6a>
	 {
		 osMessageQueuePut(buttonEventMessadgeQueue, &packet, 0, osWaitForever);
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <_Z17buttonHandlerTaskPv+0x8c>)
 80015d2:	6818      	ldr	r0, [r3, #0]
 80015d4:	f107 0120 	add.w	r1, r7, #32
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	2200      	movs	r2, #0
 80015de:	f004 ff0d 	bl	80063fc <osMessageQueuePut>
	 }
	 userButton.setLastState(userButton.getCurrentState());
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fff8 	bl	80005dc <_ZN6Button15getCurrentStateEv>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fb2e 	bl	8000c58 <_ZN6Button12setLastStateEh>
	 if(osMessageQueueGet(buttonInterruptStateQueue, &packet, NULL, NULL) == osOK)
 80015fc:	e7c5      	b.n	800158a <_Z17buttonHandlerTaskPv+0x12>
 80015fe:	bf00      	nop
 8001600:	200002d4 	.word	0x200002d4
 8001604:	200002d8 	.word	0x200002d8

08001608 <_Z23buttonTransmitEventTaskPv>:
}


/* USER CODE END Header_buttonTransmitEventTask */
void buttonTransmitEventTask(void *argument)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	DataButtonPacket packet;

	/* Infinite loop */
	for(;;)
	{
		if(osMessageQueueGet(buttonEventMessadgeQueue, &packet, NULL, osWaitForever) == osOK) {
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <_Z23buttonTransmitEventTaskPv+0x44>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	f107 0108 	add.w	r1, r7, #8
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	2200      	movs	r2, #0
 800161e:	f004 ff4d 	bl	80064bc <osMessageQueueGet>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0ee      	beq.n	8001610 <_Z23buttonTransmitEventTaskPv+0x8>
			//osMutexAcquire(uartMutex, osWaitForever);
			HAL_UART_Transmit(&huart2, packet.event, strlen((const char*)packet.event), 0xFF);
 8001632:	68fc      	ldr	r4, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fdea 	bl	8000210 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	23ff      	movs	r3, #255	; 0xff
 8001642:	4621      	mov	r1, r4
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <_Z23buttonTransmitEventTaskPv+0x48>)
 8001646:	f003 fb60 	bl	8004d0a <HAL_UART_Transmit>
		if(osMessageQueueGet(buttonEventMessadgeQueue, &packet, NULL, osWaitForever) == osOK) {
 800164a:	e7e1      	b.n	8001610 <_Z23buttonTransmitEventTaskPv+0x8>
 800164c:	200002d8 	.word	0x200002d8
 8001650:	20000218 	.word	0x20000218

08001654 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a04      	ldr	r2, [pc, #16]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d101      	bne.n	800166a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001666:	f000 fb6d 	bl	8001d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40010000 	.word	0x40010000

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d107      	bne.n	80016a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800169a:	4293      	cmp	r3, r2
 800169c:	d102      	bne.n	80016a4 <_Z41__static_initialization_and_destruction_0ii+0x20>
RingBuffer rx_ring_buffer;
 800169e:	4803      	ldr	r0, [pc, #12]	; (80016ac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80016a0:	f7ff faf8 	bl	8000c94 <_ZN10RingBufferC1Ev>
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200002e0 	.word	0x200002e0

080016b0 <_GLOBAL__sub_I_hadc1>:
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016b8:	2001      	movs	r0, #1
 80016ba:	f7ff ffe3 	bl	8001684 <_Z41__static_initialization_and_destruction_0ii>
 80016be:	bd80      	pop	{r7, pc}

080016c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_MspInit+0x54>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	4a11      	ldr	r2, [pc, #68]	; (8001714 <HAL_MspInit+0x54>)
 80016d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d4:	6453      	str	r3, [r2, #68]	; 0x44
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_MspInit+0x54>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016de:	607b      	str	r3, [r7, #4]
 80016e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_MspInit+0x54>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_MspInit+0x54>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_MspInit+0x54>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	210f      	movs	r1, #15
 8001702:	f06f 0001 	mvn.w	r0, #1
 8001706:	f001 f83b 	bl	8002780 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <HAL_ADC_MspInit+0xdc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d157      	bne.n	80017ea <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
 800173e:	4b2e      	ldr	r3, [pc, #184]	; (80017f8 <HAL_ADC_MspInit+0xe0>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a2d      	ldr	r2, [pc, #180]	; (80017f8 <HAL_ADC_MspInit+0xe0>)
 8001744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b2b      	ldr	r3, [pc, #172]	; (80017f8 <HAL_ADC_MspInit+0xe0>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_ADC_MspInit+0xe0>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a26      	ldr	r2, [pc, #152]	; (80017f8 <HAL_ADC_MspInit+0xe0>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_ADC_MspInit+0xe0>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001772:	2302      	movs	r3, #2
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001776:	2303      	movs	r3, #3
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	481d      	ldr	r0, [pc, #116]	; (80017fc <HAL_ADC_MspInit+0xe4>)
 8001786:	f001 fc27 	bl	8002fd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800178c:	4a1d      	ldr	r2, [pc, #116]	; (8001804 <HAL_ADC_MspInit+0xec>)
 800178e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001790:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001792:	2200      	movs	r2, #0
 8001794:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c8:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017d0:	f001 f800 	bl	80027d4 <HAL_DMA_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80017da:	f7ff ff4d 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a07      	ldr	r2, [pc, #28]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017e2:	639a      	str	r2, [r3, #56]	; 0x38
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_ADC_MspInit+0xe8>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40012000 	.word	0x40012000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000
 8001800:	20000128 	.word	0x20000128
 8001804:	40026410 	.word	0x40026410

08001808 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001818:	d10e      	bne.n	8001838 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001836:	e026      	b.n	8001886 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM3)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a16      	ldr	r2, [pc, #88]	; (8001898 <HAL_TIM_PWM_MspInit+0x90>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10e      	bne.n	8001860 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6413      	str	r3, [r2, #64]	; 0x40
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]
}
 800185e:	e012      	b.n	8001886 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_TIM_PWM_MspInit+0x94>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d10d      	bne.n	8001886 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6413      	str	r3, [r2, #64]	; 0x40
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_TIM_PWM_MspInit+0x8c>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40000400 	.word	0x40000400
 800189c:	40000800 	.word	0x40000800

080018a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c0:	d11e      	bne.n	8001900 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a33      	ldr	r2, [pc, #204]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018de:	2308      	movs	r3, #8
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ee:	2301      	movs	r3, #1
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4828      	ldr	r0, [pc, #160]	; (800199c <HAL_TIM_MspPostInit+0xfc>)
 80018fa:	f001 fb6d 	bl	8002fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018fe:	e046      	b.n	800198e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_TIM_MspPostInit+0x100>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d11e      	bne.n	8001948 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b22      	ldr	r3, [pc, #136]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a21      	ldr	r2, [pc, #132]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 8001914:	f043 0302 	orr.w	r3, r3, #2
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001926:	2330      	movs	r3, #48	; 0x30
 8001928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192a:	2302      	movs	r3, #2
 800192c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001932:	2300      	movs	r3, #0
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001936:	2302      	movs	r3, #2
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193a:	f107 0314 	add.w	r3, r7, #20
 800193e:	4619      	mov	r1, r3
 8001940:	4816      	ldr	r0, [pc, #88]	; (800199c <HAL_TIM_MspPostInit+0xfc>)
 8001942:	f001 fb49 	bl	8002fd8 <HAL_GPIO_Init>
}
 8001946:	e022      	b.n	800198e <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a15      	ldr	r2, [pc, #84]	; (80019a4 <HAL_TIM_MspPostInit+0x104>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d11d      	bne.n	800198e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a0f      	ldr	r2, [pc, #60]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <HAL_TIM_MspPostInit+0xf8>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196e:	2340      	movs	r3, #64	; 0x40
 8001970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800197e:	2302      	movs	r3, #2
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4804      	ldr	r0, [pc, #16]	; (800199c <HAL_TIM_MspPostInit+0xfc>)
 800198a:	f001 fb25 	bl	8002fd8 <HAL_GPIO_Init>
}
 800198e:	bf00      	nop
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800
 800199c:	40020400 	.word	0x40020400
 80019a0:	40000400 	.word	0x40000400
 80019a4:	40000800 	.word	0x40000800

080019a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <HAL_UART_MspInit+0xf0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d161      	bne.n	8001a8e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
 80019ce:	4b33      	ldr	r3, [pc, #204]	; (8001a9c <HAL_UART_MspInit+0xf4>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <HAL_UART_MspInit+0xf4>)
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_UART_MspInit+0xf4>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b2c      	ldr	r3, [pc, #176]	; (8001a9c <HAL_UART_MspInit+0xf4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <HAL_UART_MspInit+0xf4>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6313      	str	r3, [r2, #48]	; 0x30
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <HAL_UART_MspInit+0xf4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a02:	230c      	movs	r3, #12
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a12:	2307      	movs	r3, #7
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a16:	f107 0314 	add.w	r3, r7, #20
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4820      	ldr	r0, [pc, #128]	; (8001aa0 <HAL_UART_MspInit+0xf8>)
 8001a1e:	f001 fadb 	bl	8002fd8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a24:	4a20      	ldr	r2, [pc, #128]	; (8001aa8 <HAL_UART_MspInit+0x100>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a44:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a62:	4810      	ldr	r0, [pc, #64]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a64:	f000 feb6 	bl	80027d4 <HAL_DMA_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001a6e:	f7ff fe03 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a76:	639a      	str	r2, [r3, #56]	; 0x38
 8001a78:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_UART_MspInit+0xfc>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2105      	movs	r1, #5
 8001a82:	2026      	movs	r0, #38	; 0x26
 8001a84:	f000 fe7c 	bl	8002780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a88:	2026      	movs	r0, #38	; 0x26
 8001a8a:	f000 fe95 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3728      	adds	r7, #40	; 0x28
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020000 	.word	0x40020000
 8001aa4:	2000025c 	.word	0x2000025c
 8001aa8:	40026088 	.word	0x40026088

08001aac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08c      	sub	sp, #48	; 0x30
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_InitTick+0xd0>)
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	4a2d      	ldr	r2, [pc, #180]	; (8001b7c <HAL_InitTick+0xd0>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	6453      	str	r3, [r2, #68]	; 0x44
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_InitTick+0xd0>)
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ad8:	f107 020c 	add.w	r2, r7, #12
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f001 fd70 	bl	80035c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ae8:	f001 fd5a 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8001aec:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <HAL_InitTick+0xd4>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	3b01      	subs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_InitTick+0xd8>)
 8001afe:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <HAL_InitTick+0xdc>)
 8001b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b08:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b10:	4b1c      	ldr	r3, [pc, #112]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b22:	4818      	ldr	r0, [pc, #96]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b24:	f002 f9ca 	bl	8003ebc <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11b      	bne.n	8001b6e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b36:	4813      	ldr	r0, [pc, #76]	; (8001b84 <HAL_InitTick+0xd8>)
 8001b38:	f002 fa1a 	bl	8003f70 <HAL_TIM_Base_Start_IT>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d111      	bne.n	8001b6e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b4a:	2019      	movs	r0, #25
 8001b4c:	f000 fe34 	bl	80027b8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d808      	bhi.n	8001b68 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b56:	2200      	movs	r2, #0
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	2019      	movs	r0, #25
 8001b5c:	f000 fe10 	bl	8002780 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_InitTick+0xe0>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e002      	b.n	8001b6e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	431bde83 	.word	0x431bde83
 8001b84:	200003f0 	.word	0x200003f0
 8001b88:	40010000 	.word	0x40010000
 8001b8c:	20000054 	.word	0x20000054

08001b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <NMI_Handler+0x4>

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA1_Stream5_IRQHandler+0x10>)
 8001bc2:	f000 ff9f 	bl	8002b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	2000025c 	.word	0x2000025c

08001bd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bd6:	f002 fb53 	bl	8004280 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200003f0 	.word	0x200003f0

08001be4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <USART2_IRQHandler+0x10>)
 8001bea:	f003 f951 	bl	8004e90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000218 	.word	0x20000218

08001bf8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001bfc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c00:	f001 fbb0 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA2_Stream0_IRQHandler+0x10>)
 8001c0e:	f000 ff79 	bl	8002b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000128 	.word	0x20000128

08001c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <_sbrk+0x5c>)
 8001c26:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <_sbrk+0x60>)
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <_sbrk+0x64>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <_sbrk+0x68>)
 8001c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d207      	bcs.n	8001c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c4c:	f007 f9b6 	bl	8008fbc <__errno>
 8001c50:	4603      	mov	r3, r0
 8001c52:	220c      	movs	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5a:	e009      	b.n	8001c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <_sbrk+0x64>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c62:	4b07      	ldr	r3, [pc, #28]	; (8001c80 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <_sbrk+0x64>)
 8001c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	20020000 	.word	0x20020000
 8001c7c:	00000400 	.word	0x00000400
 8001c80:	20000438 	.word	0x20000438
 8001c84:	20004da0 	.word	0x20004da0

08001c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <SystemInit+0x20>)
 8001c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <SystemInit+0x20>)
 8001c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb2:	490e      	ldr	r1, [pc, #56]	; (8001cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb4:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0b      	ldr	r2, [pc, #44]	; (8001cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cc8:	4c0b      	ldr	r4, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd6:	f7ff ffd7 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cda:	f007 f975 	bl	8008fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cde:	f7ff f871 	bl	8000dc4 <main>
  bx  lr    
 8001ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001cf0:	08009adc 	.word	0x08009adc
  ldr r2, =_sbss
 8001cf4:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001cf8:	20004da0 	.word	0x20004da0

08001cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC_IRQHandler>
	...

08001d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_Init+0x40>)
 8001d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_Init+0x40>)
 8001d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a07      	ldr	r2, [pc, #28]	; (8001d40 <HAL_Init+0x40>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f000 fd1e 	bl	800276a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f7ff febc 	bl	8001aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d34:	f7ff fcc4 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000058 	.word	0x20000058
 8001d68:	2000043c 	.word	0x2000043c

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	2000043c 	.word	0x2000043c

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000058 	.word	0x20000058

08001dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e033      	b.n	8001e4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fc94 	bl	8001718 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa78 	bl	8002314 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	; 0x40
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Start_DMA+0x1e>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e0e9      	b.n	8002046 <HAL_ADC_Start_DMA+0x1f2>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d018      	beq.n	8001eba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e98:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_ADC_Start_DMA+0x1fc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6d      	ldr	r2, [pc, #436]	; (8002054 <HAL_ADC_Start_DMA+0x200>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9a      	lsrs	r2, r3, #18
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001eac:	e002      	b.n	8001eb4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f9      	bne.n	8001eae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec8:	d107      	bne.n	8001eda <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	f040 80a1 	bne.w	800202c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f14:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f28:	d106      	bne.n	8001f38 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2e:	f023 0206 	bic.w	r2, r3, #6
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
 8001f36:	e002      	b.n	8001f3e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f46:	4b44      	ldr	r3, [pc, #272]	; (8002058 <HAL_ADC_Start_DMA+0x204>)
 8001f48:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4a43      	ldr	r2, [pc, #268]	; (800205c <HAL_ADC_Start_DMA+0x208>)
 8001f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	4a42      	ldr	r2, [pc, #264]	; (8002060 <HAL_ADC_Start_DMA+0x20c>)
 8001f58:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	4a41      	ldr	r2, [pc, #260]	; (8002064 <HAL_ADC_Start_DMA+0x210>)
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001f7a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f8a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	334c      	adds	r3, #76	; 0x4c
 8001f96:	4619      	mov	r1, r3
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f000 fcc8 	bl	8002930 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d12a      	bne.n	8002002 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <HAL_ADC_Start_DMA+0x214>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d015      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0x18e>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a2c      	ldr	r2, [pc, #176]	; (800206c <HAL_ADC_Start_DMA+0x218>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d105      	bne.n	8001fcc <HAL_ADC_Start_DMA+0x178>
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_ADC_Start_DMA+0x204>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_ADC_Start_DMA+0x21c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d136      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_ADC_Start_DMA+0x204>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d130      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d129      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	e020      	b.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_ADC_Start_DMA+0x214>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d11b      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d114      	bne.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002028:	609a      	str	r2, [r3, #8]
 800202a:	e00b      	b.n	8002044 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002030:	f043 0210 	orr.w	r2, r3, #16
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f043 0201 	orr.w	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000050 	.word	0x20000050
 8002054:	431bde83 	.word	0x431bde83
 8002058:	40012300 	.word	0x40012300
 800205c:	0800250d 	.word	0x0800250d
 8002060:	080025c7 	.word	0x080025c7
 8002064:	080025e3 	.word	0x080025e3
 8002068:	40012000 	.word	0x40012000
 800206c:	40012100 	.word	0x40012100
 8002070:	40012200 	.word	0x40012200

08002074 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x1c>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e113      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x244>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d925      	bls.n	8002128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68d9      	ldr	r1, [r3, #12]
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	3b1e      	subs	r3, #30
 80020f2:	2207      	movs	r2, #7
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43da      	mvns	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	400a      	ands	r2, r1
 8002100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68d9      	ldr	r1, [r3, #12]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	4603      	mov	r3, r0
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4403      	add	r3, r0
 800211a:	3b1e      	subs	r3, #30
 800211c:	409a      	lsls	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	e022      	b.n	800216e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6919      	ldr	r1, [r3, #16]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	2207      	movs	r2, #7
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	400a      	ands	r2, r1
 800214a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	4603      	mov	r3, r0
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4403      	add	r3, r0
 8002164:	409a      	lsls	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b06      	cmp	r3, #6
 8002174:	d824      	bhi.n	80021c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	3b05      	subs	r3, #5
 8002188:	221f      	movs	r2, #31
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	400a      	ands	r2, r1
 8002196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4618      	mov	r0, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	3b05      	subs	r3, #5
 80021b2:	fa00 f203 	lsl.w	r2, r0, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
 80021be:	e04c      	b.n	800225a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d824      	bhi.n	8002212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	3b23      	subs	r3, #35	; 0x23
 80021da:	221f      	movs	r2, #31
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43da      	mvns	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b23      	subs	r3, #35	; 0x23
 8002204:	fa00 f203 	lsl.w	r2, r0, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
 8002210:	e023      	b.n	800225a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b41      	subs	r3, #65	; 0x41
 8002224:	221f      	movs	r2, #31
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	400a      	ands	r2, r1
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	4618      	mov	r0, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4413      	add	r3, r2
 800224c:	3b41      	subs	r3, #65	; 0x41
 800224e:	fa00 f203 	lsl.w	r2, r0, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <HAL_ADC_ConfigChannel+0x250>)
 800225c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a28      	ldr	r2, [pc, #160]	; (8002304 <HAL_ADC_ConfigChannel+0x254>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d10f      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d8>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b12      	cmp	r3, #18
 800226e:	d10b      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <HAL_ADC_ConfigChannel+0x254>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d12b      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x23a>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1c      	ldr	r2, [pc, #112]	; (8002308 <HAL_ADC_ConfigChannel+0x258>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d003      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0x1f4>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b11      	cmp	r3, #17
 80022a2:	d122      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a11      	ldr	r2, [pc, #68]	; (8002308 <HAL_ADC_ConfigChannel+0x258>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d111      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_ADC_ConfigChannel+0x25c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a11      	ldr	r2, [pc, #68]	; (8002310 <HAL_ADC_ConfigChannel+0x260>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9a      	lsrs	r2, r3, #18
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022dc:	e002      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f9      	bne.n	80022de <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40012300 	.word	0x40012300
 8002304:	40012000 	.word	0x40012000
 8002308:	10000012 	.word	0x10000012
 800230c:	20000050 	.word	0x20000050
 8002310:	431bde83 	.word	0x431bde83

08002314 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800231c:	4b79      	ldr	r3, [pc, #484]	; (8002504 <ADC_Init+0x1f0>)
 800231e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	431a      	orrs	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	021a      	lsls	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800238e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a6:	4a58      	ldr	r2, [pc, #352]	; (8002508 <ADC_Init+0x1f4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d022      	beq.n	80023f2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6899      	ldr	r1, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6899      	ldr	r1, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	e00f      	b.n	8002412 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002410:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0202 	bic.w	r2, r2, #2
 8002420:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6899      	ldr	r1, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e1b      	ldrb	r3, [r3, #24]
 800242c:	005a      	lsls	r2, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	430a      	orrs	r2, r1
 8002434:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01b      	beq.n	8002478 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800245e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6859      	ldr	r1, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	3b01      	subs	r3, #1
 800246c:	035a      	lsls	r2, r3, #13
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	e007      	b.n	8002488 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002486:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002496:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	051a      	lsls	r2, r3, #20
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ca:	025a      	lsls	r2, r3, #9
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	029a      	lsls	r2, r3, #10
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	0f000001 	.word	0x0f000001

0800250c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002522:	2b00      	cmp	r3, #0
 8002524:	d13c      	bne.n	80025a0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d12b      	bne.n	8002598 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002544:	2b00      	cmp	r3, #0
 8002546:	d127      	bne.n	8002598 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002560:	2b00      	cmp	r3, #0
 8002562:	d119      	bne.n	8002598 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0220 	bic.w	r2, r2, #32
 8002572:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	f043 0201 	orr.w	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fd6b 	bl	8002074 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800259e:	e00e      	b.n	80025be <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	f003 0310 	and.w	r3, r3, #16
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fd75 	bl	800209c <HAL_ADC_ErrorCallback>
}
 80025b2:	e004      	b.n	80025be <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7ff fd57 	bl	8002088 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025da:	bf00      	nop
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b084      	sub	sp, #16
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fa:	f043 0204 	orr.w	r2, r3, #4
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff fd4a 	bl	800209c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002608:	bf00      	nop
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800262c:	4013      	ands	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800263c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002642:	4a04      	ldr	r2, [pc, #16]	; (8002654 <__NVIC_SetPriorityGrouping+0x44>)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	60d3      	str	r3, [r2, #12]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <__NVIC_GetPriorityGrouping+0x18>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	f003 0307 	and.w	r3, r3, #7
}
 8002666:	4618      	mov	r0, r3
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	2b00      	cmp	r3, #0
 8002684:	db0b      	blt.n	800269e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	f003 021f 	and.w	r2, r3, #31
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <__NVIC_EnableIRQ+0x38>)
 800268e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	2001      	movs	r0, #1
 8002696:	fa00 f202 	lsl.w	r2, r0, r2
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	e000e100 	.word	0xe000e100

080026b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
         );
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff4c 	bl	8002610 <__NVIC_SetPriorityGrouping>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002792:	f7ff ff61 	bl	8002658 <__NVIC_GetPriorityGrouping>
 8002796:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	6978      	ldr	r0, [r7, #20]
 800279e:	f7ff ffb1 	bl	8002704 <NVIC_EncodePriority>
 80027a2:	4602      	mov	r2, r0
 80027a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff80 	bl	80026b0 <__NVIC_SetPriority>
}
 80027b0:	bf00      	nop
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff54 	bl	8002674 <__NVIC_EnableIRQ>
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027e0:	f7ff fac4 	bl	8001d6c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e099      	b.n	8002924 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2202      	movs	r2, #2
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002810:	e00f      	b.n	8002832 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002812:	f7ff faab 	bl	8001d6c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b05      	cmp	r3, #5
 800281e:	d908      	bls.n	8002832 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2203      	movs	r2, #3
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e078      	b.n	8002924 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e8      	bne.n	8002812 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_DMA_Init+0x158>)
 800284c:	4013      	ands	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800285e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b04      	cmp	r3, #4
 800288a:	d107      	bne.n	800289c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4313      	orrs	r3, r2
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	f023 0307 	bic.w	r3, r3, #7
 80028b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d117      	bne.n	80028f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 fb01 	bl	8002ee0 <DMA_CheckFifoParam>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2240      	movs	r2, #64	; 0x40
 80028e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028f2:	2301      	movs	r3, #1
 80028f4:	e016      	b.n	8002924 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fab8 	bl	8002e74 <DMA_CalcBaseAndBitshift>
 8002904:	4603      	mov	r3, r0
 8002906:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	223f      	movs	r2, #63	; 0x3f
 800290e:	409a      	lsls	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3718      	adds	r7, #24
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	f010803f 	.word	0xf010803f

08002930 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_DMA_Start_IT+0x26>
 8002952:	2302      	movs	r3, #2
 8002954:	e040      	b.n	80029d8 <HAL_DMA_Start_IT+0xa8>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b01      	cmp	r3, #1
 8002968:	d12f      	bne.n	80029ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2202      	movs	r2, #2
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 fa4a 	bl	8002e18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	223f      	movs	r2, #63	; 0x3f
 800298a:	409a      	lsls	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0216 	orr.w	r2, r2, #22
 800299e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d007      	beq.n	80029b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0208 	orr.w	r2, r2, #8
 80029b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	e005      	b.n	80029d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
 80029d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029ee:	f7ff f9bd 	bl	8001d6c <HAL_GetTick>
 80029f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d008      	beq.n	8002a12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2280      	movs	r2, #128	; 0x80
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e052      	b.n	8002ab8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0216 	bic.w	r2, r2, #22
 8002a20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_DMA_Abort+0x62>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0208 	bic.w	r2, r2, #8
 8002a50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0201 	bic.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a62:	e013      	b.n	8002a8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a64:	f7ff f982 	bl	8001d6c <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d90c      	bls.n	8002a8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2220      	movs	r2, #32
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e015      	b.n	8002ab8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e4      	bne.n	8002a64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9e:	223f      	movs	r2, #63	; 0x3f
 8002aa0:	409a      	lsls	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d004      	beq.n	8002ade <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00c      	b.n	8002af8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b10:	4b8e      	ldr	r3, [pc, #568]	; (8002d4c <HAL_DMA_IRQHandler+0x248>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a8e      	ldr	r2, [pc, #568]	; (8002d50 <HAL_DMA_IRQHandler+0x24c>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0a9b      	lsrs	r3, r3, #10
 8002b1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2e:	2208      	movs	r2, #8
 8002b30:	409a      	lsls	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0204 	bic.w	r2, r2, #4
 8002b56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	2208      	movs	r2, #8
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	2201      	movs	r2, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d012      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00b      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b92:	2201      	movs	r2, #1
 8002b94:	409a      	lsls	r2, r3
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	f043 0202 	orr.w	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	2204      	movs	r2, #4
 8002bac:	409a      	lsls	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d012      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2204      	movs	r2, #4
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be0:	2210      	movs	r2, #16
 8002be2:	409a      	lsls	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d043      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d03c      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bfe:	2210      	movs	r2, #16
 8002c00:	409a      	lsls	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d024      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e01f      	b.n	8002c74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d01b      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e016      	b.n	8002c74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d107      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0208 	bic.w	r2, r2, #8
 8002c62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	2220      	movs	r2, #32
 8002c7a:	409a      	lsls	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 808f 	beq.w	8002da4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8087 	beq.w	8002da4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	409a      	lsls	r2, r3
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d136      	bne.n	8002d1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0216 	bic.w	r2, r2, #22
 8002cbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ccc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <HAL_DMA_IRQHandler+0x1da>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d007      	beq.n	8002cee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0208 	bic.w	r2, r2, #8
 8002cec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	223f      	movs	r2, #63	; 0x3f
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d07e      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
        }
        return;
 8002d1a:	e079      	b.n	8002e10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01d      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10d      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d031      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
 8002d48:	e02c      	b.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
 8002d4a:	bf00      	nop
 8002d4c:	20000050 	.word	0x20000050
 8002d50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d023      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
 8002d64:	e01e      	b.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10f      	bne.n	8002d94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0210 	bic.w	r2, r2, #16
 8002d82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d032      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d022      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2205      	movs	r2, #5
 8002dbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d307      	bcc.n	8002dec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f2      	bne.n	8002dd0 <HAL_DMA_IRQHandler+0x2cc>
 8002dea:	e000      	b.n	8002dee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e000      	b.n	8002e12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e10:	bf00      	nop
    }
  }
}
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	683a      	ldr	r2, [r7, #0]
 8002e3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d108      	bne.n	8002e58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e56:	e007      	b.n	8002e68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
}
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	3b10      	subs	r3, #16
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	091b      	lsrs	r3, r3, #4
 8002e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <DMA_CalcBaseAndBitshift+0x68>)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4413      	add	r3, r2
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d909      	bls.n	8002eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	1d1a      	adds	r2, r3, #4
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002eb4:	e007      	b.n	8002ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	aaaaaaab 	.word	0xaaaaaaab
 8002edc:	08009a8c 	.word	0x08009a8c

08002ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11f      	bne.n	8002f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d856      	bhi.n	8002fae <DMA_CheckFifoParam+0xce>
 8002f00:	a201      	add	r2, pc, #4	; (adr r2, 8002f08 <DMA_CheckFifoParam+0x28>)
 8002f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f06:	bf00      	nop
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f2b 	.word	0x08002f2b
 8002f10:	08002f19 	.word	0x08002f19
 8002f14:	08002faf 	.word	0x08002faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d046      	beq.n	8002fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f28:	e043      	b.n	8002fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f32:	d140      	bne.n	8002fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f38:	e03d      	b.n	8002fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f42:	d121      	bne.n	8002f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d837      	bhi.n	8002fba <DMA_CheckFifoParam+0xda>
 8002f4a:	a201      	add	r2, pc, #4	; (adr r2, 8002f50 <DMA_CheckFifoParam+0x70>)
 8002f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f50:	08002f61 	.word	0x08002f61
 8002f54:	08002f67 	.word	0x08002f67
 8002f58:	08002f61 	.word	0x08002f61
 8002f5c:	08002f79 	.word	0x08002f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	73fb      	strb	r3, [r7, #15]
      break;
 8002f64:	e030      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d025      	beq.n	8002fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f76:	e022      	b.n	8002fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f80:	d11f      	bne.n	8002fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f86:	e01c      	b.n	8002fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d903      	bls.n	8002f96 <DMA_CheckFifoParam+0xb6>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d003      	beq.n	8002f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f94:	e018      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
      break;
 8002f9a:	e015      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00e      	beq.n	8002fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      break;
 8002fac:	e00b      	b.n	8002fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e00a      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e008      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e006      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e004      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fbe:	bf00      	nop
 8002fc0:	e002      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fc2:	bf00      	nop
 8002fc4:	e000      	b.n	8002fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	e165      	b.n	80032c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	f040 8154 	bne.w	80032ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b01      	cmp	r3, #1
 800301c:	d005      	beq.n	800302a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003026:	2b02      	cmp	r3, #2
 8003028:	d130      	bne.n	800308c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4313      	orrs	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003060:	2201      	movs	r2, #1
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 0201 	and.w	r2, r3, #1
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f003 0303 	and.w	r3, r3, #3
 8003094:	2b03      	cmp	r3, #3
 8003096:	d017      	beq.n	80030c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	2203      	movs	r2, #3
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43db      	mvns	r3, r3
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	4013      	ands	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d123      	bne.n	800311c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	08da      	lsrs	r2, r3, #3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3208      	adds	r2, #8
 80030dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f003 0307 	and.w	r3, r3, #7
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	220f      	movs	r2, #15
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	69b9      	ldr	r1, [r7, #24]
 8003118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	4013      	ands	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80ae 	beq.w	80032ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b5d      	ldr	r3, [pc, #372]	; (80032d8 <HAL_GPIO_Init+0x300>)
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	4a5c      	ldr	r2, [pc, #368]	; (80032d8 <HAL_GPIO_Init+0x300>)
 8003168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316c:	6453      	str	r3, [r2, #68]	; 0x44
 800316e:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <HAL_GPIO_Init+0x300>)
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317a:	4a58      	ldr	r2, [pc, #352]	; (80032dc <HAL_GPIO_Init+0x304>)
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	089b      	lsrs	r3, r3, #2
 8003180:	3302      	adds	r3, #2
 8003182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	220f      	movs	r2, #15
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4013      	ands	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a4f      	ldr	r2, [pc, #316]	; (80032e0 <HAL_GPIO_Init+0x308>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d025      	beq.n	80031f2 <HAL_GPIO_Init+0x21a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a4e      	ldr	r2, [pc, #312]	; (80032e4 <HAL_GPIO_Init+0x30c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01f      	beq.n	80031ee <HAL_GPIO_Init+0x216>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a4d      	ldr	r2, [pc, #308]	; (80032e8 <HAL_GPIO_Init+0x310>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d019      	beq.n	80031ea <HAL_GPIO_Init+0x212>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <HAL_GPIO_Init+0x314>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_GPIO_Init+0x20e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a4b      	ldr	r2, [pc, #300]	; (80032f0 <HAL_GPIO_Init+0x318>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00d      	beq.n	80031e2 <HAL_GPIO_Init+0x20a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <HAL_GPIO_Init+0x31c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d007      	beq.n	80031de <HAL_GPIO_Init+0x206>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a49      	ldr	r2, [pc, #292]	; (80032f8 <HAL_GPIO_Init+0x320>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d101      	bne.n	80031da <HAL_GPIO_Init+0x202>
 80031d6:	2306      	movs	r3, #6
 80031d8:	e00c      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031da:	2307      	movs	r3, #7
 80031dc:	e00a      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031de:	2305      	movs	r3, #5
 80031e0:	e008      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031e6:	2303      	movs	r3, #3
 80031e8:	e004      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e002      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_GPIO_Init+0x21c>
 80031f2:	2300      	movs	r3, #0
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f002 0203 	and.w	r2, r2, #3
 80031fa:	0092      	lsls	r2, r2, #2
 80031fc:	4093      	lsls	r3, r2
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003204:	4935      	ldr	r1, [pc, #212]	; (80032dc <HAL_GPIO_Init+0x304>)
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	089b      	lsrs	r3, r3, #2
 800320a:	3302      	adds	r3, #2
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003212:	4b3a      	ldr	r3, [pc, #232]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003236:	4a31      	ldr	r2, [pc, #196]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_GPIO_Init+0x324>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003260:	4a26      	ldr	r2, [pc, #152]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_GPIO_Init+0x324>)
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_GPIO_Init+0x324>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	43db      	mvns	r3, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4013      	ands	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b4:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_GPIO_Init+0x324>)
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3301      	adds	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	f67f ae96 	bls.w	8002ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c8:	bf00      	nop
 80032ca:	bf00      	nop
 80032cc:	3724      	adds	r7, #36	; 0x24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40013800 	.word	0x40013800
 80032e0:	40020000 	.word	0x40020000
 80032e4:	40020400 	.word	0x40020400
 80032e8:	40020800 	.word	0x40020800
 80032ec:	40020c00 	.word	0x40020c00
 80032f0:	40021000 	.word	0x40021000
 80032f4:	40021400 	.word	0x40021400
 80032f8:	40021800 	.word	0x40021800
 80032fc:	40013c00 	.word	0x40013c00

08003300 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	e001      	b.n	8003322 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003340:	787b      	ldrb	r3, [r7, #1]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800334c:	e003      	b.n	8003356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334e:	887b      	ldrh	r3, [r7, #2]
 8003350:	041a      	lsls	r2, r3, #16
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fcb0 	bl	8000ce8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0cc      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033a8:	4b68      	ldr	r3, [pc, #416]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d90c      	bls.n	80033d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b6:	4b65      	ldr	r3, [pc, #404]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	4b63      	ldr	r3, [pc, #396]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 030f 	and.w	r3, r3, #15
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d001      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e0b8      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d020      	beq.n	800341e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033e8:	4b59      	ldr	r3, [pc, #356]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	4a58      	ldr	r2, [pc, #352]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003400:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800340a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800340c:	4b50      	ldr	r3, [pc, #320]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	494d      	ldr	r1, [pc, #308]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	4313      	orrs	r3, r2
 800341c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	2b00      	cmp	r3, #0
 8003428:	d044      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	4b47      	ldr	r3, [pc, #284]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d119      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e07f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d003      	beq.n	8003452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344e:	2b03      	cmp	r3, #3
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003452:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d109      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e06f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003462:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e067      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f023 0203 	bic.w	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4934      	ldr	r1, [pc, #208]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003484:	f7fe fc72 	bl	8001d6c <HAL_GetTick>
 8003488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348c:	f7fe fc6e 	bl	8001d6c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e04f      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a2:	4b2b      	ldr	r3, [pc, #172]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 020c 	and.w	r2, r3, #12
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1eb      	bne.n	800348c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d20c      	bcs.n	80034dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b20      	ldr	r3, [pc, #128]	; (800354c <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e032      	b.n	8003542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d008      	beq.n	80034fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4916      	ldr	r1, [pc, #88]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d009      	beq.n	800351a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	490e      	ldr	r1, [pc, #56]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800351a:	f000 f887 	bl	800362c <HAL_RCC_GetSysClockFreq>
 800351e:	4602      	mov	r2, r0
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCC_ClockConfig+0x1bc>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	490a      	ldr	r1, [pc, #40]	; (8003554 <HAL_RCC_ClockConfig+0x1c0>)
 800352c:	5ccb      	ldrb	r3, [r1, r3]
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	4a09      	ldr	r2, [pc, #36]	; (8003558 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7fe fab6 	bl	8001aac <HAL_InitTick>

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40023c00 	.word	0x40023c00
 8003550:	40023800 	.word	0x40023800
 8003554:	08009a74 	.word	0x08009a74
 8003558:	20000050 	.word	0x20000050
 800355c:	20000054 	.word	0x20000054

08003560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000050 	.word	0x20000050

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff0 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0a9b      	lsrs	r3, r3, #10
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	08009a84 	.word	0x08009a84

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035a4:	f7ff ffdc 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0b5b      	lsrs	r3, r3, #13
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	08009a84 	.word	0x08009a84

080035c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	220f      	movs	r2, #15
 80035d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035d8:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_RCC_GetClockConfig+0x5c>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0203 	and.w	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <HAL_RCC_GetClockConfig+0x5c>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_RCC_GetClockConfig+0x5c>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035fc:	4b09      	ldr	r3, [pc, #36]	; (8003624 <HAL_RCC_GetClockConfig+0x5c>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	08db      	lsrs	r3, r3, #3
 8003602:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800360a:	4b07      	ldr	r3, [pc, #28]	; (8003628 <HAL_RCC_GetClockConfig+0x60>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 020f 	and.w	r2, r3, #15
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800
 8003628:	40023c00 	.word	0x40023c00

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003630:	b0a6      	sub	sp, #152	; 0x98
 8003632:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003652:	4bc8      	ldr	r3, [pc, #800]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 030c 	and.w	r3, r3, #12
 800365a:	2b0c      	cmp	r3, #12
 800365c:	f200 817e 	bhi.w	800395c <HAL_RCC_GetSysClockFreq+0x330>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800369d 	.word	0x0800369d
 800366c:	0800395d 	.word	0x0800395d
 8003670:	0800395d 	.word	0x0800395d
 8003674:	0800395d 	.word	0x0800395d
 8003678:	080036a5 	.word	0x080036a5
 800367c:	0800395d 	.word	0x0800395d
 8003680:	0800395d 	.word	0x0800395d
 8003684:	0800395d 	.word	0x0800395d
 8003688:	080036ad 	.word	0x080036ad
 800368c:	0800395d 	.word	0x0800395d
 8003690:	0800395d 	.word	0x0800395d
 8003694:	0800395d 	.word	0x0800395d
 8003698:	08003817 	.word	0x08003817
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800369c:	4bb6      	ldr	r3, [pc, #728]	; (8003978 <HAL_RCC_GetSysClockFreq+0x34c>)
 800369e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80036a2:	e15f      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036a4:	4bb5      	ldr	r3, [pc, #724]	; (800397c <HAL_RCC_GetSysClockFreq+0x350>)
 80036a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80036aa:	e15b      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ac:	4bb1      	ldr	r3, [pc, #708]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036b8:	4bae      	ldr	r3, [pc, #696]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d031      	beq.n	8003728 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c4:	4bab      	ldr	r3, [pc, #684]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	099b      	lsrs	r3, r3, #6
 80036ca:	2200      	movs	r2, #0
 80036cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80036ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d6:	663b      	str	r3, [r7, #96]	; 0x60
 80036d8:	2300      	movs	r3, #0
 80036da:	667b      	str	r3, [r7, #100]	; 0x64
 80036dc:	4ba7      	ldr	r3, [pc, #668]	; (800397c <HAL_RCC_GetSysClockFreq+0x350>)
 80036de:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80036e2:	462a      	mov	r2, r5
 80036e4:	fb03 f202 	mul.w	r2, r3, r2
 80036e8:	2300      	movs	r3, #0
 80036ea:	4621      	mov	r1, r4
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	4aa2      	ldr	r2, [pc, #648]	; (800397c <HAL_RCC_GetSysClockFreq+0x350>)
 80036f4:	4621      	mov	r1, r4
 80036f6:	fba1 1202 	umull	r1, r2, r1, r2
 80036fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036fc:	460a      	mov	r2, r1
 80036fe:	67ba      	str	r2, [r7, #120]	; 0x78
 8003700:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003702:	4413      	add	r3, r2
 8003704:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800370a:	2200      	movs	r2, #0
 800370c:	65bb      	str	r3, [r7, #88]	; 0x58
 800370e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003710:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003714:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003718:	f7fc fdd2 	bl	80002c0 <__aeabi_uldivmod>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4613      	mov	r3, r2
 8003722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003726:	e064      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003728:	4b92      	ldr	r3, [pc, #584]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	099b      	lsrs	r3, r3, #6
 800372e:	2200      	movs	r2, #0
 8003730:	653b      	str	r3, [r7, #80]	; 0x50
 8003732:	657a      	str	r2, [r7, #84]	; 0x54
 8003734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373a:	64bb      	str	r3, [r7, #72]	; 0x48
 800373c:	2300      	movs	r3, #0
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003740:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003744:	4622      	mov	r2, r4
 8003746:	462b      	mov	r3, r5
 8003748:	f04f 0000 	mov.w	r0, #0
 800374c:	f04f 0100 	mov.w	r1, #0
 8003750:	0159      	lsls	r1, r3, #5
 8003752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003756:	0150      	lsls	r0, r2, #5
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4621      	mov	r1, r4
 800375e:	1a51      	subs	r1, r2, r1
 8003760:	6139      	str	r1, [r7, #16]
 8003762:	4629      	mov	r1, r5
 8003764:	eb63 0301 	sbc.w	r3, r3, r1
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003776:	4659      	mov	r1, fp
 8003778:	018b      	lsls	r3, r1, #6
 800377a:	4651      	mov	r1, sl
 800377c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003780:	4651      	mov	r1, sl
 8003782:	018a      	lsls	r2, r1, #6
 8003784:	4651      	mov	r1, sl
 8003786:	ebb2 0801 	subs.w	r8, r2, r1
 800378a:	4659      	mov	r1, fp
 800378c:	eb63 0901 	sbc.w	r9, r3, r1
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800379c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037a4:	4690      	mov	r8, r2
 80037a6:	4699      	mov	r9, r3
 80037a8:	4623      	mov	r3, r4
 80037aa:	eb18 0303 	adds.w	r3, r8, r3
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	462b      	mov	r3, r5
 80037b2:	eb49 0303 	adc.w	r3, r9, r3
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80037c4:	4629      	mov	r1, r5
 80037c6:	028b      	lsls	r3, r1, #10
 80037c8:	4621      	mov	r1, r4
 80037ca:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037ce:	4621      	mov	r1, r4
 80037d0:	028a      	lsls	r2, r1, #10
 80037d2:	4610      	mov	r0, r2
 80037d4:	4619      	mov	r1, r3
 80037d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037da:	2200      	movs	r2, #0
 80037dc:	643b      	str	r3, [r7, #64]	; 0x40
 80037de:	647a      	str	r2, [r7, #68]	; 0x44
 80037e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037e4:	f7fc fd6c 	bl	80002c0 <__aeabi_uldivmod>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4613      	mov	r3, r2
 80037ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037f2:	4b60      	ldr	r3, [pc, #384]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	0c1b      	lsrs	r3, r3, #16
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	3301      	adds	r3, #1
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8003804:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003814:	e0a6      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003816:	4b57      	ldr	r3, [pc, #348]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800381e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003822:	4b54      	ldr	r3, [pc, #336]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d02a      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800382e:	4b51      	ldr	r3, [pc, #324]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	2200      	movs	r2, #0
 8003836:	63bb      	str	r3, [r7, #56]	; 0x38
 8003838:	63fa      	str	r2, [r7, #60]	; 0x3c
 800383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800383c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003840:	2100      	movs	r1, #0
 8003842:	4b4e      	ldr	r3, [pc, #312]	; (800397c <HAL_RCC_GetSysClockFreq+0x350>)
 8003844:	fb03 f201 	mul.w	r2, r3, r1
 8003848:	2300      	movs	r3, #0
 800384a:	fb00 f303 	mul.w	r3, r0, r3
 800384e:	4413      	add	r3, r2
 8003850:	4a4a      	ldr	r2, [pc, #296]	; (800397c <HAL_RCC_GetSysClockFreq+0x350>)
 8003852:	fba0 1202 	umull	r1, r2, r0, r2
 8003856:	677a      	str	r2, [r7, #116]	; 0x74
 8003858:	460a      	mov	r2, r1
 800385a:	673a      	str	r2, [r7, #112]	; 0x70
 800385c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800385e:	4413      	add	r3, r2
 8003860:	677b      	str	r3, [r7, #116]	; 0x74
 8003862:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003866:	2200      	movs	r2, #0
 8003868:	633b      	str	r3, [r7, #48]	; 0x30
 800386a:	637a      	str	r2, [r7, #52]	; 0x34
 800386c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003870:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8003874:	f7fc fd24 	bl	80002c0 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4613      	mov	r3, r2
 800387e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003882:	e05b      	b.n	800393c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003884:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	099b      	lsrs	r3, r3, #6
 800388a:	2200      	movs	r2, #0
 800388c:	62bb      	str	r3, [r7, #40]	; 0x28
 800388e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003896:	623b      	str	r3, [r7, #32]
 8003898:	2300      	movs	r3, #0
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038a0:	4642      	mov	r2, r8
 80038a2:	464b      	mov	r3, r9
 80038a4:	f04f 0000 	mov.w	r0, #0
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	0159      	lsls	r1, r3, #5
 80038ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038b2:	0150      	lsls	r0, r2, #5
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4641      	mov	r1, r8
 80038ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80038be:	4649      	mov	r1, r9
 80038c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038d8:	ebb2 040a 	subs.w	r4, r2, sl
 80038dc:	eb63 050b 	sbc.w	r5, r3, fp
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	00eb      	lsls	r3, r5, #3
 80038ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038ee:	00e2      	lsls	r2, r4, #3
 80038f0:	4614      	mov	r4, r2
 80038f2:	461d      	mov	r5, r3
 80038f4:	4643      	mov	r3, r8
 80038f6:	18e3      	adds	r3, r4, r3
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	464b      	mov	r3, r9
 80038fc:	eb45 0303 	adc.w	r3, r5, r3
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800390e:	4629      	mov	r1, r5
 8003910:	028b      	lsls	r3, r1, #10
 8003912:	4621      	mov	r1, r4
 8003914:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003918:	4621      	mov	r1, r4
 800391a:	028a      	lsls	r2, r1, #10
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003924:	2200      	movs	r2, #0
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	61fa      	str	r2, [r7, #28]
 800392a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800392e:	f7fc fcc7 	bl	80002c0 <__aeabi_uldivmod>
 8003932:	4602      	mov	r2, r0
 8003934:	460b      	mov	r3, r1
 8003936:	4613      	mov	r3, r2
 8003938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_RCC_GetSysClockFreq+0x348>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	0f1b      	lsrs	r3, r3, #28
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800394a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800394e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800395a:	e003      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800395c:	4b06      	ldr	r3, [pc, #24]	; (8003978 <HAL_RCC_GetSysClockFreq+0x34c>)
 800395e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8003962:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003964:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8003968:	4618      	mov	r0, r3
 800396a:	3798      	adds	r7, #152	; 0x98
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400
 800397c:	017d7840 	.word	0x017d7840

08003980 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e28d      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8083 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039a0:	4b94      	ldr	r3, [pc, #592]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 030c 	and.w	r3, r3, #12
 80039a8:	2b04      	cmp	r3, #4
 80039aa:	d019      	beq.n	80039e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ac:	4b91      	ldr	r3, [pc, #580]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039b8:	4b8e      	ldr	r3, [pc, #568]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b8b      	ldr	r3, [pc, #556]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039de:	d10b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b84      	ldr	r3, [pc, #528]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x124>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d157      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e25a      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x90>
 8003a02:	4b7c      	ldr	r3, [pc, #496]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7b      	ldr	r2, [pc, #492]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xcc>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0xb4>
 8003a1a:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a75      	ldr	r2, [pc, #468]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a72      	ldr	r2, [pc, #456]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xcc>
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a6e      	ldr	r2, [pc, #440]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a6b      	ldr	r2, [pc, #428]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a54:	f7fe f98a 	bl	8001d6c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe f986 	bl	8001d6c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e21f      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b61      	ldr	r3, [pc, #388]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xdc>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe f976 	bl	8001d6c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe f972 	bl	8001d6c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e20b      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	4b57      	ldr	r3, [pc, #348]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x104>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d06f      	beq.n	8003b92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ab2:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d017      	beq.n	8003aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003abe:	4b4d      	ldr	r3, [pc, #308]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d105      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aca:	4b4a      	ldr	r3, [pc, #296]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00b      	beq.n	8003aee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad6:	4b47      	ldr	r3, [pc, #284]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ade:	2b0c      	cmp	r3, #12
 8003ae0:	d11c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ae2:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d005      	beq.n	8003b06 <HAL_RCC_OscConfig+0x186>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e1d3      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b06:	4b3b      	ldr	r3, [pc, #236]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4937      	ldr	r1, [pc, #220]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	e03a      	b.n	8003b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d020      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b24:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_OscConfig+0x278>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2a:	f7fe f91f 	bl	8001d6c <HAL_GetTick>
 8003b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b30:	e008      	b.n	8003b44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b32:	f7fe f91b 	bl	8001d6c <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d901      	bls.n	8003b44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e1b4      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0f0      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b50:	4b28      	ldr	r3, [pc, #160]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4925      	ldr	r1, [pc, #148]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]
 8003b64:	e015      	b.n	8003b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCC_OscConfig+0x278>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fe f8fe 	bl	8001d6c <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b74:	f7fe f8fa 	bl	8001d6c <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e193      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d036      	beq.n	8003c0c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba6:	4b15      	ldr	r3, [pc, #84]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bac:	f7fe f8de 	bl	8001d6c <HAL_GetTick>
 8003bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bb2:	e008      	b.n	8003bc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb4:	f7fe f8da 	bl	8001d6c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e173      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <HAL_RCC_OscConfig+0x274>)
 8003bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f0      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x234>
 8003bd2:	e01b      	b.n	8003c0c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd4:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7fe f8c7 	bl	8001d6c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be0:	e00e      	b.n	8003c00 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be2:	f7fe f8c3 	bl	8001d6c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d907      	bls.n	8003c00 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e15c      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	42470000 	.word	0x42470000
 8003bfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b8a      	ldr	r3, [pc, #552]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ea      	bne.n	8003be2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8097 	beq.w	8003d48 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b83      	ldr	r3, [pc, #524]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10f      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	4b7f      	ldr	r3, [pc, #508]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a7e      	ldr	r2, [pc, #504]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b7c      	ldr	r3, [pc, #496]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b79      	ldr	r3, [pc, #484]	; (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b76      	ldr	r3, [pc, #472]	; (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a75      	ldr	r2, [pc, #468]	; (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fe f883 	bl	8001d6c <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fe f87f 	bl	8001d6c <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e118      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b6c      	ldr	r3, [pc, #432]	; (8003e30 <HAL_RCC_OscConfig+0x4b0>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x31e>
 8003c90:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	e01c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x358>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b05      	cmp	r3, #5
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x340>
 8003ca6:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003caa:	4a60      	ldr	r2, [pc, #384]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb2:	4b5e      	ldr	r3, [pc, #376]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	4a5d      	ldr	r2, [pc, #372]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbe:	e00b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x358>
 8003cc0:	4b5a      	ldr	r3, [pc, #360]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc4:	4a59      	ldr	r2, [pc, #356]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6713      	str	r3, [r2, #112]	; 0x70
 8003ccc:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	4a56      	ldr	r2, [pc, #344]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003cd2:	f023 0304 	bic.w	r3, r3, #4
 8003cd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d015      	beq.n	8003d0c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce0:	f7fe f844 	bl	8001d6c <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce6:	e00a      	b.n	8003cfe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce8:	f7fe f840 	bl	8001d6c <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e0d7      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfe:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d0ee      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x368>
 8003d0a:	e014      	b.n	8003d36 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fe f82e 	bl	8001d6c <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fe f82a 	bl	8001d6c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0c1      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2a:	4b40      	ldr	r3, [pc, #256]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1ee      	bne.n	8003d14 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d36:	7dfb      	ldrb	r3, [r7, #23]
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d105      	bne.n	8003d48 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	4a3a      	ldr	r2, [pc, #232]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80ad 	beq.w	8003eac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d52:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d060      	beq.n	8003e20 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d145      	bne.n	8003df2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d66:	4b33      	ldr	r3, [pc, #204]	; (8003e34 <HAL_RCC_OscConfig+0x4b4>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fffe 	bl	8001d6c <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d74:	f7fd fffa 	bl	8001d6c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e093      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	019b      	lsls	r3, r3, #6
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	3b01      	subs	r3, #1
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	071b      	lsls	r3, r3, #28
 8003dbe:	491b      	ldr	r1, [pc, #108]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	; (8003e34 <HAL_RCC_OscConfig+0x4b4>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fd ffcf 	bl	8001d6c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd ffcb 	bl	8001d6c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e064      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de4:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x452>
 8003df0:	e05c      	b.n	8003eac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003df2:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_RCC_OscConfig+0x4b4>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fd ffb8 	bl	8001d6c <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd ffb4 	bl	8001d6c <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e04d      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_OscConfig+0x4ac>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x480>
 8003e1e:	e045      	b.n	8003eac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e040      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40007000 	.word	0x40007000
 8003e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e38:	4b1f      	ldr	r3, [pc, #124]	; (8003eb8 <HAL_RCC_OscConfig+0x538>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d030      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d129      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d122      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e68:	4013      	ands	r3, r2
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d119      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	085b      	lsrs	r3, r3, #1
 8003e80:	3b01      	subs	r3, #1
 8003e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d10f      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d107      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800

08003ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e041      	b.n	8003f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f839 	bl	8003f5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 fbb2 	bl	8004664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b085      	sub	sp, #20
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d001      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e04e      	b.n	8004026 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68da      	ldr	r2, [r3, #12]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0201 	orr.w	r2, r2, #1
 8003f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a23      	ldr	r2, [pc, #140]	; (8004034 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d022      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x80>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d01d      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x80>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d018      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x80>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_TIM_Base_Start_IT+0xcc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d013      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x80>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d009      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d004      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x80>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_TIM_Base_Start_IT+0xdc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d111      	bne.n	8004014 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2b06      	cmp	r3, #6
 8004000:	d010      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0201 	orr.w	r2, r2, #1
 8004010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004012:	e007      	b.n	8004024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	40010000 	.word	0x40010000
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800
 8004040:	40000c00 	.word	0x40000c00
 8004044:	40010400 	.word	0x40010400
 8004048:	40014000 	.word	0x40014000
 800404c:	40001800 	.word	0x40001800

08004050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e041      	b.n	80040e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7fd fbc6 	bl	8001808 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 fae8 	bl	8004664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <HAL_TIM_PWM_Start+0x24>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b01      	cmp	r3, #1
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	e022      	b.n	800415a <HAL_TIM_PWM_Start+0x6a>
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d109      	bne.n	800412e <HAL_TIM_PWM_Start+0x3e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	bf14      	ite	ne
 8004126:	2301      	movne	r3, #1
 8004128:	2300      	moveq	r3, #0
 800412a:	b2db      	uxtb	r3, r3
 800412c:	e015      	b.n	800415a <HAL_TIM_PWM_Start+0x6a>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d109      	bne.n	8004148 <HAL_TIM_PWM_Start+0x58>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	bf14      	ite	ne
 8004140:	2301      	movne	r3, #1
 8004142:	2300      	moveq	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	e008      	b.n	800415a <HAL_TIM_PWM_Start+0x6a>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e07c      	b.n	800425c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d104      	bne.n	8004172 <HAL_TIM_PWM_Start+0x82>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004170:	e013      	b.n	800419a <HAL_TIM_PWM_Start+0xaa>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d104      	bne.n	8004182 <HAL_TIM_PWM_Start+0x92>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004180:	e00b      	b.n	800419a <HAL_TIM_PWM_Start+0xaa>
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d104      	bne.n	8004192 <HAL_TIM_PWM_Start+0xa2>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004190:	e003      	b.n	800419a <HAL_TIM_PWM_Start+0xaa>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2202      	movs	r2, #2
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2201      	movs	r2, #1
 80041a0:	6839      	ldr	r1, [r7, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fcae 	bl	8004b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2d      	ldr	r2, [pc, #180]	; (8004264 <HAL_TIM_PWM_Start+0x174>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_PWM_Start+0xcc>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2c      	ldr	r2, [pc, #176]	; (8004268 <HAL_TIM_PWM_Start+0x178>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d101      	bne.n	80041c0 <HAL_TIM_PWM_Start+0xd0>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <HAL_TIM_PWM_Start+0xd2>
 80041c0:	2300      	movs	r3, #0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a22      	ldr	r2, [pc, #136]	; (8004264 <HAL_TIM_PWM_Start+0x174>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d01d      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_TIM_PWM_Start+0x17c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a1d      	ldr	r2, [pc, #116]	; (8004270 <HAL_TIM_PWM_Start+0x180>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_TIM_PWM_Start+0x184>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a16      	ldr	r2, [pc, #88]	; (8004268 <HAL_TIM_PWM_Start+0x178>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a18      	ldr	r2, [pc, #96]	; (8004278 <HAL_TIM_PWM_Start+0x188>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_TIM_PWM_Start+0x136>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <HAL_TIM_PWM_Start+0x18c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d111      	bne.n	800424a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b06      	cmp	r3, #6
 8004236:	d010      	beq.n	800425a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004248:	e007      	b.n	800425a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40010000 	.word	0x40010000
 8004268:	40010400 	.word	0x40010400
 800426c:	40000400 	.word	0x40000400
 8004270:	40000800 	.word	0x40000800
 8004274:	40000c00 	.word	0x40000c00
 8004278:	40014000 	.word	0x40014000
 800427c:	40001800 	.word	0x40001800

08004280 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b02      	cmp	r3, #2
 8004294:	d122      	bne.n	80042dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f003 0302 	and.w	r3, r3, #2
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d11b      	bne.n	80042dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f06f 0202 	mvn.w	r2, #2
 80042ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f9b0 	bl	8004628 <HAL_TIM_IC_CaptureCallback>
 80042c8:	e005      	b.n	80042d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9a2 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f9b3 	bl	800463c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d122      	bne.n	8004330 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d11b      	bne.n	8004330 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0204 	mvn.w	r2, #4
 8004300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2202      	movs	r2, #2
 8004306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f986 	bl	8004628 <HAL_TIM_IC_CaptureCallback>
 800431c:	e005      	b.n	800432a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f978 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f989 	bl	800463c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b08      	cmp	r3, #8
 800433c:	d122      	bne.n	8004384 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b08      	cmp	r3, #8
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0208 	mvn.w	r2, #8
 8004354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2204      	movs	r2, #4
 800435a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f95c 	bl	8004628 <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f94e 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f95f 	bl	800463c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0310 	and.w	r3, r3, #16
 800438e:	2b10      	cmp	r3, #16
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b10      	cmp	r3, #16
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0210 	mvn.w	r2, #16
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2208      	movs	r2, #8
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f932 	bl	8004628 <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f924 	bl	8004614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f935 	bl	800463c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10e      	bne.n	8004404 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d107      	bne.n	8004404 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0201 	mvn.w	r2, #1
 80043fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fd f928 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b80      	cmp	r3, #128	; 0x80
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d107      	bne.n	8004430 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fc16 	bl	8004c5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d10e      	bne.n	800445c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004448:	2b40      	cmp	r3, #64	; 0x40
 800444a:	d107      	bne.n	800445c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8fa 	bl	8004650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b20      	cmp	r3, #32
 8004468:	d10e      	bne.n	8004488 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b20      	cmp	r3, #32
 8004476:	d107      	bne.n	8004488 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0220 	mvn.w	r2, #32
 8004480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fbe0 	bl	8004c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0ae      	b.n	800460c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b0c      	cmp	r3, #12
 80044ba:	f200 809f 	bhi.w	80045fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044be:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044f9 	.word	0x080044f9
 80044c8:	080045fd 	.word	0x080045fd
 80044cc:	080045fd 	.word	0x080045fd
 80044d0:	080045fd 	.word	0x080045fd
 80044d4:	08004539 	.word	0x08004539
 80044d8:	080045fd 	.word	0x080045fd
 80044dc:	080045fd 	.word	0x080045fd
 80044e0:	080045fd 	.word	0x080045fd
 80044e4:	0800457b 	.word	0x0800457b
 80044e8:	080045fd 	.word	0x080045fd
 80044ec:	080045fd 	.word	0x080045fd
 80044f0:	080045fd 	.word	0x080045fd
 80044f4:	080045bb 	.word	0x080045bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68b9      	ldr	r1, [r7, #8]
 80044fe:	4618      	mov	r0, r3
 8004500:	f000 f950 	bl	80047a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0208 	orr.w	r2, r2, #8
 8004512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 0204 	bic.w	r2, r2, #4
 8004522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	6999      	ldr	r1, [r3, #24]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	619a      	str	r2, [r3, #24]
      break;
 8004536:	e064      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	4618      	mov	r0, r3
 8004540:	f000 f9a0 	bl	8004884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004552:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004562:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6999      	ldr	r1, [r3, #24]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	021a      	lsls	r2, r3, #8
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	619a      	str	r2, [r3, #24]
      break;
 8004578:	e043      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f9f5 	bl	8004970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f042 0208 	orr.w	r2, r2, #8
 8004594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0204 	bic.w	r2, r2, #4
 80045a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69d9      	ldr	r1, [r3, #28]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	430a      	orrs	r2, r1
 80045b6:	61da      	str	r2, [r3, #28]
      break;
 80045b8:	e023      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fa49 	bl	8004a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69d9      	ldr	r1, [r3, #28]
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	021a      	lsls	r2, r3, #8
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	61da      	str	r2, [r3, #28]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004600:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a40      	ldr	r2, [pc, #256]	; (8004778 <TIM_Base_SetConfig+0x114>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d013      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004682:	d00f      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a3d      	ldr	r2, [pc, #244]	; (800477c <TIM_Base_SetConfig+0x118>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d00b      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a3c      	ldr	r2, [pc, #240]	; (8004780 <TIM_Base_SetConfig+0x11c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d007      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a3b      	ldr	r2, [pc, #236]	; (8004784 <TIM_Base_SetConfig+0x120>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d003      	beq.n	80046a4 <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3a      	ldr	r2, [pc, #232]	; (8004788 <TIM_Base_SetConfig+0x124>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d108      	bne.n	80046b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a2f      	ldr	r2, [pc, #188]	; (8004778 <TIM_Base_SetConfig+0x114>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02b      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c4:	d027      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a2c      	ldr	r2, [pc, #176]	; (800477c <TIM_Base_SetConfig+0x118>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d023      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a2b      	ldr	r2, [pc, #172]	; (8004780 <TIM_Base_SetConfig+0x11c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01f      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2a      	ldr	r2, [pc, #168]	; (8004784 <TIM_Base_SetConfig+0x120>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01b      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a29      	ldr	r2, [pc, #164]	; (8004788 <TIM_Base_SetConfig+0x124>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d017      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a28      	ldr	r2, [pc, #160]	; (800478c <TIM_Base_SetConfig+0x128>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a27      	ldr	r2, [pc, #156]	; (8004790 <TIM_Base_SetConfig+0x12c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00f      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a26      	ldr	r2, [pc, #152]	; (8004794 <TIM_Base_SetConfig+0x130>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00b      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a25      	ldr	r2, [pc, #148]	; (8004798 <TIM_Base_SetConfig+0x134>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d007      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a24      	ldr	r2, [pc, #144]	; (800479c <TIM_Base_SetConfig+0x138>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d003      	beq.n	8004716 <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a23      	ldr	r2, [pc, #140]	; (80047a0 <TIM_Base_SetConfig+0x13c>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <TIM_Base_SetConfig+0x114>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0xf8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <TIM_Base_SetConfig+0x124>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d103      	bne.n	8004764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	615a      	str	r2, [r3, #20]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40010000 	.word	0x40010000
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40010400 	.word	0x40010400
 800478c:	40014000 	.word	0x40014000
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800
 8004798:	40001800 	.word	0x40001800
 800479c:	40001c00 	.word	0x40001c00
 80047a0:	40002000 	.word	0x40002000

080047a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f023 0201 	bic.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f023 0302 	bic.w	r3, r3, #2
 80047ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a20      	ldr	r2, [pc, #128]	; (800487c <TIM_OC1_SetConfig+0xd8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d003      	beq.n	8004808 <TIM_OC1_SetConfig+0x64>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <TIM_OC1_SetConfig+0xdc>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d10c      	bne.n	8004822 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0308 	bic.w	r3, r3, #8
 800480e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a15      	ldr	r2, [pc, #84]	; (800487c <TIM_OC1_SetConfig+0xd8>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d003      	beq.n	8004832 <TIM_OC1_SetConfig+0x8e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a14      	ldr	r2, [pc, #80]	; (8004880 <TIM_OC1_SetConfig+0xdc>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d111      	bne.n	8004856 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	40010000 	.word	0x40010000
 8004880:	40010400 	.word	0x40010400

08004884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0210 	bic.w	r2, r3, #16
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f023 0320 	bic.w	r3, r3, #32
 80048ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a22      	ldr	r2, [pc, #136]	; (8004968 <TIM_OC2_SetConfig+0xe4>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC2_SetConfig+0x68>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a21      	ldr	r2, [pc, #132]	; (800496c <TIM_OC2_SetConfig+0xe8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10d      	bne.n	8004908 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a17      	ldr	r2, [pc, #92]	; (8004968 <TIM_OC2_SetConfig+0xe4>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d003      	beq.n	8004918 <TIM_OC2_SetConfig+0x94>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a16      	ldr	r2, [pc, #88]	; (800496c <TIM_OC2_SetConfig+0xe8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d113      	bne.n	8004940 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800491e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	699b      	ldr	r3, [r3, #24]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40010000 	.word	0x40010000
 800496c:	40010400 	.word	0x40010400

08004970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004970:	b480      	push	{r7}
 8004972:	b087      	sub	sp, #28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0303 	bic.w	r3, r3, #3
 80049a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <TIM_OC3_SetConfig+0xe0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_OC3_SetConfig+0x66>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a20      	ldr	r2, [pc, #128]	; (8004a54 <TIM_OC3_SetConfig+0xe4>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d10d      	bne.n	80049f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <TIM_OC3_SetConfig+0xe0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d003      	beq.n	8004a02 <TIM_OC3_SetConfig+0x92>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <TIM_OC3_SetConfig+0xe4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d113      	bne.n	8004a2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	621a      	str	r2, [r3, #32]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40010400 	.word	0x40010400

08004a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	021b      	lsls	r3, r3, #8
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <TIM_OC4_SetConfig+0xa4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_OC4_SetConfig+0x68>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <TIM_OC4_SetConfig+0xa8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d109      	bne.n	8004ad4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	019b      	lsls	r3, r3, #6
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000
 8004b00:	40010400 	.word	0x40010400

08004b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b087      	sub	sp, #28
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 031f 	and.w	r3, r3, #31
 8004b16:	2201      	movs	r2, #1
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1a      	ldr	r2, [r3, #32]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	43db      	mvns	r3, r3
 8004b26:	401a      	ands	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6a1a      	ldr	r2, [r3, #32]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e05a      	b.n	8004c1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d022      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d01d      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1d      	ldr	r2, [pc, #116]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d018      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1b      	ldr	r2, [pc, #108]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10c      	bne.n	8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40010400 	.word	0x40010400
 8004c40:	40014000 	.word	0x40014000
 8004c44:	40001800 	.word	0x40001800

08004c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e03f      	b.n	8004d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d106      	bne.n	8004c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7fc fe86 	bl	80019a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2224      	movs	r2, #36	; 0x24
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68da      	ldr	r2, [r3, #12]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 ff69 	bl	8005b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b08a      	sub	sp, #40	; 0x28
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d17c      	bne.n	8004e24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_UART_Transmit+0x2c>
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e075      	b.n	8004e26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Transmit+0x3e>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e06e      	b.n	8004e26 <HAL_UART_Transmit+0x11c>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2221      	movs	r2, #33	; 0x21
 8004d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d5e:	f7fd f805 	bl	8001d6c <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	88fa      	ldrh	r2, [r7, #6]
 8004d6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d78:	d108      	bne.n	8004d8c <HAL_UART_Transmit+0x82>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	61bb      	str	r3, [r7, #24]
 8004d8a:	e003      	b.n	8004d94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d9c:	e02a      	b.n	8004df4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fc21 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e036      	b.n	8004e26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	e007      	b.n	8004de6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	781a      	ldrb	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	3301      	adds	r3, #1
 8004de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1cf      	bne.n	8004d9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2140      	movs	r1, #64	; 0x40
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fbf1 	bl	80055f0 <UART_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e006      	b.n	8004e26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e000      	b.n	8004e26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e24:	2302      	movs	r3, #2
  }
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d11d      	bne.n	8004e84 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_UART_Receive_DMA+0x26>
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e016      	b.n	8004e86 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Receive_DMA+0x38>
 8004e62:	2302      	movs	r3, #2
 8004e64:	e00f      	b.n	8004e86 <HAL_UART_Receive_DMA+0x58>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	461a      	mov	r2, r3
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fc26 	bl	80056cc <UART_Start_Receive_DMA>
 8004e80:	4603      	mov	r3, r0
 8004e82:	e000      	b.n	8004e86 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e84:	2302      	movs	r3, #2
  }
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b0ba      	sub	sp, #232	; 0xe8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x66>
 8004ee2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fd91 	bl	8005a16 <UART_Receive_IT>
      return;
 8004ef4:	e256      	b.n	80053a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ef6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80de 	beq.w	80050bc <HAL_UART_IRQHandler+0x22c>
 8004f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f000 80d1 	beq.w	80050bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0xae>
 8004f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f42:	f003 0304 	and.w	r3, r3, #4
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00b      	beq.n	8004f62 <HAL_UART_IRQHandler+0xd2>
 8004f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f043 0202 	orr.w	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_UART_IRQHandler+0xf6>
 8004f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0204 	orr.w	r2, r3, #4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8a:	f003 0308 	and.w	r3, r3, #8
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d011      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x126>
 8004f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d105      	bne.n	8004faa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fae:	f043 0208 	orr.w	r2, r3, #8
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 81ed 	beq.w	800539a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d008      	beq.n	8004fde <HAL_UART_IRQHandler+0x14e>
 8004fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fd1c 	bl	8005a16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d103      	bne.n	800500a <HAL_UART_IRQHandler+0x17a>
 8005002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04f      	beq.n	80050aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fc24 	bl	8005858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d141      	bne.n	80050a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3314      	adds	r3, #20
 8005024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3314      	adds	r3, #20
 8005046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800504a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800504e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800505a:	e841 2300 	strex	r3, r2, [r1]
 800505e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1d9      	bne.n	800501e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506e:	2b00      	cmp	r3, #0
 8005070:	d013      	beq.n	800509a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	4a7d      	ldr	r2, [pc, #500]	; (800526c <HAL_UART_IRQHandler+0x3dc>)
 8005078:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	4618      	mov	r0, r3
 8005080:	f7fd fd1e 	bl	8002ac0 <HAL_DMA_Abort_IT>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d016      	beq.n	80050b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005094:	4610      	mov	r0, r2
 8005096:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005098:	e00e      	b.n	80050b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f99a 	bl	80053d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	e00a      	b.n	80050b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f996 	bl	80053d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a8:	e006      	b.n	80050b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f992 	bl	80053d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80050b6:	e170      	b.n	800539a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b8:	bf00      	nop
    return;
 80050ba:	e16e      	b.n	800539a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	f040 814a 	bne.w	800535a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 8143 	beq.w	800535a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 813c 	beq.w	800535a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	60bb      	str	r3, [r7, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	60bb      	str	r3, [r7, #8]
 80050f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b40      	cmp	r3, #64	; 0x40
 8005104:	f040 80b4 	bne.w	8005270 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005114:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8140 	beq.w	800539e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005122:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005126:	429a      	cmp	r2, r3
 8005128:	f080 8139 	bcs.w	800539e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005132:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	69db      	ldr	r3, [r3, #28]
 800513a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513e:	f000 8088 	beq.w	8005252 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800515c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005160:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	330c      	adds	r3, #12
 800516a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800516e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800517a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1d9      	bne.n	8005142 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3314      	adds	r3, #20
 8005194:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005198:	e853 3f00 	ldrex	r3, [r3]
 800519c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800519e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3314      	adds	r3, #20
 80051ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80051b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80051b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051be:	e841 2300 	strex	r3, r2, [r1]
 80051c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1e1      	bne.n	800518e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3314      	adds	r3, #20
 80051d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3314      	adds	r3, #20
 80051ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051f6:	e841 2300 	strex	r3, r2, [r1]
 80051fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1e3      	bne.n	80051ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800521a:	e853 3f00 	ldrex	r3, [r3]
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005222:	f023 0310 	bic.w	r3, r3, #16
 8005226:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	330c      	adds	r3, #12
 8005230:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005234:	65ba      	str	r2, [r7, #88]	; 0x58
 8005236:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800523a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800523c:	e841 2300 	strex	r3, r2, [r1]
 8005240:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005244:	2b00      	cmp	r3, #0
 8005246:	d1e3      	bne.n	8005210 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	4618      	mov	r0, r3
 800524e:	f7fd fbc7 	bl	80029e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800525a:	b29b      	uxth	r3, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	b29b      	uxth	r3, r3
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8c0 	bl	80053e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005268:	e099      	b.n	800539e <HAL_UART_IRQHandler+0x50e>
 800526a:	bf00      	nop
 800526c:	0800591f 	.word	0x0800591f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005278:	b29b      	uxth	r3, r3
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 808b 	beq.w	80053a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800528c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005290:	2b00      	cmp	r3, #0
 8005292:	f000 8086 	beq.w	80053a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052ba:	647a      	str	r2, [r7, #68]	; 0x44
 80052bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052c2:	e841 2300 	strex	r3, r2, [r1]
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1e3      	bne.n	8005296 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3314      	adds	r3, #20
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	e853 3f00 	ldrex	r3, [r3]
 80052dc:	623b      	str	r3, [r7, #32]
   return(result);
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	f023 0301 	bic.w	r3, r3, #1
 80052e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052f2:	633a      	str	r2, [r7, #48]	; 0x30
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052fa:	e841 2300 	strex	r3, r2, [r1]
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1e3      	bne.n	80052ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2220      	movs	r2, #32
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	60fb      	str	r3, [r7, #12]
   return(result);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0310 	bic.w	r3, r3, #16
 800532a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005338:	61fa      	str	r2, [r7, #28]
 800533a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533c:	69b9      	ldr	r1, [r7, #24]
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	e841 2300 	strex	r3, r2, [r1]
 8005344:	617b      	str	r3, [r7, #20]
   return(result);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1e3      	bne.n	8005314 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800534c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005350:	4619      	mov	r1, r3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f848 	bl	80053e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005358:	e023      	b.n	80053a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800535a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b00      	cmp	r3, #0
 8005364:	d009      	beq.n	800537a <HAL_UART_IRQHandler+0x4ea>
 8005366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fae7 	bl	8005946 <UART_Transmit_IT>
    return;
 8005378:	e014      	b.n	80053a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800537a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00e      	beq.n	80053a4 <HAL_UART_IRQHandler+0x514>
 8005386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fb27 	bl	80059e6 <UART_EndTransmit_IT>
    return;
 8005398:	e004      	b.n	80053a4 <HAL_UART_IRQHandler+0x514>
    return;
 800539a:	bf00      	nop
 800539c:	e002      	b.n	80053a4 <HAL_UART_IRQHandler+0x514>
      return;
 800539e:	bf00      	nop
 80053a0:	e000      	b.n	80053a4 <HAL_UART_IRQHandler+0x514>
      return;
 80053a2:	bf00      	nop
  }
}
 80053a4:	37e8      	adds	r7, #232	; 0xe8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop

080053ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b09c      	sub	sp, #112	; 0x70
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d172      	bne.n	8005502 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800541c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800541e:	2200      	movs	r2, #0
 8005420:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	330c      	adds	r3, #12
 8005428:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800542c:	e853 3f00 	ldrex	r3, [r3]
 8005430:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005434:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005438:	66bb      	str	r3, [r7, #104]	; 0x68
 800543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	330c      	adds	r3, #12
 8005440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005442:	65ba      	str	r2, [r7, #88]	; 0x58
 8005444:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005446:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005448:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800544a:	e841 2300 	strex	r3, r2, [r1]
 800544e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1e5      	bne.n	8005422 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3314      	adds	r3, #20
 800545c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	667b      	str	r3, [r7, #100]	; 0x64
 800546e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005476:	647a      	str	r2, [r7, #68]	; 0x44
 8005478:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800547c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005494:	e853 3f00 	ldrex	r3, [r3]
 8005498:	623b      	str	r3, [r7, #32]
   return(result);
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a0:	663b      	str	r3, [r7, #96]	; 0x60
 80054a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3314      	adds	r3, #20
 80054a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054aa:	633a      	str	r2, [r7, #48]	; 0x30
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1e5      	bne.n	800548a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d119      	bne.n	8005502 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0310 	bic.w	r3, r3, #16
 80054e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	330c      	adds	r3, #12
 80054ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054ee:	61fa      	str	r2, [r7, #28]
 80054f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	69b9      	ldr	r1, [r7, #24]
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	617b      	str	r3, [r7, #20]
   return(result);
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1e5      	bne.n	80054ce <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	2b01      	cmp	r3, #1
 8005508:	d106      	bne.n	8005518 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800550a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800550c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800550e:	4619      	mov	r1, r3
 8005510:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005512:	f7ff ff69 	bl	80053e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005516:	e002      	b.n	800551e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005518:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800551a:	f7fb fc1d 	bl	8000d58 <HAL_UART_RxCpltCallback>
}
 800551e:	bf00      	nop
 8005520:	3770      	adds	r7, #112	; 0x70
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	2b01      	cmp	r3, #1
 800553a:	d108      	bne.n	800554e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005540:	085b      	lsrs	r3, r3, #1
 8005542:	b29b      	uxth	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ff4e 	bl	80053e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800554c:	e002      	b.n	8005554 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff ff36 	bl	80053c0 <HAL_UART_RxHalfCpltCallback>
}
 8005554:	bf00      	nop
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005564:	2300      	movs	r3, #0
 8005566:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	bf0c      	ite	eq
 800557c:	2301      	moveq	r3, #1
 800557e:	2300      	movne	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b21      	cmp	r3, #33	; 0x21
 800558e:	d108      	bne.n	80055a2 <UART_DMAError+0x46>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d005      	beq.n	80055a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800559c:	68b8      	ldr	r0, [r7, #8]
 800559e:	f000 f933 	bl	8005808 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b40      	cmp	r3, #64	; 0x40
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b22      	cmp	r3, #34	; 0x22
 80055c2:	d108      	bne.n	80055d6 <UART_DMAError+0x7a>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2200      	movs	r2, #0
 80055ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80055d0:	68b8      	ldr	r0, [r7, #8]
 80055d2:	f000 f941 	bl	8005858 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	f043 0210 	orr.w	r2, r3, #16
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055e2:	68b8      	ldr	r0, [r7, #8]
 80055e4:	f7ff fef6 	bl	80053d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055e8:	bf00      	nop
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b090      	sub	sp, #64	; 0x40
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	e050      	b.n	80056a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d04c      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800560a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <UART_WaitOnFlagUntilTimeout+0x30>
 8005610:	f7fc fbac 	bl	8001d6c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800561c:	429a      	cmp	r2, r3
 800561e:	d241      	bcs.n	80056a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	330c      	adds	r3, #12
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562a:	e853 3f00 	ldrex	r3, [r3]
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005640:	637a      	str	r2, [r7, #52]	; 0x34
 8005642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e5      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3314      	adds	r3, #20
 800565a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	e853 3f00 	ldrex	r3, [r3]
 8005662:	613b      	str	r3, [r7, #16]
   return(result);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	63bb      	str	r3, [r7, #56]	; 0x38
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3314      	adds	r3, #20
 8005672:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005674:	623a      	str	r2, [r7, #32]
 8005676:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005678:	69f9      	ldr	r1, [r7, #28]
 800567a:	6a3a      	ldr	r2, [r7, #32]
 800567c:	e841 2300 	strex	r3, r2, [r1]
 8005680:	61bb      	str	r3, [r7, #24]
   return(result);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1e5      	bne.n	8005654 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e00f      	b.n	80056c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d09f      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3740      	adds	r7, #64	; 0x40
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b098      	sub	sp, #96	; 0x60
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2222      	movs	r2, #34	; 0x22
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	4a40      	ldr	r2, [pc, #256]	; (80057fc <UART_Start_Receive_DMA+0x130>)
 80056fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	4a3f      	ldr	r2, [pc, #252]	; (8005800 <UART_Start_Receive_DMA+0x134>)
 8005702:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	4a3e      	ldr	r2, [pc, #248]	; (8005804 <UART_Start_Receive_DMA+0x138>)
 800570a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	2200      	movs	r2, #0
 8005712:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005714:	f107 0308 	add.w	r3, r7, #8
 8005718:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3304      	adds	r3, #4
 8005724:	4619      	mov	r1, r3
 8005726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	f7fd f900 	bl	8002930 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d019      	beq.n	800578a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	65bb      	str	r3, [r7, #88]	; 0x58
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	330c      	adds	r3, #12
 8005774:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005776:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005778:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800577c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e5      	bne.n	8005756 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3314      	adds	r3, #20
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	f043 0301 	orr.w	r3, r3, #1
 80057a0:	657b      	str	r3, [r7, #84]	; 0x54
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3314      	adds	r3, #20
 80057a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80057b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e5      	bne.n	800578a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3314      	adds	r3, #20
 80057c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	617b      	str	r3, [r7, #20]
   return(result);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d4:	653b      	str	r3, [r7, #80]	; 0x50
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057de:	627a      	str	r2, [r7, #36]	; 0x24
 80057e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	6a39      	ldr	r1, [r7, #32]
 80057e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3760      	adds	r7, #96	; 0x60
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08005401 	.word	0x08005401
 8005800:	08005527 	.word	0x08005527
 8005804:	0800555d 	.word	0x0800555d

08005808 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005808:	b480      	push	{r7}
 800580a:	b089      	sub	sp, #36	; 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	61ba      	str	r2, [r7, #24]
 8005832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6979      	ldr	r1, [r7, #20]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	613b      	str	r3, [r7, #16]
   return(result);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e5      	bne.n	8005810 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800584c:	bf00      	nop
 800584e:	3724      	adds	r7, #36	; 0x24
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b095      	sub	sp, #84	; 0x54
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005880:	643a      	str	r2, [r7, #64]	; 0x40
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005886:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e5      	bne.n	8005860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3314      	adds	r3, #20
 800589a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	e853 3f00 	ldrex	r3, [r3]
 80058a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f023 0301 	bic.w	r3, r3, #1
 80058aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058bc:	e841 2300 	strex	r3, r2, [r1]
 80058c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1e5      	bne.n	8005894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d119      	bne.n	8005904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	e853 3f00 	ldrex	r3, [r3]
 80058de:	60bb      	str	r3, [r7, #8]
   return(result);
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	f023 0310 	bic.w	r3, r3, #16
 80058e6:	647b      	str	r3, [r7, #68]	; 0x44
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	330c      	adds	r3, #12
 80058ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058f0:	61ba      	str	r2, [r7, #24]
 80058f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	e841 2300 	strex	r3, r2, [r1]
 80058fc:	613b      	str	r3, [r7, #16]
   return(result);
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d1e5      	bne.n	80058d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005912:	bf00      	nop
 8005914:	3754      	adds	r7, #84	; 0x54
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f7ff fd4b 	bl	80053d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b21      	cmp	r3, #33	; 0x21
 8005958:	d13e      	bne.n	80059d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005962:	d114      	bne.n	800598e <UART_Transmit_IT+0x48>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d110      	bne.n	800598e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6a1b      	ldr	r3, [r3, #32]
 8005970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	621a      	str	r2, [r3, #32]
 800598c:	e008      	b.n	80059a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	1c59      	adds	r1, r3, #1
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	6211      	str	r1, [r2, #32]
 8005998:	781a      	ldrb	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	4619      	mov	r1, r3
 80059ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10f      	bne.n	80059d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68da      	ldr	r2, [r3, #12]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
  }
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b082      	sub	sp, #8
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fcd0 	bl	80053ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b08c      	sub	sp, #48	; 0x30
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b22      	cmp	r3, #34	; 0x22
 8005a28:	f040 80ab 	bne.w	8005b82 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a34:	d117      	bne.n	8005a66 <UART_Receive_IT+0x50>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d113      	bne.n	8005a66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a46:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	1c9a      	adds	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28
 8005a64:	e026      	b.n	8005ab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a78:	d007      	beq.n	8005a8a <UART_Receive_IT+0x74>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <UART_Receive_IT+0x82>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d106      	bne.n	8005a98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	e008      	b.n	8005aaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3b01      	subs	r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d15a      	bne.n	8005b7e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0220 	bic.w	r2, r2, #32
 8005ad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 0201 	bic.w	r2, r2, #1
 8005af6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d135      	bne.n	8005b74 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	330c      	adds	r3, #12
 8005b14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b2e:	623a      	str	r2, [r7, #32]
 8005b30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	6a3a      	ldr	r2, [r7, #32]
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e5      	bne.n	8005b0e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b10      	cmp	r3, #16
 8005b4e:	d10a      	bne.n	8005b66 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fc3b 	bl	80053e8 <HAL_UARTEx_RxEventCallback>
 8005b72:	e002      	b.n	8005b7a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7fb f8ef 	bl	8000d58 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e002      	b.n	8005b84 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3730      	adds	r7, #48	; 0x30
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b90:	b0c0      	sub	sp, #256	; 0x100
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba8:	68d9      	ldr	r1, [r3, #12]
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	ea40 0301 	orr.w	r3, r0, r1
 8005bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bba:	689a      	ldr	r2, [r3, #8]
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005be4:	f021 010c 	bic.w	r1, r1, #12
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c06:	6999      	ldr	r1, [r3, #24]
 8005c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	ea40 0301 	orr.w	r3, r0, r1
 8005c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b8f      	ldr	r3, [pc, #572]	; (8005e58 <UART_SetConfig+0x2cc>)
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d005      	beq.n	8005c2c <UART_SetConfig+0xa0>
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b8d      	ldr	r3, [pc, #564]	; (8005e5c <UART_SetConfig+0x2d0>)
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d104      	bne.n	8005c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7fd fcb8 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8005c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c34:	e003      	b.n	8005c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c36:	f7fd fc9f 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8005c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c48:	f040 810c 	bne.w	8005e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c50:	2200      	movs	r2, #0
 8005c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c5e:	4622      	mov	r2, r4
 8005c60:	462b      	mov	r3, r5
 8005c62:	1891      	adds	r1, r2, r2
 8005c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c66:	415b      	adcs	r3, r3
 8005c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c6e:	4621      	mov	r1, r4
 8005c70:	eb12 0801 	adds.w	r8, r2, r1
 8005c74:	4629      	mov	r1, r5
 8005c76:	eb43 0901 	adc.w	r9, r3, r1
 8005c7a:	f04f 0200 	mov.w	r2, #0
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c8e:	4690      	mov	r8, r2
 8005c90:	4699      	mov	r9, r3
 8005c92:	4623      	mov	r3, r4
 8005c94:	eb18 0303 	adds.w	r3, r8, r3
 8005c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	eb49 0303 	adc.w	r3, r9, r3
 8005ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005cba:	460b      	mov	r3, r1
 8005cbc:	18db      	adds	r3, r3, r3
 8005cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	eb42 0303 	adc.w	r3, r2, r3
 8005cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8005cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005cd0:	f7fa faf6 	bl	80002c0 <__aeabi_uldivmod>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4b61      	ldr	r3, [pc, #388]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005cda:	fba3 2302 	umull	r2, r3, r3, r2
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	011c      	lsls	r4, r3, #4
 8005ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	1891      	adds	r1, r2, r2
 8005cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005cfc:	415b      	adcs	r3, r3
 8005cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d04:	4641      	mov	r1, r8
 8005d06:	eb12 0a01 	adds.w	sl, r2, r1
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	f04f 0300 	mov.w	r3, #0
 8005d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d24:	4692      	mov	sl, r2
 8005d26:	469b      	mov	fp, r3
 8005d28:	4643      	mov	r3, r8
 8005d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d32:	464b      	mov	r3, r9
 8005d34:	eb4b 0303 	adc.w	r3, fp, r3
 8005d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d50:	460b      	mov	r3, r1
 8005d52:	18db      	adds	r3, r3, r3
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	4613      	mov	r3, r2
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d66:	f7fa faab 	bl	80002c0 <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4611      	mov	r1, r2
 8005d70:	4b3b      	ldr	r3, [pc, #236]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005d72:	fba3 2301 	umull	r2, r3, r3, r1
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	2264      	movs	r2, #100	; 0x64
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	1acb      	subs	r3, r1, r3
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d86:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005d88:	fba3 2302 	umull	r2, r3, r3, r2
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d94:	441c      	add	r4, r3
 8005d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	1891      	adds	r1, r2, r2
 8005dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8005db0:	415b      	adcs	r3, r3
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005db8:	4641      	mov	r1, r8
 8005dba:	1851      	adds	r1, r2, r1
 8005dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	414b      	adcs	r3, r1
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005dd0:	4659      	mov	r1, fp
 8005dd2:	00cb      	lsls	r3, r1, #3
 8005dd4:	4651      	mov	r1, sl
 8005dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dda:	4651      	mov	r1, sl
 8005ddc:	00ca      	lsls	r2, r1, #3
 8005dde:	4610      	mov	r0, r2
 8005de0:	4619      	mov	r1, r3
 8005de2:	4603      	mov	r3, r0
 8005de4:	4642      	mov	r2, r8
 8005de6:	189b      	adds	r3, r3, r2
 8005de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dec:	464b      	mov	r3, r9
 8005dee:	460a      	mov	r2, r1
 8005df0:	eb42 0303 	adc.w	r3, r2, r3
 8005df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e12:	4613      	mov	r3, r2
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e22:	f7fa fa4d 	bl	80002c0 <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e30:	095b      	lsrs	r3, r3, #5
 8005e32:	2164      	movs	r1, #100	; 0x64
 8005e34:	fb01 f303 	mul.w	r3, r1, r3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	3332      	adds	r3, #50	; 0x32
 8005e3e:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <UART_SetConfig+0x2d4>)
 8005e40:	fba2 2303 	umull	r2, r3, r2, r3
 8005e44:	095b      	lsrs	r3, r3, #5
 8005e46:	f003 0207 	and.w	r2, r3, #7
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4422      	add	r2, r4
 8005e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e54:	e105      	b.n	8006062 <UART_SetConfig+0x4d6>
 8005e56:	bf00      	nop
 8005e58:	40011000 	.word	0x40011000
 8005e5c:	40011400 	.word	0x40011400
 8005e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e76:	4642      	mov	r2, r8
 8005e78:	464b      	mov	r3, r9
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	6239      	str	r1, [r7, #32]
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
 8005e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e86:	4641      	mov	r1, r8
 8005e88:	1854      	adds	r4, r2, r1
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	eb43 0501 	adc.w	r5, r3, r1
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	00eb      	lsls	r3, r5, #3
 8005e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e9e:	00e2      	lsls	r2, r4, #3
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	461d      	mov	r5, r3
 8005ea4:	4643      	mov	r3, r8
 8005ea6:	18e3      	adds	r3, r4, r3
 8005ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005eac:	464b      	mov	r3, r9
 8005eae:	eb45 0303 	adc.w	r3, r5, r3
 8005eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ed2:	4629      	mov	r1, r5
 8005ed4:	008b      	lsls	r3, r1, #2
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005edc:	4621      	mov	r1, r4
 8005ede:	008a      	lsls	r2, r1, #2
 8005ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005ee4:	f7fa f9ec 	bl	80002c0 <__aeabi_uldivmod>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4b60      	ldr	r3, [pc, #384]	; (8006070 <UART_SetConfig+0x4e4>)
 8005eee:	fba3 2302 	umull	r2, r3, r3, r2
 8005ef2:	095b      	lsrs	r3, r3, #5
 8005ef4:	011c      	lsls	r4, r3, #4
 8005ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f08:	4642      	mov	r2, r8
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	1891      	adds	r1, r2, r2
 8005f0e:	61b9      	str	r1, [r7, #24]
 8005f10:	415b      	adcs	r3, r3
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f18:	4641      	mov	r1, r8
 8005f1a:	1851      	adds	r1, r2, r1
 8005f1c:	6139      	str	r1, [r7, #16]
 8005f1e:	4649      	mov	r1, r9
 8005f20:	414b      	adcs	r3, r1
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	f04f 0200 	mov.w	r2, #0
 8005f28:	f04f 0300 	mov.w	r3, #0
 8005f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f30:	4659      	mov	r1, fp
 8005f32:	00cb      	lsls	r3, r1, #3
 8005f34:	4651      	mov	r1, sl
 8005f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	00ca      	lsls	r2, r1, #3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4619      	mov	r1, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	4642      	mov	r2, r8
 8005f46:	189b      	adds	r3, r3, r2
 8005f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	460a      	mov	r2, r1
 8005f50:	eb42 0303 	adc.w	r3, r2, r3
 8005f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f64:	f04f 0200 	mov.w	r2, #0
 8005f68:	f04f 0300 	mov.w	r3, #0
 8005f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f70:	4649      	mov	r1, r9
 8005f72:	008b      	lsls	r3, r1, #2
 8005f74:	4641      	mov	r1, r8
 8005f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f7a:	4641      	mov	r1, r8
 8005f7c:	008a      	lsls	r2, r1, #2
 8005f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f82:	f7fa f99d 	bl	80002c0 <__aeabi_uldivmod>
 8005f86:	4602      	mov	r2, r0
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4b39      	ldr	r3, [pc, #228]	; (8006070 <UART_SetConfig+0x4e4>)
 8005f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	2164      	movs	r1, #100	; 0x64
 8005f94:	fb01 f303 	mul.w	r3, r1, r3
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	3332      	adds	r3, #50	; 0x32
 8005f9e:	4a34      	ldr	r2, [pc, #208]	; (8006070 <UART_SetConfig+0x4e4>)
 8005fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa4:	095b      	lsrs	r3, r3, #5
 8005fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005faa:	441c      	add	r4, r3
 8005fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8005fb4:	677a      	str	r2, [r7, #116]	; 0x74
 8005fb6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005fba:	4642      	mov	r2, r8
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	1891      	adds	r1, r2, r2
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	415b      	adcs	r3, r3
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fca:	4641      	mov	r1, r8
 8005fcc:	1851      	adds	r1, r2, r1
 8005fce:	6039      	str	r1, [r7, #0]
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	414b      	adcs	r3, r1
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	f04f 0200 	mov.w	r2, #0
 8005fda:	f04f 0300 	mov.w	r3, #0
 8005fde:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fe2:	4659      	mov	r1, fp
 8005fe4:	00cb      	lsls	r3, r1, #3
 8005fe6:	4651      	mov	r1, sl
 8005fe8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fec:	4651      	mov	r1, sl
 8005fee:	00ca      	lsls	r2, r1, #3
 8005ff0:	4610      	mov	r0, r2
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	4642      	mov	r2, r8
 8005ff8:	189b      	adds	r3, r3, r2
 8005ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	460a      	mov	r2, r1
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	663b      	str	r3, [r7, #96]	; 0x60
 8006010:	667a      	str	r2, [r7, #100]	; 0x64
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	f04f 0300 	mov.w	r3, #0
 800601a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800601e:	4649      	mov	r1, r9
 8006020:	008b      	lsls	r3, r1, #2
 8006022:	4641      	mov	r1, r8
 8006024:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006028:	4641      	mov	r1, r8
 800602a:	008a      	lsls	r2, r1, #2
 800602c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006030:	f7fa f946 	bl	80002c0 <__aeabi_uldivmod>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4b0d      	ldr	r3, [pc, #52]	; (8006070 <UART_SetConfig+0x4e4>)
 800603a:	fba3 1302 	umull	r1, r3, r3, r2
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	2164      	movs	r1, #100	; 0x64
 8006042:	fb01 f303 	mul.w	r3, r1, r3
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	3332      	adds	r3, #50	; 0x32
 800604c:	4a08      	ldr	r2, [pc, #32]	; (8006070 <UART_SetConfig+0x4e4>)
 800604e:	fba2 2303 	umull	r2, r3, r2, r3
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4422      	add	r2, r4
 8006060:	609a      	str	r2, [r3, #8]
}
 8006062:	bf00      	nop
 8006064:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006068:	46bd      	mov	sp, r7
 800606a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800606e:	bf00      	nop
 8006070:	51eb851f 	.word	0x51eb851f

08006074 <__NVIC_SetPriority>:
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	4603      	mov	r3, r0
 800607c:	6039      	str	r1, [r7, #0]
 800607e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006084:	2b00      	cmp	r3, #0
 8006086:	db0a      	blt.n	800609e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	490c      	ldr	r1, [pc, #48]	; (80060c0 <__NVIC_SetPriority+0x4c>)
 800608e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006092:	0112      	lsls	r2, r2, #4
 8006094:	b2d2      	uxtb	r2, r2
 8006096:	440b      	add	r3, r1
 8006098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800609c:	e00a      	b.n	80060b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	4908      	ldr	r1, [pc, #32]	; (80060c4 <__NVIC_SetPriority+0x50>)
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	3b04      	subs	r3, #4
 80060ac:	0112      	lsls	r2, r2, #4
 80060ae:	b2d2      	uxtb	r2, r2
 80060b0:	440b      	add	r3, r1
 80060b2:	761a      	strb	r2, [r3, #24]
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	e000e100 	.word	0xe000e100
 80060c4:	e000ed00 	.word	0xe000ed00

080060c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80060cc:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <SysTick_Handler+0x1c>)
 80060ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80060d0:	f001 ff10 	bl	8007ef4 <xTaskGetSchedulerState>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d001      	beq.n	80060de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80060da:	f002 fcf5 	bl	8008ac8 <xPortSysTickHandler>
  }
}
 80060de:	bf00      	nop
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	e000e010 	.word	0xe000e010

080060e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060ec:	2100      	movs	r1, #0
 80060ee:	f06f 0004 	mvn.w	r0, #4
 80060f2:	f7ff ffbf 	bl	8006074 <__NVIC_SetPriority>
#endif
}
 80060f6:	bf00      	nop
 80060f8:	bd80      	pop	{r7, pc}
	...

080060fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006102:	f3ef 8305 	mrs	r3, IPSR
 8006106:	603b      	str	r3, [r7, #0]
  return(result);
 8006108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800610e:	f06f 0305 	mvn.w	r3, #5
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	e00c      	b.n	8006130 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006116:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <osKernelInitialize+0x44>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d105      	bne.n	800612a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800611e:	4b08      	ldr	r3, [pc, #32]	; (8006140 <osKernelInitialize+0x44>)
 8006120:	2201      	movs	r2, #1
 8006122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006124:	2300      	movs	r3, #0
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	e002      	b.n	8006130 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295
 800612e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006130:	687b      	ldr	r3, [r7, #4]
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000440 	.word	0x20000440

08006144 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800614a:	f3ef 8305 	mrs	r3, IPSR
 800614e:	603b      	str	r3, [r7, #0]
  return(result);
 8006150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006156:	f06f 0305 	mvn.w	r3, #5
 800615a:	607b      	str	r3, [r7, #4]
 800615c:	e010      	b.n	8006180 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800615e:	4b0b      	ldr	r3, [pc, #44]	; (800618c <osKernelStart+0x48>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d109      	bne.n	800617a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006166:	f7ff ffbf 	bl	80060e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800616a:	4b08      	ldr	r3, [pc, #32]	; (800618c <osKernelStart+0x48>)
 800616c:	2202      	movs	r2, #2
 800616e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006170:	f001 fa66 	bl	8007640 <vTaskStartScheduler>
      stat = osOK;
 8006174:	2300      	movs	r3, #0
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	e002      	b.n	8006180 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006180:	687b      	ldr	r3, [r7, #4]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000440 	.word	0x20000440

08006190 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006196:	f3ef 8305 	mrs	r3, IPSR
 800619a:	603b      	str	r3, [r7, #0]
  return(result);
 800619c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d003      	beq.n	80061aa <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80061a2:	f001 fb6f 	bl	8007884 <xTaskGetTickCountFromISR>
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	e002      	b.n	80061b0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80061aa:	f001 fb5b 	bl	8007864 <xTaskGetTickCount>
 80061ae:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80061b0:	687b      	ldr	r3, [r7, #4]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80061ba:	b580      	push	{r7, lr}
 80061bc:	b08e      	sub	sp, #56	; 0x38
 80061be:	af04      	add	r7, sp, #16
 80061c0:	60f8      	str	r0, [r7, #12]
 80061c2:	60b9      	str	r1, [r7, #8]
 80061c4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ca:	f3ef 8305 	mrs	r3, IPSR
 80061ce:	617b      	str	r3, [r7, #20]
  return(result);
 80061d0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d17e      	bne.n	80062d4 <osThreadNew+0x11a>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d07b      	beq.n	80062d4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80061dc:	2380      	movs	r3, #128	; 0x80
 80061de:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80061e0:	2318      	movs	r3, #24
 80061e2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80061e8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d045      	beq.n	8006280 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <osThreadNew+0x48>
        name = attr->name;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <osThreadNew+0x6e>
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	2b38      	cmp	r3, #56	; 0x38
 800621a:	d805      	bhi.n	8006228 <osThreadNew+0x6e>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <osThreadNew+0x72>
        return (NULL);
 8006228:	2300      	movs	r3, #0
 800622a:	e054      	b.n	80062d6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	089b      	lsrs	r3, r3, #2
 800623a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00e      	beq.n	8006262 <osThreadNew+0xa8>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b5b      	cmp	r3, #91	; 0x5b
 800624a:	d90a      	bls.n	8006262 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006250:	2b00      	cmp	r3, #0
 8006252:	d006      	beq.n	8006262 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <osThreadNew+0xa8>
        mem = 1;
 800625c:	2301      	movs	r3, #1
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	e010      	b.n	8006284 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <osThreadNew+0xca>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d108      	bne.n	8006284 <osThreadNew+0xca>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d104      	bne.n	8006284 <osThreadNew+0xca>
          mem = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e001      	b.n	8006284 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d110      	bne.n	80062ac <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006292:	9202      	str	r2, [sp, #8]
 8006294:	9301      	str	r3, [sp, #4]
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	6a3a      	ldr	r2, [r7, #32]
 800629e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fff7 	bl	8007294 <xTaskCreateStatic>
 80062a6:	4603      	mov	r3, r0
 80062a8:	613b      	str	r3, [r7, #16]
 80062aa:	e013      	b.n	80062d4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d110      	bne.n	80062d4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	f107 0310 	add.w	r3, r7, #16
 80062ba:	9301      	str	r3, [sp, #4]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	9300      	str	r3, [sp, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f001 f842 	bl	800734e <xTaskCreate>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d001      	beq.n	80062d4 <osThreadNew+0x11a>
            hTask = NULL;
 80062d0:	2300      	movs	r3, #0
 80062d2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80062d4:	693b      	ldr	r3, [r7, #16]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e6:	f3ef 8305 	mrs	r3, IPSR
 80062ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80062ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d003      	beq.n	80062fa <osDelay+0x1c>
    stat = osErrorISR;
 80062f2:	f06f 0305 	mvn.w	r3, #5
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e007      	b.n	800630a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <osDelay+0x2c>
      vTaskDelay(ticks);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f967 	bl	80075d8 <vTaskDelay>
    }
  }

  return (stat);
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af02      	add	r7, sp, #8
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006320:	2300      	movs	r3, #0
 8006322:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006324:	f3ef 8305 	mrs	r3, IPSR
 8006328:	613b      	str	r3, [r7, #16]
  return(result);
 800632a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800632c:	2b00      	cmp	r3, #0
 800632e:	d15f      	bne.n	80063f0 <osMessageQueueNew+0xdc>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d05c      	beq.n	80063f0 <osMessageQueueNew+0xdc>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d059      	beq.n	80063f0 <osMessageQueueNew+0xdc>
    mem = -1;
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d029      	beq.n	800639c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d012      	beq.n	8006376 <osMessageQueueNew+0x62>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b4f      	cmp	r3, #79	; 0x4f
 8006356:	d90e      	bls.n	8006376 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	429a      	cmp	r2, r3
 800636e:	d302      	bcc.n	8006376 <osMessageQueueNew+0x62>
        mem = 1;
 8006370:	2301      	movs	r3, #1
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	e014      	b.n	80063a0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d110      	bne.n	80063a0 <osMessageQueueNew+0x8c>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10c      	bne.n	80063a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800638a:	2b00      	cmp	r3, #0
 800638c:	d108      	bne.n	80063a0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <osMessageQueueNew+0x8c>
          mem = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	e001      	b.n	80063a0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d10b      	bne.n	80063be <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	2100      	movs	r1, #0
 80063b0:	9100      	str	r1, [sp, #0]
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fa2f 	bl	8006818 <xQueueGenericCreateStatic>
 80063ba:	61f8      	str	r0, [r7, #28]
 80063bc:	e008      	b.n	80063d0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80063c4:	2200      	movs	r2, #0
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fa9d 	bl	8006908 <xQueueGenericCreate>
 80063ce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e001      	b.n	80063e8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80063e8:	6979      	ldr	r1, [r7, #20]
 80063ea:	69f8      	ldr	r0, [r7, #28]
 80063ec:	f000 fef4 	bl	80071d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80063f0:	69fb      	ldr	r3, [r7, #28]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3720      	adds	r7, #32
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
	...

080063fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006410:	2300      	movs	r3, #0
 8006412:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006414:	f3ef 8305 	mrs	r3, IPSR
 8006418:	617b      	str	r3, [r7, #20]
  return(result);
 800641a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800641c:	2b00      	cmp	r3, #0
 800641e:	d028      	beq.n	8006472 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <osMessageQueuePut+0x36>
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d002      	beq.n	8006432 <osMessageQueuePut+0x36>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006432:	f06f 0303 	mvn.w	r3, #3
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e038      	b.n	80064ac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800643e:	f107 0210 	add.w	r2, r7, #16
 8006442:	2300      	movs	r3, #0
 8006444:	68b9      	ldr	r1, [r7, #8]
 8006446:	69b8      	ldr	r0, [r7, #24]
 8006448:	f000 fbba 	bl	8006bc0 <xQueueGenericSendFromISR>
 800644c:	4603      	mov	r3, r0
 800644e:	2b01      	cmp	r3, #1
 8006450:	d003      	beq.n	800645a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006452:	f06f 0302 	mvn.w	r3, #2
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	e028      	b.n	80064ac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d025      	beq.n	80064ac <osMessageQueuePut+0xb0>
 8006460:	4b15      	ldr	r3, [pc, #84]	; (80064b8 <osMessageQueuePut+0xbc>)
 8006462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	e01c      	b.n	80064ac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <osMessageQueuePut+0x82>
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d103      	bne.n	8006486 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800647e:	f06f 0303 	mvn.w	r3, #3
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e012      	b.n	80064ac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006486:	2300      	movs	r3, #0
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	69b8      	ldr	r0, [r7, #24]
 800648e:	f000 fa99 	bl	80069c4 <xQueueGenericSend>
 8006492:	4603      	mov	r3, r0
 8006494:	2b01      	cmp	r3, #1
 8006496:	d009      	beq.n	80064ac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800649e:	f06f 0301 	mvn.w	r3, #1
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e002      	b.n	80064ac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80064a6:	f06f 0302 	mvn.w	r3, #2
 80064aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80064ac:	69fb      	ldr	r3, [r7, #28]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	e000ed04 	.word	0xe000ed04

080064bc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064d2:	f3ef 8305 	mrs	r3, IPSR
 80064d6:	617b      	str	r3, [r7, #20]
  return(result);
 80064d8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d028      	beq.n	8006530 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <osMessageQueueGet+0x34>
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <osMessageQueueGet+0x34>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80064f0:	f06f 0303 	mvn.w	r3, #3
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e037      	b.n	8006568 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80064fc:	f107 0310 	add.w	r3, r7, #16
 8006500:	461a      	mov	r2, r3
 8006502:	68b9      	ldr	r1, [r7, #8]
 8006504:	69b8      	ldr	r0, [r7, #24]
 8006506:	f000 fcd7 	bl	8006eb8 <xQueueReceiveFromISR>
 800650a:	4603      	mov	r3, r0
 800650c:	2b01      	cmp	r3, #1
 800650e:	d003      	beq.n	8006518 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006510:	f06f 0302 	mvn.w	r3, #2
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	e027      	b.n	8006568 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d024      	beq.n	8006568 <osMessageQueueGet+0xac>
 800651e:	4b15      	ldr	r3, [pc, #84]	; (8006574 <osMessageQueueGet+0xb8>)
 8006520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	e01b      	b.n	8006568 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <osMessageQueueGet+0x80>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800653c:	f06f 0303 	mvn.w	r3, #3
 8006540:	61fb      	str	r3, [r7, #28]
 8006542:	e011      	b.n	8006568 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	68b9      	ldr	r1, [r7, #8]
 8006548:	69b8      	ldr	r0, [r7, #24]
 800654a:	f000 fbd5 	bl	8006cf8 <xQueueReceive>
 800654e:	4603      	mov	r3, r0
 8006550:	2b01      	cmp	r3, #1
 8006552:	d009      	beq.n	8006568 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800655a:	f06f 0301 	mvn.w	r3, #1
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	e002      	b.n	8006568 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006562:	f06f 0302 	mvn.w	r3, #2
 8006566:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006568:	69fb      	ldr	r3, [r7, #28]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3720      	adds	r7, #32
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	4a07      	ldr	r2, [pc, #28]	; (80065a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	4a06      	ldr	r2, [pc, #24]	; (80065a8 <vApplicationGetIdleTaskMemory+0x30>)
 800658e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2280      	movs	r2, #128	; 0x80
 8006594:	601a      	str	r2, [r3, #0]
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000444 	.word	0x20000444
 80065a8:	200004a0 	.word	0x200004a0

080065ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	4a07      	ldr	r2, [pc, #28]	; (80065d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80065bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4a06      	ldr	r2, [pc, #24]	; (80065dc <vApplicationGetTimerTaskMemory+0x30>)
 80065c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065ca:	601a      	str	r2, [r3, #0]
}
 80065cc:	bf00      	nop
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	200006a0 	.word	0x200006a0
 80065dc:	200006fc 	.word	0x200006fc

080065e0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f103 0208 	add.w	r2, r3, #8
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f04f 32ff 	mov.w	r2, #4294967295
 80065f8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f103 0208 	add.w	r2, r3, #8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f103 0208 	add.w	r2, r3, #8
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d103      	bne.n	80066a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	60fb      	str	r3, [r7, #12]
 80066a0:	e00c      	b.n	80066bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3308      	adds	r3, #8
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	e002      	b.n	80066b0 <vListInsert+0x2e>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d2f6      	bcs.n	80066aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	683a      	ldr	r2, [r7, #0]
 80066d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	601a      	str	r2, [r3, #0]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	6892      	ldr	r2, [r2, #8]
 800670a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	6852      	ldr	r2, [r2, #4]
 8006714:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	429a      	cmp	r2, r3
 800671e:	d103      	bne.n	8006728 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006772:	f002 f917 	bl	80089a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006782:	fb01 f303 	mul.w	r3, r1, r3
 8006786:	441a      	add	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a2:	3b01      	subs	r3, #1
 80067a4:	68f9      	ldr	r1, [r7, #12]
 80067a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067a8:	fb01 f303 	mul.w	r3, r1, r3
 80067ac:	441a      	add	r2, r3
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	22ff      	movs	r2, #255	; 0xff
 80067b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	22ff      	movs	r2, #255	; 0xff
 80067be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d114      	bne.n	80067f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01a      	beq.n	8006806 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3310      	adds	r3, #16
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f9cf 	bl	8007b78 <xTaskRemoveFromEventList>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d012      	beq.n	8006806 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067e0:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <xQueueGenericReset+0xcc>)
 80067e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	f3bf 8f4f 	dsb	sy
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	e009      	b.n	8006806 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3310      	adds	r3, #16
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fef2 	bl	80065e0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3324      	adds	r3, #36	; 0x24
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff feed 	bl	80065e0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006806:	f002 f8fd 	bl	8008a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800680a:	2301      	movs	r3, #1
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	e000ed04 	.word	0xe000ed04

08006818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af02      	add	r7, sp, #8
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <xQueueGenericCreateStatic+0x52>
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <xQueueGenericCreateStatic+0x56>
 800686a:	2301      	movs	r3, #1
 800686c:	e000      	b.n	8006870 <xQueueGenericCreateStatic+0x58>
 800686e:	2300      	movs	r3, #0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10a      	bne.n	800688a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	f3bf 8f6f 	isb	sy
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	623b      	str	r3, [r7, #32]
}
 8006886:	bf00      	nop
 8006888:	e7fe      	b.n	8006888 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <xQueueGenericCreateStatic+0x7e>
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <xQueueGenericCreateStatic+0x82>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <xQueueGenericCreateStatic+0x84>
 800689a:	2300      	movs	r3, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10a      	bne.n	80068b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	61fb      	str	r3, [r7, #28]
}
 80068b2:	bf00      	nop
 80068b4:	e7fe      	b.n	80068b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80068b6:	2350      	movs	r3, #80	; 0x50
 80068b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	2b50      	cmp	r3, #80	; 0x50
 80068be:	d00a      	beq.n	80068d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	61bb      	str	r3, [r7, #24]
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068d6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068ea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f83f 	bl	800697c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006900:	4618      	mov	r0, r3
 8006902:	3730      	adds	r7, #48	; 0x30
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10a      	bne.n	8006932 <xQueueGenericCreate+0x2a>
	__asm volatile
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	f383 8811 	msr	BASEPRI, r3
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	613b      	str	r3, [r7, #16]
}
 800692e:	bf00      	nop
 8006930:	e7fe      	b.n	8006930 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	fb02 f303 	mul.w	r3, r2, r3
 800693a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	3350      	adds	r3, #80	; 0x50
 8006940:	4618      	mov	r0, r3
 8006942:	f002 f951 	bl	8008be8 <pvPortMalloc>
 8006946:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d011      	beq.n	8006972 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	3350      	adds	r3, #80	; 0x50
 8006956:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	2200      	movs	r2, #0
 800695c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006960:	79fa      	ldrb	r2, [r7, #7]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4613      	mov	r3, r2
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f805 	bl	800697c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006972:	69bb      	ldr	r3, [r7, #24]
	}
 8006974:	4618      	mov	r0, r3
 8006976:	3720      	adds	r7, #32
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d103      	bne.n	8006998 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	e002      	b.n	800699e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069aa:	2101      	movs	r1, #1
 80069ac:	69b8      	ldr	r0, [r7, #24]
 80069ae:	f7ff fecb 	bl	8006748 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	78fa      	ldrb	r2, [r7, #3]
 80069b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80069ba:	bf00      	nop
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08e      	sub	sp, #56	; 0x38
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069d2:	2300      	movs	r3, #0
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10a      	bne.n	80069f6 <xQueueGenericSend+0x32>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d103      	bne.n	8006a04 <xQueueGenericSend+0x40>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <xQueueGenericSend+0x44>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <xQueueGenericSend+0x46>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10a      	bne.n	8006a24 <xQueueGenericSend+0x60>
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a20:	bf00      	nop
 8006a22:	e7fe      	b.n	8006a22 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d103      	bne.n	8006a32 <xQueueGenericSend+0x6e>
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <xQueueGenericSend+0x72>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <xQueueGenericSend+0x74>
 8006a36:	2300      	movs	r3, #0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <xQueueGenericSend+0x8e>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	623b      	str	r3, [r7, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a52:	f001 fa4f 	bl	8007ef4 <xTaskGetSchedulerState>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <xQueueGenericSend+0x9e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <xQueueGenericSend+0xa2>
 8006a62:	2301      	movs	r3, #1
 8006a64:	e000      	b.n	8006a68 <xQueueGenericSend+0xa4>
 8006a66:	2300      	movs	r3, #0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10a      	bne.n	8006a82 <xQueueGenericSend+0xbe>
	__asm volatile
 8006a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	61fb      	str	r3, [r7, #28]
}
 8006a7e:	bf00      	nop
 8006a80:	e7fe      	b.n	8006a80 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a82:	f001 ff8f 	bl	80089a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d302      	bcc.n	8006a98 <xQueueGenericSend+0xd4>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d129      	bne.n	8006aec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9e:	f000 fa8b 	bl	8006fb8 <prvCopyDataToQueue>
 8006aa2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d010      	beq.n	8006ace <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	3324      	adds	r3, #36	; 0x24
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 f861 	bl	8007b78 <xTaskRemoveFromEventList>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d013      	beq.n	8006ae4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006abc:	4b3f      	ldr	r3, [pc, #252]	; (8006bbc <xQueueGenericSend+0x1f8>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	e00a      	b.n	8006ae4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d007      	beq.n	8006ae4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ad4:	4b39      	ldr	r3, [pc, #228]	; (8006bbc <xQueueGenericSend+0x1f8>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ae4:	f001 ff8e 	bl	8008a04 <vPortExitCritical>
				return pdPASS;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e063      	b.n	8006bb4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006af2:	f001 ff87 	bl	8008a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e05c      	b.n	8006bb4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d106      	bne.n	8006b0e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b00:	f107 0314 	add.w	r3, r7, #20
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 f89b 	bl	8007c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b0e:	f001 ff79 	bl	8008a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b12:	f000 fdfb 	bl	800770c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b16:	f001 ff45 	bl	80089a4 <vPortEnterCritical>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b20:	b25b      	sxtb	r3, r3
 8006b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b26:	d103      	bne.n	8006b30 <xQueueGenericSend+0x16c>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b36:	b25b      	sxtb	r3, r3
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d103      	bne.n	8006b46 <xQueueGenericSend+0x182>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b46:	f001 ff5d 	bl	8008a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b4a:	1d3a      	adds	r2, r7, #4
 8006b4c:	f107 0314 	add.w	r3, r7, #20
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f001 f88a 	bl	8007c6c <xTaskCheckForTimeOut>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d124      	bne.n	8006ba8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b60:	f000 fb22 	bl	80071a8 <prvIsQueueFull>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d018      	beq.n	8006b9c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	3310      	adds	r3, #16
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4611      	mov	r1, r2
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 ffb0 	bl	8007ad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7a:	f000 faad 	bl	80070d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b7e:	f000 fdd3 	bl	8007728 <xTaskResumeAll>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f47f af7c 	bne.w	8006a82 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b8a:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <xQueueGenericSend+0x1f8>)
 8006b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b90:	601a      	str	r2, [r3, #0]
 8006b92:	f3bf 8f4f 	dsb	sy
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	e772      	b.n	8006a82 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b9e:	f000 fa9b 	bl	80070d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ba2:	f000 fdc1 	bl	8007728 <xTaskResumeAll>
 8006ba6:	e76c      	b.n	8006a82 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006baa:	f000 fa95 	bl	80070d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bae:	f000 fdbb 	bl	8007728 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bb2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3738      	adds	r7, #56	; 0x38
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b090      	sub	sp, #64	; 0x40
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006bea:	bf00      	nop
 8006bec:	e7fe      	b.n	8006bec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d103      	bne.n	8006bfc <xQueueGenericSendFromISR+0x3c>
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <xQueueGenericSendFromISR+0x40>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <xQueueGenericSendFromISR+0x42>
 8006c00:	2300      	movs	r3, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0a:	f383 8811 	msr	BASEPRI, r3
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	f3bf 8f4f 	dsb	sy
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c18:	bf00      	nop
 8006c1a:	e7fe      	b.n	8006c1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d103      	bne.n	8006c2a <xQueueGenericSendFromISR+0x6a>
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <xQueueGenericSendFromISR+0x6e>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <xQueueGenericSendFromISR+0x70>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	623b      	str	r3, [r7, #32]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c4a:	f001 ff8d 	bl	8008b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c4e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	61fa      	str	r2, [r7, #28]
 8006c64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d302      	bcc.n	8006c7c <xQueueGenericSendFromISR+0xbc>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d12f      	bne.n	8006cdc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	68b9      	ldr	r1, [r7, #8]
 8006c90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c92:	f000 f991 	bl	8006fb8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d112      	bne.n	8006cc6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d016      	beq.n	8006cd6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006caa:	3324      	adds	r3, #36	; 0x24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 ff63 	bl	8007b78 <xTaskRemoveFromEventList>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00e      	beq.n	8006cd6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00b      	beq.n	8006cd6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	e007      	b.n	8006cd6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006cca:	3301      	adds	r3, #1
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	b25a      	sxtb	r2, r3
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006cda:	e001      	b.n	8006ce0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3740      	adds	r7, #64	; 0x40
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08c      	sub	sp, #48	; 0x30
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d04:	2300      	movs	r3, #0
 8006d06:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <xQueueReceive+0x30>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	623b      	str	r3, [r7, #32]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d103      	bne.n	8006d36 <xQueueReceive+0x3e>
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <xQueueReceive+0x42>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <xQueueReceive+0x44>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10a      	bne.n	8006d56 <xQueueReceive+0x5e>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	61fb      	str	r3, [r7, #28]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d56:	f001 f8cd 	bl	8007ef4 <xTaskGetSchedulerState>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <xQueueReceive+0x6e>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <xQueueReceive+0x72>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <xQueueReceive+0x74>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueReceive+0x8e>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	61bb      	str	r3, [r7, #24]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d86:	f001 fe0d 	bl	80089a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d01f      	beq.n	8006dd6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d9a:	f000 f977 	bl	800708c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	1e5a      	subs	r2, r3, #1
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00f      	beq.n	8006dce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	3310      	adds	r3, #16
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fee0 	bl	8007b78 <xTaskRemoveFromEventList>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d007      	beq.n	8006dce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006dbe:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <xQueueReceive+0x1bc>)
 8006dc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dce:	f001 fe19 	bl	8008a04 <vPortExitCritical>
				return pdPASS;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e069      	b.n	8006eaa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ddc:	f001 fe12 	bl	8008a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e062      	b.n	8006eaa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d106      	bne.n	8006df8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dea:	f107 0310 	add.w	r3, r7, #16
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 ff26 	bl	8007c40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006df4:	2301      	movs	r3, #1
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006df8:	f001 fe04 	bl	8008a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dfc:	f000 fc86 	bl	800770c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e00:	f001 fdd0 	bl	80089a4 <vPortEnterCritical>
 8006e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0a:	b25b      	sxtb	r3, r3
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d103      	bne.n	8006e1a <xQueueReceive+0x122>
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e20:	b25b      	sxtb	r3, r3
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d103      	bne.n	8006e30 <xQueueReceive+0x138>
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e30:	f001 fde8 	bl	8008a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e34:	1d3a      	adds	r2, r7, #4
 8006e36:	f107 0310 	add.w	r3, r7, #16
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 ff15 	bl	8007c6c <xTaskCheckForTimeOut>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d123      	bne.n	8006e90 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e4a:	f000 f997 	bl	800717c <prvIsQueueEmpty>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d017      	beq.n	8006e84 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fe3b 	bl	8007ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e64:	f000 f938 	bl	80070d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e68:	f000 fc5e 	bl	8007728 <xTaskResumeAll>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d189      	bne.n	8006d86 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e72:	4b10      	ldr	r3, [pc, #64]	; (8006eb4 <xQueueReceive+0x1bc>)
 8006e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	e780      	b.n	8006d86 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e86:	f000 f927 	bl	80070d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e8a:	f000 fc4d 	bl	8007728 <xTaskResumeAll>
 8006e8e:	e77a      	b.n	8006d86 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e92:	f000 f921 	bl	80070d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e96:	f000 fc47 	bl	8007728 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9c:	f000 f96e 	bl	800717c <prvIsQueueEmpty>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f43f af6f 	beq.w	8006d86 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3730      	adds	r7, #48	; 0x30
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	e000ed04 	.word	0xe000ed04

08006eb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08e      	sub	sp, #56	; 0x38
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	623b      	str	r3, [r7, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	e7fe      	b.n	8006ee2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d103      	bne.n	8006ef2 <xQueueReceiveFromISR+0x3a>
 8006eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d101      	bne.n	8006ef6 <xQueueReceiveFromISR+0x3e>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <xQueueReceiveFromISR+0x40>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d10a      	bne.n	8006f12 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	61fb      	str	r3, [r7, #28]
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f12:	f001 fe29 	bl	8008b68 <vPortValidateInterruptPriority>
	__asm volatile
 8006f16:	f3ef 8211 	mrs	r2, BASEPRI
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	61ba      	str	r2, [r7, #24]
 8006f2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006f2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d02f      	beq.n	8006f9e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f48:	68b9      	ldr	r1, [r7, #8]
 8006f4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f4c:	f000 f89e 	bl	800708c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f52:	1e5a      	subs	r2, r3, #1
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006f58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f60:	d112      	bne.n	8006f88 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d016      	beq.n	8006f98 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	3310      	adds	r3, #16
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f000 fe02 	bl	8007b78 <xTaskRemoveFromEventList>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00e      	beq.n	8006f98 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e007      	b.n	8006f98 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	b25a      	sxtb	r2, r3
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9c:	e001      	b.n	8006fa2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f383 8811 	msr	BASEPRI, r3
}
 8006fac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3738      	adds	r7, #56	; 0x38
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10d      	bne.n	8006ff2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d14d      	bne.n	800707a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 ffa4 	bl	8007f30 <xTaskPriorityDisinherit>
 8006fe8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	e043      	b.n	800707a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d119      	bne.n	800702c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6858      	ldr	r0, [r3, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007000:	461a      	mov	r2, r3
 8007002:	68b9      	ldr	r1, [r7, #8]
 8007004:	f002 f804 	bl	8009010 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007010:	441a      	add	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	429a      	cmp	r2, r3
 8007020:	d32b      	bcc.n	800707a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	605a      	str	r2, [r3, #4]
 800702a:	e026      	b.n	800707a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68d8      	ldr	r0, [r3, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	461a      	mov	r2, r3
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	f001 ffea 	bl	8009010 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	425b      	negs	r3, r3
 8007046:	441a      	add	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d207      	bcs.n	8007068 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	425b      	negs	r3, r3
 8007062:	441a      	add	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b02      	cmp	r3, #2
 800706c:	d105      	bne.n	800707a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d002      	beq.n	800707a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	3b01      	subs	r3, #1
 8007078:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007082:	697b      	ldr	r3, [r7, #20]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709a:	2b00      	cmp	r3, #0
 800709c:	d018      	beq.n	80070d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	441a      	add	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d303      	bcc.n	80070c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68d9      	ldr	r1, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	461a      	mov	r2, r3
 80070ca:	6838      	ldr	r0, [r7, #0]
 80070cc:	f001 ffa0 	bl	8009010 <memcpy>
	}
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070e0:	f001 fc60 	bl	80089a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070ec:	e011      	b.n	8007112 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d012      	beq.n	800711c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3324      	adds	r3, #36	; 0x24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fd3c 	bl	8007b78 <xTaskRemoveFromEventList>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007106:	f000 fe13 	bl	8007d30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
 800710c:	3b01      	subs	r3, #1
 800710e:	b2db      	uxtb	r3, r3
 8007110:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007116:	2b00      	cmp	r3, #0
 8007118:	dce9      	bgt.n	80070ee <prvUnlockQueue+0x16>
 800711a:	e000      	b.n	800711e <prvUnlockQueue+0x46>
					break;
 800711c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	22ff      	movs	r2, #255	; 0xff
 8007122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007126:	f001 fc6d 	bl	8008a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800712a:	f001 fc3b 	bl	80089a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007134:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007136:	e011      	b.n	800715c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d012      	beq.n	8007166 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3310      	adds	r3, #16
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fd17 	bl	8007b78 <xTaskRemoveFromEventList>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007150:	f000 fdee 	bl	8007d30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007154:	7bbb      	ldrb	r3, [r7, #14]
 8007156:	3b01      	subs	r3, #1
 8007158:	b2db      	uxtb	r3, r3
 800715a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800715c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007160:	2b00      	cmp	r3, #0
 8007162:	dce9      	bgt.n	8007138 <prvUnlockQueue+0x60>
 8007164:	e000      	b.n	8007168 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007166:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	22ff      	movs	r2, #255	; 0xff
 800716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007170:	f001 fc48 	bl	8008a04 <vPortExitCritical>
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007184:	f001 fc0e 	bl	80089a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007190:	2301      	movs	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	e001      	b.n	800719a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800719a:	f001 fc33 	bl	8008a04 <vPortExitCritical>

	return xReturn;
 800719e:	68fb      	ldr	r3, [r7, #12]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071b0:	f001 fbf8 	bl	80089a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071bc:	429a      	cmp	r2, r3
 80071be:	d102      	bne.n	80071c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e001      	b.n	80071ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ca:	f001 fc1b 	bl	8008a04 <vPortExitCritical>

	return xReturn;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e014      	b.n	8007212 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071e8:	4a0f      	ldr	r2, [pc, #60]	; (8007228 <vQueueAddToRegistry+0x50>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80071f4:	490c      	ldr	r1, [pc, #48]	; (8007228 <vQueueAddToRegistry+0x50>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80071fe:	4a0a      	ldr	r2, [pc, #40]	; (8007228 <vQueueAddToRegistry+0x50>)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	4413      	add	r3, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800720a:	e006      	b.n	800721a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b07      	cmp	r3, #7
 8007216:	d9e7      	bls.n	80071e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	20000afc 	.word	0x20000afc

0800722c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800723c:	f001 fbb2 	bl	80089a4 <vPortEnterCritical>
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007246:	b25b      	sxtb	r3, r3
 8007248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800724c:	d103      	bne.n	8007256 <vQueueWaitForMessageRestricted+0x2a>
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800725c:	b25b      	sxtb	r3, r3
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d103      	bne.n	800726c <vQueueWaitForMessageRestricted+0x40>
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800726c:	f001 fbca 	bl	8008a04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	2b00      	cmp	r3, #0
 8007276:	d106      	bne.n	8007286 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	3324      	adds	r3, #36	; 0x24
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	68b9      	ldr	r1, [r7, #8]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fc4d 	bl	8007b20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007286:	6978      	ldr	r0, [r7, #20]
 8007288:	f7ff ff26 	bl	80070d8 <prvUnlockQueue>
	}
 800728c:	bf00      	nop
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08e      	sub	sp, #56	; 0x38
 8007298:	af04      	add	r7, sp, #16
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10a      	bne.n	80072be <xTaskCreateStatic+0x2a>
	__asm volatile
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	f383 8811 	msr	BASEPRI, r3
 80072b0:	f3bf 8f6f 	isb	sy
 80072b4:	f3bf 8f4f 	dsb	sy
 80072b8:	623b      	str	r3, [r7, #32]
}
 80072ba:	bf00      	nop
 80072bc:	e7fe      	b.n	80072bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <xTaskCreateStatic+0x46>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	61fb      	str	r3, [r7, #28]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072da:	235c      	movs	r3, #92	; 0x5c
 80072dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b5c      	cmp	r3, #92	; 0x5c
 80072e2:	d00a      	beq.n	80072fa <xTaskCreateStatic+0x66>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	61bb      	str	r3, [r7, #24]
}
 80072f6:	bf00      	nop
 80072f8:	e7fe      	b.n	80072f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80072fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d01e      	beq.n	8007340 <xTaskCreateStatic+0xac>
 8007302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01b      	beq.n	8007340 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007310:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	2202      	movs	r2, #2
 8007316:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800731a:	2300      	movs	r3, #0
 800731c:	9303      	str	r3, [sp, #12]
 800731e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007320:	9302      	str	r3, [sp, #8]
 8007322:	f107 0314 	add.w	r3, r7, #20
 8007326:	9301      	str	r3, [sp, #4]
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	68b9      	ldr	r1, [r7, #8]
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 f850 	bl	80073d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007338:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800733a:	f000 f8dd 	bl	80074f8 <prvAddNewTaskToReadyList>
 800733e:	e001      	b.n	8007344 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007340:	2300      	movs	r3, #0
 8007342:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007344:	697b      	ldr	r3, [r7, #20]
	}
 8007346:	4618      	mov	r0, r3
 8007348:	3728      	adds	r7, #40	; 0x28
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800734e:	b580      	push	{r7, lr}
 8007350:	b08c      	sub	sp, #48	; 0x30
 8007352:	af04      	add	r7, sp, #16
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4618      	mov	r0, r3
 8007364:	f001 fc40 	bl	8008be8 <pvPortMalloc>
 8007368:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00e      	beq.n	800738e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007370:	205c      	movs	r0, #92	; 0x5c
 8007372:	f001 fc39 	bl	8008be8 <pvPortMalloc>
 8007376:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	631a      	str	r2, [r3, #48]	; 0x30
 8007384:	e005      	b.n	8007392 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007386:	6978      	ldr	r0, [r7, #20]
 8007388:	f001 fcfa 	bl	8008d80 <vPortFree>
 800738c:	e001      	b.n	8007392 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800738e:	2300      	movs	r3, #0
 8007390:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d017      	beq.n	80073c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2200      	movs	r2, #0
 800739c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073a0:	88fa      	ldrh	r2, [r7, #6]
 80073a2:	2300      	movs	r3, #0
 80073a4:	9303      	str	r3, [sp, #12]
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 f80e 	bl	80073d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073bc:	69f8      	ldr	r0, [r7, #28]
 80073be:	f000 f89b 	bl	80074f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073c2:	2301      	movs	r3, #1
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	e002      	b.n	80073ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073c8:	f04f 33ff 	mov.w	r3, #4294967295
 80073cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073ce:	69bb      	ldr	r3, [r7, #24]
	}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	461a      	mov	r2, r3
 80073f0:	21a5      	movs	r1, #165	; 0xa5
 80073f2:	f001 fe1b 	bl	800902c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007400:	3b01      	subs	r3, #1
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	f023 0307 	bic.w	r3, r3, #7
 800740e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <prvInitialiseNewTask+0x58>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	617b      	str	r3, [r7, #20]
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01f      	beq.n	8007476 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007436:	2300      	movs	r3, #0
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	e012      	b.n	8007462 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	7819      	ldrb	r1, [r3, #0]
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	3334      	adds	r3, #52	; 0x34
 800744c:	460a      	mov	r2, r1
 800744e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d006      	beq.n	800746a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	3301      	adds	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b0f      	cmp	r3, #15
 8007466:	d9e9      	bls.n	800743c <prvInitialiseNewTask+0x64>
 8007468:	e000      	b.n	800746c <prvInitialiseNewTask+0x94>
			{
				break;
 800746a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007474:	e003      	b.n	800747e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	2b37      	cmp	r3, #55	; 0x37
 8007482:	d901      	bls.n	8007488 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007484:	2337      	movs	r3, #55	; 0x37
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800748c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007492:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	2200      	movs	r2, #0
 8007498:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff f8be 	bl	8006620 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	3318      	adds	r3, #24
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7ff f8b9 	bl	8006620 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c6:	2200      	movs	r2, #0
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	68f9      	ldr	r1, [r7, #12]
 80074d6:	69b8      	ldr	r0, [r7, #24]
 80074d8:	f001 f93a 	bl	8008750 <pxPortInitialiseStack>
 80074dc:	4602      	mov	r2, r0
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ee:	bf00      	nop
 80074f0:	3720      	adds	r7, #32
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007500:	f001 fa50 	bl	80089a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007504:	4b2d      	ldr	r3, [pc, #180]	; (80075bc <prvAddNewTaskToReadyList+0xc4>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3301      	adds	r3, #1
 800750a:	4a2c      	ldr	r2, [pc, #176]	; (80075bc <prvAddNewTaskToReadyList+0xc4>)
 800750c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800750e:	4b2c      	ldr	r3, [pc, #176]	; (80075c0 <prvAddNewTaskToReadyList+0xc8>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007516:	4a2a      	ldr	r2, [pc, #168]	; (80075c0 <prvAddNewTaskToReadyList+0xc8>)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800751c:	4b27      	ldr	r3, [pc, #156]	; (80075bc <prvAddNewTaskToReadyList+0xc4>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d110      	bne.n	8007546 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007524:	f000 fc28 	bl	8007d78 <prvInitialiseTaskLists>
 8007528:	e00d      	b.n	8007546 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800752a:	4b26      	ldr	r3, [pc, #152]	; (80075c4 <prvAddNewTaskToReadyList+0xcc>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007532:	4b23      	ldr	r3, [pc, #140]	; (80075c0 <prvAddNewTaskToReadyList+0xc8>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	429a      	cmp	r2, r3
 800753e:	d802      	bhi.n	8007546 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007540:	4a1f      	ldr	r2, [pc, #124]	; (80075c0 <prvAddNewTaskToReadyList+0xc8>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <prvAddNewTaskToReadyList+0xd0>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <prvAddNewTaskToReadyList+0xd0>)
 800754e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007550:	4b1d      	ldr	r3, [pc, #116]	; (80075c8 <prvAddNewTaskToReadyList+0xd0>)
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800755c:	4b1b      	ldr	r3, [pc, #108]	; (80075cc <prvAddNewTaskToReadyList+0xd4>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d903      	bls.n	800756c <prvAddNewTaskToReadyList+0x74>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	4a18      	ldr	r2, [pc, #96]	; (80075cc <prvAddNewTaskToReadyList+0xd4>)
 800756a:	6013      	str	r3, [r2, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007570:	4613      	mov	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4413      	add	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4a15      	ldr	r2, [pc, #84]	; (80075d0 <prvAddNewTaskToReadyList+0xd8>)
 800757a:	441a      	add	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3304      	adds	r3, #4
 8007580:	4619      	mov	r1, r3
 8007582:	4610      	mov	r0, r2
 8007584:	f7ff f859 	bl	800663a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007588:	f001 fa3c 	bl	8008a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800758c:	4b0d      	ldr	r3, [pc, #52]	; (80075c4 <prvAddNewTaskToReadyList+0xcc>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00e      	beq.n	80075b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007594:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <prvAddNewTaskToReadyList+0xc8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759e:	429a      	cmp	r2, r3
 80075a0:	d207      	bcs.n	80075b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075a2:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <prvAddNewTaskToReadyList+0xdc>)
 80075a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20001010 	.word	0x20001010
 80075c0:	20000b3c 	.word	0x20000b3c
 80075c4:	2000101c 	.word	0x2000101c
 80075c8:	2000102c 	.word	0x2000102c
 80075cc:	20001018 	.word	0x20001018
 80075d0:	20000b40 	.word	0x20000b40
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075e0:	2300      	movs	r3, #0
 80075e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d017      	beq.n	800761a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075ea:	4b13      	ldr	r3, [pc, #76]	; (8007638 <vTaskDelay+0x60>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <vTaskDelay+0x30>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	60bb      	str	r3, [r7, #8]
}
 8007604:	bf00      	nop
 8007606:	e7fe      	b.n	8007606 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007608:	f000 f880 	bl	800770c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800760c:	2100      	movs	r1, #0
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fcfc 	bl	800800c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007614:	f000 f888 	bl	8007728 <xTaskResumeAll>
 8007618:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d107      	bne.n	8007630 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <vTaskDelay+0x64>)
 8007622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	20001038 	.word	0x20001038
 800763c:	e000ed04 	.word	0xe000ed04

08007640 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800764e:	463a      	mov	r2, r7
 8007650:	1d39      	adds	r1, r7, #4
 8007652:	f107 0308 	add.w	r3, r7, #8
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe ff8e 	bl	8006578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	9202      	str	r2, [sp, #8]
 8007664:	9301      	str	r3, [sp, #4]
 8007666:	2300      	movs	r3, #0
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	460a      	mov	r2, r1
 800766e:	4921      	ldr	r1, [pc, #132]	; (80076f4 <vTaskStartScheduler+0xb4>)
 8007670:	4821      	ldr	r0, [pc, #132]	; (80076f8 <vTaskStartScheduler+0xb8>)
 8007672:	f7ff fe0f 	bl	8007294 <xTaskCreateStatic>
 8007676:	4603      	mov	r3, r0
 8007678:	4a20      	ldr	r2, [pc, #128]	; (80076fc <vTaskStartScheduler+0xbc>)
 800767a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800767c:	4b1f      	ldr	r3, [pc, #124]	; (80076fc <vTaskStartScheduler+0xbc>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007684:	2301      	movs	r3, #1
 8007686:	617b      	str	r3, [r7, #20]
 8007688:	e001      	b.n	800768e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d102      	bne.n	800769a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007694:	f000 fd0e 	bl	80080b4 <xTimerCreateTimerTask>
 8007698:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d116      	bne.n	80076ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	613b      	str	r3, [r7, #16]
}
 80076b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076b4:	4b12      	ldr	r3, [pc, #72]	; (8007700 <vTaskStartScheduler+0xc0>)
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076bc:	4b11      	ldr	r3, [pc, #68]	; (8007704 <vTaskStartScheduler+0xc4>)
 80076be:	2201      	movs	r2, #1
 80076c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <vTaskStartScheduler+0xc8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076c8:	f001 f8ca 	bl	8008860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076cc:	e00e      	b.n	80076ec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d4:	d10a      	bne.n	80076ec <vTaskStartScheduler+0xac>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	60fb      	str	r3, [r7, #12]
}
 80076e8:	bf00      	nop
 80076ea:	e7fe      	b.n	80076ea <vTaskStartScheduler+0xaa>
}
 80076ec:	bf00      	nop
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	080099a8 	.word	0x080099a8
 80076f8:	08007d49 	.word	0x08007d49
 80076fc:	20001034 	.word	0x20001034
 8007700:	20001030 	.word	0x20001030
 8007704:	2000101c 	.word	0x2000101c
 8007708:	20001014 	.word	0x20001014

0800770c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007710:	4b04      	ldr	r3, [pc, #16]	; (8007724 <vTaskSuspendAll+0x18>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3301      	adds	r3, #1
 8007716:	4a03      	ldr	r2, [pc, #12]	; (8007724 <vTaskSuspendAll+0x18>)
 8007718:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800771a:	bf00      	nop
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	20001038 	.word	0x20001038

08007728 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007732:	2300      	movs	r3, #0
 8007734:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007736:	4b42      	ldr	r3, [pc, #264]	; (8007840 <xTaskResumeAll+0x118>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10a      	bne.n	8007754 <xTaskResumeAll+0x2c>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	603b      	str	r3, [r7, #0]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007754:	f001 f926 	bl	80089a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007758:	4b39      	ldr	r3, [pc, #228]	; (8007840 <xTaskResumeAll+0x118>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3b01      	subs	r3, #1
 800775e:	4a38      	ldr	r2, [pc, #224]	; (8007840 <xTaskResumeAll+0x118>)
 8007760:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007762:	4b37      	ldr	r3, [pc, #220]	; (8007840 <xTaskResumeAll+0x118>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d162      	bne.n	8007830 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800776a:	4b36      	ldr	r3, [pc, #216]	; (8007844 <xTaskResumeAll+0x11c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d05e      	beq.n	8007830 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007772:	e02f      	b.n	80077d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007774:	4b34      	ldr	r3, [pc, #208]	; (8007848 <xTaskResumeAll+0x120>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3318      	adds	r3, #24
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe ffb7 	bl	80066f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe ffb2 	bl	80066f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4b2d      	ldr	r3, [pc, #180]	; (800784c <xTaskResumeAll+0x124>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	429a      	cmp	r2, r3
 800779a:	d903      	bls.n	80077a4 <xTaskResumeAll+0x7c>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	4a2a      	ldr	r2, [pc, #168]	; (800784c <xTaskResumeAll+0x124>)
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4a27      	ldr	r2, [pc, #156]	; (8007850 <xTaskResumeAll+0x128>)
 80077b2:	441a      	add	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3304      	adds	r3, #4
 80077b8:	4619      	mov	r1, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	f7fe ff3d 	bl	800663a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4b23      	ldr	r3, [pc, #140]	; (8007854 <xTaskResumeAll+0x12c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d302      	bcc.n	80077d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077ce:	4b22      	ldr	r3, [pc, #136]	; (8007858 <xTaskResumeAll+0x130>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077d4:	4b1c      	ldr	r3, [pc, #112]	; (8007848 <xTaskResumeAll+0x120>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1cb      	bne.n	8007774 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077e2:	f000 fb67 	bl	8007eb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80077e6:	4b1d      	ldr	r3, [pc, #116]	; (800785c <xTaskResumeAll+0x134>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d010      	beq.n	8007814 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077f2:	f000 f859 	bl	80078a8 <xTaskIncrementTick>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80077fc:	4b16      	ldr	r3, [pc, #88]	; (8007858 <xTaskResumeAll+0x130>)
 80077fe:	2201      	movs	r2, #1
 8007800:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3b01      	subs	r3, #1
 8007806:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f1      	bne.n	80077f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <xTaskResumeAll+0x134>)
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007814:	4b10      	ldr	r3, [pc, #64]	; (8007858 <xTaskResumeAll+0x130>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d009      	beq.n	8007830 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800781c:	2301      	movs	r3, #1
 800781e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <xTaskResumeAll+0x138>)
 8007822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007826:	601a      	str	r2, [r3, #0]
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007830:	f001 f8e8 	bl	8008a04 <vPortExitCritical>

	return xAlreadyYielded;
 8007834:	68bb      	ldr	r3, [r7, #8]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20001038 	.word	0x20001038
 8007844:	20001010 	.word	0x20001010
 8007848:	20000fd0 	.word	0x20000fd0
 800784c:	20001018 	.word	0x20001018
 8007850:	20000b40 	.word	0x20000b40
 8007854:	20000b3c 	.word	0x20000b3c
 8007858:	20001024 	.word	0x20001024
 800785c:	20001020 	.word	0x20001020
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <xTaskGetTickCount+0x1c>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007870:	687b      	ldr	r3, [r7, #4]
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20001014 	.word	0x20001014

08007884 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800788a:	f001 f96d 	bl	8008b68 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007892:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <xTaskGetTickCountFromISR+0x20>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007898:	683b      	ldr	r3, [r7, #0]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20001014 	.word	0x20001014

080078a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078ae:	2300      	movs	r3, #0
 80078b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078b2:	4b4f      	ldr	r3, [pc, #316]	; (80079f0 <xTaskIncrementTick+0x148>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 808f 	bne.w	80079da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078bc:	4b4d      	ldr	r3, [pc, #308]	; (80079f4 <xTaskIncrementTick+0x14c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078c4:	4a4b      	ldr	r2, [pc, #300]	; (80079f4 <xTaskIncrementTick+0x14c>)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d120      	bne.n	8007912 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078d0:	4b49      	ldr	r3, [pc, #292]	; (80079f8 <xTaskIncrementTick+0x150>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	603b      	str	r3, [r7, #0]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <xTaskIncrementTick+0x46>
 80078f0:	4b41      	ldr	r3, [pc, #260]	; (80079f8 <xTaskIncrementTick+0x150>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	4b41      	ldr	r3, [pc, #260]	; (80079fc <xTaskIncrementTick+0x154>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a3f      	ldr	r2, [pc, #252]	; (80079f8 <xTaskIncrementTick+0x150>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	4a3f      	ldr	r2, [pc, #252]	; (80079fc <xTaskIncrementTick+0x154>)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	4b3e      	ldr	r3, [pc, #248]	; (8007a00 <xTaskIncrementTick+0x158>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3301      	adds	r3, #1
 800790a:	4a3d      	ldr	r2, [pc, #244]	; (8007a00 <xTaskIncrementTick+0x158>)
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	f000 fad1 	bl	8007eb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007912:	4b3c      	ldr	r3, [pc, #240]	; (8007a04 <xTaskIncrementTick+0x15c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	429a      	cmp	r2, r3
 800791a:	d349      	bcc.n	80079b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800791c:	4b36      	ldr	r3, [pc, #216]	; (80079f8 <xTaskIncrementTick+0x150>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007926:	4b37      	ldr	r3, [pc, #220]	; (8007a04 <xTaskIncrementTick+0x15c>)
 8007928:	f04f 32ff 	mov.w	r2, #4294967295
 800792c:	601a      	str	r2, [r3, #0]
					break;
 800792e:	e03f      	b.n	80079b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007930:	4b31      	ldr	r3, [pc, #196]	; (80079f8 <xTaskIncrementTick+0x150>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007940:	693a      	ldr	r2, [r7, #16]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d203      	bcs.n	8007950 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007948:	4a2e      	ldr	r2, [pc, #184]	; (8007a04 <xTaskIncrementTick+0x15c>)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800794e:	e02f      	b.n	80079b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3304      	adds	r3, #4
 8007954:	4618      	mov	r0, r3
 8007956:	f7fe fecd 	bl	80066f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	2b00      	cmp	r3, #0
 8007960:	d004      	beq.n	800796c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3318      	adds	r3, #24
 8007966:	4618      	mov	r0, r3
 8007968:	f7fe fec4 	bl	80066f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	4b25      	ldr	r3, [pc, #148]	; (8007a08 <xTaskIncrementTick+0x160>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	429a      	cmp	r2, r3
 8007976:	d903      	bls.n	8007980 <xTaskIncrementTick+0xd8>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4a22      	ldr	r2, [pc, #136]	; (8007a08 <xTaskIncrementTick+0x160>)
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <xTaskIncrementTick+0x164>)
 800798e:	441a      	add	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3304      	adds	r3, #4
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f7fe fe4f 	bl	800663a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a0:	4b1b      	ldr	r3, [pc, #108]	; (8007a10 <xTaskIncrementTick+0x168>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d3b8      	bcc.n	800791c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079aa:	2301      	movs	r3, #1
 80079ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ae:	e7b5      	b.n	800791c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079b0:	4b17      	ldr	r3, [pc, #92]	; (8007a10 <xTaskIncrementTick+0x168>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	4915      	ldr	r1, [pc, #84]	; (8007a0c <xTaskIncrementTick+0x164>)
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d901      	bls.n	80079cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079c8:	2301      	movs	r3, #1
 80079ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <xTaskIncrementTick+0x16c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d007      	beq.n	80079e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079d4:	2301      	movs	r3, #1
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	e004      	b.n	80079e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <xTaskIncrementTick+0x170>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3301      	adds	r3, #1
 80079e0:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <xTaskIncrementTick+0x170>)
 80079e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079e4:	697b      	ldr	r3, [r7, #20]
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3718      	adds	r7, #24
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	20001038 	.word	0x20001038
 80079f4:	20001014 	.word	0x20001014
 80079f8:	20000fc8 	.word	0x20000fc8
 80079fc:	20000fcc 	.word	0x20000fcc
 8007a00:	20001028 	.word	0x20001028
 8007a04:	20001030 	.word	0x20001030
 8007a08:	20001018 	.word	0x20001018
 8007a0c:	20000b40 	.word	0x20000b40
 8007a10:	20000b3c 	.word	0x20000b3c
 8007a14:	20001024 	.word	0x20001024
 8007a18:	20001020 	.word	0x20001020

08007a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a22:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <vTaskSwitchContext+0xa8>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a2a:	4b27      	ldr	r3, [pc, #156]	; (8007ac8 <vTaskSwitchContext+0xac>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a30:	e041      	b.n	8007ab6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007a32:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <vTaskSwitchContext+0xac>)
 8007a34:	2200      	movs	r2, #0
 8007a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a38:	4b24      	ldr	r3, [pc, #144]	; (8007acc <vTaskSwitchContext+0xb0>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	e010      	b.n	8007a62 <vTaskSwitchContext+0x46>
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <vTaskSwitchContext+0x40>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	607b      	str	r3, [r7, #4]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <vTaskSwitchContext+0x3e>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	60fb      	str	r3, [r7, #12]
 8007a62:	491b      	ldr	r1, [pc, #108]	; (8007ad0 <vTaskSwitchContext+0xb4>)
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	440b      	add	r3, r1
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0e4      	beq.n	8007a40 <vTaskSwitchContext+0x24>
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4a13      	ldr	r2, [pc, #76]	; (8007ad0 <vTaskSwitchContext+0xb4>)
 8007a82:	4413      	add	r3, r2
 8007a84:	60bb      	str	r3, [r7, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	605a      	str	r2, [r3, #4]
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	3308      	adds	r3, #8
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d104      	bne.n	8007aa6 <vTaskSwitchContext+0x8a>
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	68db      	ldr	r3, [r3, #12]
 8007aac:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <vTaskSwitchContext+0xb8>)
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	4a06      	ldr	r2, [pc, #24]	; (8007acc <vTaskSwitchContext+0xb0>)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6013      	str	r3, [r2, #0]
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	20001038 	.word	0x20001038
 8007ac8:	20001024 	.word	0x20001024
 8007acc:	20001018 	.word	0x20001018
 8007ad0:	20000b40 	.word	0x20000b40
 8007ad4:	20000b3c 	.word	0x20000b3c

08007ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10a      	bne.n	8007afe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	60fb      	str	r3, [r7, #12]
}
 8007afa:	bf00      	nop
 8007afc:	e7fe      	b.n	8007afc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007afe:	4b07      	ldr	r3, [pc, #28]	; (8007b1c <vTaskPlaceOnEventList+0x44>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	3318      	adds	r3, #24
 8007b04:	4619      	mov	r1, r3
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fe fdbb 	bl	8006682 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	6838      	ldr	r0, [r7, #0]
 8007b10:	f000 fa7c 	bl	800800c <prvAddCurrentTaskToDelayedList>
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	20000b3c 	.word	0x20000b3c

08007b20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10a      	bne.n	8007b48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	617b      	str	r3, [r7, #20]
}
 8007b44:	bf00      	nop
 8007b46:	e7fe      	b.n	8007b46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b48:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <vTaskPlaceOnEventListRestricted+0x54>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3318      	adds	r3, #24
 8007b4e:	4619      	mov	r1, r3
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7fe fd72 	bl	800663a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b62:	6879      	ldr	r1, [r7, #4]
 8007b64:	68b8      	ldr	r0, [r7, #8]
 8007b66:	f000 fa51 	bl	800800c <prvAddCurrentTaskToDelayedList>
	}
 8007b6a:	bf00      	nop
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000b3c 	.word	0x20000b3c

08007b78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b086      	sub	sp, #24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10a      	bne.n	8007ba4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	60fb      	str	r3, [r7, #12]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	3318      	adds	r3, #24
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fda3 	bl	80066f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bae:	4b1e      	ldr	r3, [pc, #120]	; (8007c28 <xTaskRemoveFromEventList+0xb0>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d11d      	bne.n	8007bf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fe fd9a 	bl	80066f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4b19      	ldr	r3, [pc, #100]	; (8007c2c <xTaskRemoveFromEventList+0xb4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d903      	bls.n	8007bd4 <xTaskRemoveFromEventList+0x5c>
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	4a16      	ldr	r2, [pc, #88]	; (8007c2c <xTaskRemoveFromEventList+0xb4>)
 8007bd2:	6013      	str	r3, [r2, #0]
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	4a13      	ldr	r2, [pc, #76]	; (8007c30 <xTaskRemoveFromEventList+0xb8>)
 8007be2:	441a      	add	r2, r3
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7fe fd25 	bl	800663a <vListInsertEnd>
 8007bf0:	e005      	b.n	8007bfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	3318      	adds	r3, #24
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	480e      	ldr	r0, [pc, #56]	; (8007c34 <xTaskRemoveFromEventList+0xbc>)
 8007bfa:	f7fe fd1e 	bl	800663a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c02:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <xTaskRemoveFromEventList+0xc0>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d905      	bls.n	8007c18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <xTaskRemoveFromEventList+0xc4>)
 8007c12:	2201      	movs	r2, #1
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e001      	b.n	8007c1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c1c:	697b      	ldr	r3, [r7, #20]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20001038 	.word	0x20001038
 8007c2c:	20001018 	.word	0x20001018
 8007c30:	20000b40 	.word	0x20000b40
 8007c34:	20000fd0 	.word	0x20000fd0
 8007c38:	20000b3c 	.word	0x20000b3c
 8007c3c:	20001024 	.word	0x20001024

08007c40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c48:	4b06      	ldr	r3, [pc, #24]	; (8007c64 <vTaskInternalSetTimeOutState+0x24>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <vTaskInternalSetTimeOutState+0x28>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	605a      	str	r2, [r3, #4]
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	20001028 	.word	0x20001028
 8007c68:	20001014 	.word	0x20001014

08007c6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	613b      	str	r3, [r7, #16]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007cae:	f000 fe79 	bl	80089a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	; (8007d28 <xTaskCheckForTimeOut+0xbc>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cca:	d102      	bne.n	8007cd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61fb      	str	r3, [r7, #28]
 8007cd0:	e023      	b.n	8007d1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <xTaskCheckForTimeOut+0xc0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d007      	beq.n	8007cee <xTaskCheckForTimeOut+0x82>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d302      	bcc.n	8007cee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	e015      	b.n	8007d1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d20b      	bcs.n	8007d10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff ff9b 	bl	8007c40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	61fb      	str	r3, [r7, #28]
 8007d0e:	e004      	b.n	8007d1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2200      	movs	r2, #0
 8007d14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d16:	2301      	movs	r3, #1
 8007d18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d1a:	f000 fe73 	bl	8008a04 <vPortExitCritical>

	return xReturn;
 8007d1e:	69fb      	ldr	r3, [r7, #28]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3720      	adds	r7, #32
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20001014 	.word	0x20001014
 8007d2c:	20001028 	.word	0x20001028

08007d30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d34:	4b03      	ldr	r3, [pc, #12]	; (8007d44 <vTaskMissedYield+0x14>)
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20001024 	.word	0x20001024

08007d48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d50:	f000 f852 	bl	8007df8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <prvIdleTask+0x28>)
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d9f9      	bls.n	8007d50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <prvIdleTask+0x2c>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d6c:	e7f0      	b.n	8007d50 <prvIdleTask+0x8>
 8007d6e:	bf00      	nop
 8007d70:	20000b40 	.word	0x20000b40
 8007d74:	e000ed04 	.word	0xe000ed04

08007d78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d7e:	2300      	movs	r3, #0
 8007d80:	607b      	str	r3, [r7, #4]
 8007d82:	e00c      	b.n	8007d9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	4613      	mov	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4a12      	ldr	r2, [pc, #72]	; (8007dd8 <prvInitialiseTaskLists+0x60>)
 8007d90:	4413      	add	r3, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fc24 	bl	80065e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b37      	cmp	r3, #55	; 0x37
 8007da2:	d9ef      	bls.n	8007d84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007da4:	480d      	ldr	r0, [pc, #52]	; (8007ddc <prvInitialiseTaskLists+0x64>)
 8007da6:	f7fe fc1b 	bl	80065e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007daa:	480d      	ldr	r0, [pc, #52]	; (8007de0 <prvInitialiseTaskLists+0x68>)
 8007dac:	f7fe fc18 	bl	80065e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007db0:	480c      	ldr	r0, [pc, #48]	; (8007de4 <prvInitialiseTaskLists+0x6c>)
 8007db2:	f7fe fc15 	bl	80065e0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007db6:	480c      	ldr	r0, [pc, #48]	; (8007de8 <prvInitialiseTaskLists+0x70>)
 8007db8:	f7fe fc12 	bl	80065e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dbc:	480b      	ldr	r0, [pc, #44]	; (8007dec <prvInitialiseTaskLists+0x74>)
 8007dbe:	f7fe fc0f 	bl	80065e0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <prvInitialiseTaskLists+0x78>)
 8007dc4:	4a05      	ldr	r2, [pc, #20]	; (8007ddc <prvInitialiseTaskLists+0x64>)
 8007dc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007dc8:	4b0a      	ldr	r3, [pc, #40]	; (8007df4 <prvInitialiseTaskLists+0x7c>)
 8007dca:	4a05      	ldr	r2, [pc, #20]	; (8007de0 <prvInitialiseTaskLists+0x68>)
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20000b40 	.word	0x20000b40
 8007ddc:	20000fa0 	.word	0x20000fa0
 8007de0:	20000fb4 	.word	0x20000fb4
 8007de4:	20000fd0 	.word	0x20000fd0
 8007de8:	20000fe4 	.word	0x20000fe4
 8007dec:	20000ffc 	.word	0x20000ffc
 8007df0:	20000fc8 	.word	0x20000fc8
 8007df4:	20000fcc 	.word	0x20000fcc

08007df8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dfe:	e019      	b.n	8007e34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e00:	f000 fdd0 	bl	80089a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e04:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <prvCheckTasksWaitingTermination+0x50>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fe fc6f 	bl	80066f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <prvCheckTasksWaitingTermination+0x54>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	4a0b      	ldr	r2, [pc, #44]	; (8007e4c <prvCheckTasksWaitingTermination+0x54>)
 8007e1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e20:	4b0b      	ldr	r3, [pc, #44]	; (8007e50 <prvCheckTasksWaitingTermination+0x58>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	4a0a      	ldr	r2, [pc, #40]	; (8007e50 <prvCheckTasksWaitingTermination+0x58>)
 8007e28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e2a:	f000 fdeb 	bl	8008a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f810 	bl	8007e54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e34:	4b06      	ldr	r3, [pc, #24]	; (8007e50 <prvCheckTasksWaitingTermination+0x58>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e1      	bne.n	8007e00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e3c:	bf00      	nop
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000fe4 	.word	0x20000fe4
 8007e4c:	20001010 	.word	0x20001010
 8007e50:	20000ff8 	.word	0x20000ff8

08007e54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d108      	bne.n	8007e78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 ff88 	bl	8008d80 <vPortFree>
				vPortFree( pxTCB );
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 ff85 	bl	8008d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e76:	e018      	b.n	8007eaa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d103      	bne.n	8007e8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 ff7c 	bl	8008d80 <vPortFree>
	}
 8007e88:	e00f      	b.n	8007eaa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d00a      	beq.n	8007eaa <prvDeleteTCB+0x56>
	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	60fb      	str	r3, [r7, #12]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <prvDeleteTCB+0x54>
	}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
	...

08007eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <prvResetNextTaskUnblockTime+0x38>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d104      	bne.n	8007ece <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ecc:	e008      	b.n	8007ee0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ece:	4b07      	ldr	r3, [pc, #28]	; (8007eec <prvResetNextTaskUnblockTime+0x38>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	4a04      	ldr	r2, [pc, #16]	; (8007ef0 <prvResetNextTaskUnblockTime+0x3c>)
 8007ede:	6013      	str	r3, [r2, #0]
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20000fc8 	.word	0x20000fc8
 8007ef0:	20001030 	.word	0x20001030

08007ef4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007efa:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <xTaskGetSchedulerState+0x34>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d102      	bne.n	8007f08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f02:	2301      	movs	r3, #1
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	e008      	b.n	8007f1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f08:	4b08      	ldr	r3, [pc, #32]	; (8007f2c <xTaskGetSchedulerState+0x38>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f10:	2302      	movs	r3, #2
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	e001      	b.n	8007f1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f1a:	687b      	ldr	r3, [r7, #4]
	}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	2000101c 	.word	0x2000101c
 8007f2c:	20001038 	.word	0x20001038

08007f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d056      	beq.n	8007ff4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f46:	4b2e      	ldr	r3, [pc, #184]	; (8008000 <xTaskPriorityDisinherit+0xd0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d00a      	beq.n	8007f66 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	60fb      	str	r3, [r7, #12]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60bb      	str	r3, [r7, #8]
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f88:	1e5a      	subs	r2, r3, #1
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d02c      	beq.n	8007ff4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d128      	bne.n	8007ff4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe fba4 	bl	80066f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	; (8008004 <xTaskPriorityDisinherit+0xd4>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d903      	bls.n	8007fd4 <xTaskPriorityDisinherit+0xa4>
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	4a0c      	ldr	r2, [pc, #48]	; (8008004 <xTaskPriorityDisinherit+0xd4>)
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4a09      	ldr	r2, [pc, #36]	; (8008008 <xTaskPriorityDisinherit+0xd8>)
 8007fe2:	441a      	add	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	4619      	mov	r1, r3
 8007fea:	4610      	mov	r0, r2
 8007fec:	f7fe fb25 	bl	800663a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ff4:	697b      	ldr	r3, [r7, #20]
	}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	20000b3c 	.word	0x20000b3c
 8008004:	20001018 	.word	0x20001018
 8008008:	20000b40 	.word	0x20000b40

0800800c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008016:	4b21      	ldr	r3, [pc, #132]	; (800809c <prvAddCurrentTaskToDelayedList+0x90>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800801c:	4b20      	ldr	r3, [pc, #128]	; (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3304      	adds	r3, #4
 8008022:	4618      	mov	r0, r3
 8008024:	f7fe fb66 	bl	80066f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d10a      	bne.n	8008046 <prvAddCurrentTaskToDelayedList+0x3a>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008036:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3304      	adds	r3, #4
 800803c:	4619      	mov	r1, r3
 800803e:	4819      	ldr	r0, [pc, #100]	; (80080a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008040:	f7fe fafb 	bl	800663a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008044:	e026      	b.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800804e:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	429a      	cmp	r2, r3
 800805c:	d209      	bcs.n	8008072 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	4b0f      	ldr	r3, [pc, #60]	; (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f7fe fb09 	bl	8006682 <vListInsert>
}
 8008070:	e010      	b.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008072:	4b0e      	ldr	r3, [pc, #56]	; (80080ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3304      	adds	r3, #4
 800807c:	4619      	mov	r1, r3
 800807e:	4610      	mov	r0, r2
 8008080:	f7fe faff 	bl	8006682 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008084:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	429a      	cmp	r2, r3
 800808c:	d202      	bcs.n	8008094 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800808e:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	6013      	str	r3, [r2, #0]
}
 8008094:	bf00      	nop
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	20001014 	.word	0x20001014
 80080a0:	20000b3c 	.word	0x20000b3c
 80080a4:	20000ffc 	.word	0x20000ffc
 80080a8:	20000fcc 	.word	0x20000fcc
 80080ac:	20000fc8 	.word	0x20000fc8
 80080b0:	20001030 	.word	0x20001030

080080b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b08a      	sub	sp, #40	; 0x28
 80080b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80080ba:	2300      	movs	r3, #0
 80080bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80080be:	f000 fb07 	bl	80086d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80080c2:	4b1c      	ldr	r3, [pc, #112]	; (8008134 <xTimerCreateTimerTask+0x80>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d021      	beq.n	800810e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080d2:	1d3a      	adds	r2, r7, #4
 80080d4:	f107 0108 	add.w	r1, r7, #8
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fe fa65 	bl	80065ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80080e2:	6879      	ldr	r1, [r7, #4]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	9202      	str	r2, [sp, #8]
 80080ea:	9301      	str	r3, [sp, #4]
 80080ec:	2302      	movs	r3, #2
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	2300      	movs	r3, #0
 80080f2:	460a      	mov	r2, r1
 80080f4:	4910      	ldr	r1, [pc, #64]	; (8008138 <xTimerCreateTimerTask+0x84>)
 80080f6:	4811      	ldr	r0, [pc, #68]	; (800813c <xTimerCreateTimerTask+0x88>)
 80080f8:	f7ff f8cc 	bl	8007294 <xTaskCreateStatic>
 80080fc:	4603      	mov	r3, r0
 80080fe:	4a10      	ldr	r2, [pc, #64]	; (8008140 <xTimerCreateTimerTask+0x8c>)
 8008100:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008102:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <xTimerCreateTimerTask+0x8c>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800810a:	2301      	movs	r3, #1
 800810c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	613b      	str	r3, [r7, #16]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800812a:	697b      	ldr	r3, [r7, #20]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	2000106c 	.word	0x2000106c
 8008138:	080099b0 	.word	0x080099b0
 800813c:	08008279 	.word	0x08008279
 8008140:	20001070 	.word	0x20001070

08008144 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008152:	2300      	movs	r3, #0
 8008154:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <xTimerGenericCommand+0x2e>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	623b      	str	r3, [r7, #32]
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008172:	4b1a      	ldr	r3, [pc, #104]	; (80081dc <xTimerGenericCommand+0x98>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d02a      	beq.n	80081d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	2b05      	cmp	r3, #5
 800818a:	dc18      	bgt.n	80081be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800818c:	f7ff feb2 	bl	8007ef4 <xTaskGetSchedulerState>
 8008190:	4603      	mov	r3, r0
 8008192:	2b02      	cmp	r3, #2
 8008194:	d109      	bne.n	80081aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <xTimerGenericCommand+0x98>)
 8008198:	6818      	ldr	r0, [r3, #0]
 800819a:	f107 0110 	add.w	r1, r7, #16
 800819e:	2300      	movs	r3, #0
 80081a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081a2:	f7fe fc0f 	bl	80069c4 <xQueueGenericSend>
 80081a6:	6278      	str	r0, [r7, #36]	; 0x24
 80081a8:	e012      	b.n	80081d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80081aa:	4b0c      	ldr	r3, [pc, #48]	; (80081dc <xTimerGenericCommand+0x98>)
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	f107 0110 	add.w	r1, r7, #16
 80081b2:	2300      	movs	r3, #0
 80081b4:	2200      	movs	r2, #0
 80081b6:	f7fe fc05 	bl	80069c4 <xQueueGenericSend>
 80081ba:	6278      	str	r0, [r7, #36]	; 0x24
 80081bc:	e008      	b.n	80081d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80081be:	4b07      	ldr	r3, [pc, #28]	; (80081dc <xTimerGenericCommand+0x98>)
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f107 0110 	add.w	r1, r7, #16
 80081c6:	2300      	movs	r3, #0
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	f7fe fcf9 	bl	8006bc0 <xQueueGenericSendFromISR>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80081d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3728      	adds	r7, #40	; 0x28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	2000106c 	.word	0x2000106c

080081e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ea:	4b22      	ldr	r3, [pc, #136]	; (8008274 <prvProcessExpiredTimer+0x94>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7fe fa7b 	bl	80066f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d022      	beq.n	8008252 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	699a      	ldr	r2, [r3, #24]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	18d1      	adds	r1, r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	6978      	ldr	r0, [r7, #20]
 800821a:	f000 f8d1 	bl	80083c0 <prvInsertTimerInActiveList>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01f      	beq.n	8008264 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008224:	2300      	movs	r3, #0
 8008226:	9300      	str	r3, [sp, #0]
 8008228:	2300      	movs	r3, #0
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	2100      	movs	r1, #0
 800822e:	6978      	ldr	r0, [r7, #20]
 8008230:	f7ff ff88 	bl	8008144 <xTimerGenericCommand>
 8008234:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d113      	bne.n	8008264 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	60fb      	str	r3, [r7, #12]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008258:	f023 0301 	bic.w	r3, r3, #1
 800825c:	b2da      	uxtb	r2, r3
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	6a1b      	ldr	r3, [r3, #32]
 8008268:	6978      	ldr	r0, [r7, #20]
 800826a:	4798      	blx	r3
}
 800826c:	bf00      	nop
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20001064 	.word	0x20001064

08008278 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008280:	f107 0308 	add.w	r3, r7, #8
 8008284:	4618      	mov	r0, r3
 8008286:	f000 f857 	bl	8008338 <prvGetNextExpireTime>
 800828a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4619      	mov	r1, r3
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 f803 	bl	800829c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008296:	f000 f8d5 	bl	8008444 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800829a:	e7f1      	b.n	8008280 <prvTimerTask+0x8>

0800829c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80082a6:	f7ff fa31 	bl	800770c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80082aa:	f107 0308 	add.w	r3, r7, #8
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 f866 	bl	8008380 <prvSampleTimeNow>
 80082b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d130      	bne.n	800831e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10a      	bne.n	80082d8 <prvProcessTimerOrBlockTask+0x3c>
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d806      	bhi.n	80082d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80082ca:	f7ff fa2d 	bl	8007728 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff ff85 	bl	80081e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80082d6:	e024      	b.n	8008322 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d008      	beq.n	80082f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082de:	4b13      	ldr	r3, [pc, #76]	; (800832c <prvProcessTimerOrBlockTask+0x90>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <prvProcessTimerOrBlockTask+0x50>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e000      	b.n	80082ee <prvProcessTimerOrBlockTask+0x52>
 80082ec:	2300      	movs	r3, #0
 80082ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082f0:	4b0f      	ldr	r3, [pc, #60]	; (8008330 <prvProcessTimerOrBlockTask+0x94>)
 80082f2:	6818      	ldr	r0, [r3, #0]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	4619      	mov	r1, r3
 80082fe:	f7fe ff95 	bl	800722c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008302:	f7ff fa11 	bl	8007728 <xTaskResumeAll>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800830c:	4b09      	ldr	r3, [pc, #36]	; (8008334 <prvProcessTimerOrBlockTask+0x98>)
 800830e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	f3bf 8f4f 	dsb	sy
 8008318:	f3bf 8f6f 	isb	sy
}
 800831c:	e001      	b.n	8008322 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800831e:	f7ff fa03 	bl	8007728 <xTaskResumeAll>
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20001068 	.word	0x20001068
 8008330:	2000106c 	.word	0x2000106c
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008340:	4b0e      	ldr	r3, [pc, #56]	; (800837c <prvGetNextExpireTime+0x44>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <prvGetNextExpireTime+0x16>
 800834a:	2201      	movs	r2, #1
 800834c:	e000      	b.n	8008350 <prvGetNextExpireTime+0x18>
 800834e:	2200      	movs	r2, #0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d105      	bne.n	8008368 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800835c:	4b07      	ldr	r3, [pc, #28]	; (800837c <prvGetNextExpireTime+0x44>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	e001      	b.n	800836c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008368:	2300      	movs	r3, #0
 800836a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800836c:	68fb      	ldr	r3, [r7, #12]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20001064 	.word	0x20001064

08008380 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008388:	f7ff fa6c 	bl	8007864 <xTaskGetTickCount>
 800838c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800838e:	4b0b      	ldr	r3, [pc, #44]	; (80083bc <prvSampleTimeNow+0x3c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	429a      	cmp	r2, r3
 8008396:	d205      	bcs.n	80083a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008398:	f000 f936 	bl	8008608 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	e002      	b.n	80083aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80083aa:	4a04      	ldr	r2, [pc, #16]	; (80083bc <prvSampleTimeNow+0x3c>)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80083b0:	68fb      	ldr	r3, [r7, #12]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	20001074 	.word	0x20001074

080083c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d812      	bhi.n	800840c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d302      	bcc.n	80083fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]
 80083f8:	e01b      	b.n	8008432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083fa:	4b10      	ldr	r3, [pc, #64]	; (800843c <prvInsertTimerInActiveList+0x7c>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3304      	adds	r3, #4
 8008402:	4619      	mov	r1, r3
 8008404:	4610      	mov	r0, r2
 8008406:	f7fe f93c 	bl	8006682 <vListInsert>
 800840a:	e012      	b.n	8008432 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d206      	bcs.n	8008422 <prvInsertTimerInActiveList+0x62>
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	429a      	cmp	r2, r3
 800841a:	d302      	bcc.n	8008422 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800841c:	2301      	movs	r3, #1
 800841e:	617b      	str	r3, [r7, #20]
 8008420:	e007      	b.n	8008432 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008422:	4b07      	ldr	r3, [pc, #28]	; (8008440 <prvInsertTimerInActiveList+0x80>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	3304      	adds	r3, #4
 800842a:	4619      	mov	r1, r3
 800842c:	4610      	mov	r0, r2
 800842e:	f7fe f928 	bl	8006682 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008432:	697b      	ldr	r3, [r7, #20]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20001068 	.word	0x20001068
 8008440:	20001064 	.word	0x20001064

08008444 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08e      	sub	sp, #56	; 0x38
 8008448:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800844a:	e0ca      	b.n	80085e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b00      	cmp	r3, #0
 8008450:	da18      	bge.n	8008484 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008452:	1d3b      	adds	r3, r7, #4
 8008454:	3304      	adds	r3, #4
 8008456:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	61fb      	str	r3, [r7, #28]
}
 8008470:	bf00      	nop
 8008472:	e7fe      	b.n	8008472 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800847a:	6850      	ldr	r0, [r2, #4]
 800847c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800847e:	6892      	ldr	r2, [r2, #8]
 8008480:	4611      	mov	r1, r2
 8008482:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	f2c0 80aa 	blt.w	80085e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d004      	beq.n	80084a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	3304      	adds	r3, #4
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe f929 	bl	80066f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084a2:	463b      	mov	r3, r7
 80084a4:	4618      	mov	r0, r3
 80084a6:	f7ff ff6b 	bl	8008380 <prvSampleTimeNow>
 80084aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2b09      	cmp	r3, #9
 80084b0:	f200 8097 	bhi.w	80085e2 <prvProcessReceivedCommands+0x19e>
 80084b4:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <prvProcessReceivedCommands+0x78>)
 80084b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ba:	bf00      	nop
 80084bc:	080084e5 	.word	0x080084e5
 80084c0:	080084e5 	.word	0x080084e5
 80084c4:	080084e5 	.word	0x080084e5
 80084c8:	08008559 	.word	0x08008559
 80084cc:	0800856d 	.word	0x0800856d
 80084d0:	080085b7 	.word	0x080085b7
 80084d4:	080084e5 	.word	0x080084e5
 80084d8:	080084e5 	.word	0x080084e5
 80084dc:	08008559 	.word	0x08008559
 80084e0:	0800856d 	.word	0x0800856d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084ea:	f043 0301 	orr.w	r3, r3, #1
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fa:	699b      	ldr	r3, [r3, #24]
 80084fc:	18d1      	adds	r1, r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008504:	f7ff ff5c 	bl	80083c0 <prvInsertTimerInActiveList>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d069      	beq.n	80085e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008514:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800851c:	f003 0304 	and.w	r3, r3, #4
 8008520:	2b00      	cmp	r3, #0
 8008522:	d05e      	beq.n	80085e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	441a      	add	r2, r3
 800852c:	2300      	movs	r3, #0
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	2300      	movs	r3, #0
 8008532:	2100      	movs	r1, #0
 8008534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008536:	f7ff fe05 	bl	8008144 <xTimerGenericCommand>
 800853a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d14f      	bne.n	80085e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	61bb      	str	r3, [r7, #24]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800855e:	f023 0301 	bic.w	r3, r3, #1
 8008562:	b2da      	uxtb	r2, r3
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800856a:	e03a      	b.n	80085e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800856c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008572:	f043 0301 	orr.w	r3, r3, #1
 8008576:	b2da      	uxtb	r2, r3
 8008578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008586:	699b      	ldr	r3, [r3, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	617b      	str	r3, [r7, #20]
}
 800859e:	bf00      	nop
 80085a0:	e7fe      	b.n	80085a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	18d1      	adds	r1, r2, r3
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085b0:	f7ff ff06 	bl	80083c0 <prvInsertTimerInActiveList>
					break;
 80085b4:	e015      	b.n	80085e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d103      	bne.n	80085cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80085c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c6:	f000 fbdb 	bl	8008d80 <vPortFree>
 80085ca:	e00a      	b.n	80085e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085d2:	f023 0301 	bic.w	r3, r3, #1
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80085de:	e000      	b.n	80085e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80085e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085e2:	4b08      	ldr	r3, [pc, #32]	; (8008604 <prvProcessReceivedCommands+0x1c0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	1d39      	adds	r1, r7, #4
 80085e8:	2200      	movs	r2, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fb84 	bl	8006cf8 <xQueueReceive>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	f47f af2a 	bne.w	800844c <prvProcessReceivedCommands+0x8>
	}
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	3730      	adds	r7, #48	; 0x30
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	2000106c 	.word	0x2000106c

08008608 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b088      	sub	sp, #32
 800860c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800860e:	e048      	b.n	80086a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008610:	4b2d      	ldr	r3, [pc, #180]	; (80086c8 <prvSwitchTimerLists+0xc0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800861a:	4b2b      	ldr	r3, [pc, #172]	; (80086c8 <prvSwitchTimerLists+0xc0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3304      	adds	r3, #4
 8008628:	4618      	mov	r0, r3
 800862a:	f7fe f863 	bl	80066f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d02e      	beq.n	80086a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	699b      	ldr	r3, [r3, #24]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	4413      	add	r3, r2
 800864c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	429a      	cmp	r2, r3
 8008654:	d90e      	bls.n	8008674 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	68ba      	ldr	r2, [r7, #8]
 800865a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008662:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <prvSwitchTimerLists+0xc0>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3304      	adds	r3, #4
 800866a:	4619      	mov	r1, r3
 800866c:	4610      	mov	r0, r2
 800866e:	f7fe f808 	bl	8006682 <vListInsert>
 8008672:	e016      	b.n	80086a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008674:	2300      	movs	r3, #0
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2300      	movs	r3, #0
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	2100      	movs	r1, #0
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f7ff fd60 	bl	8008144 <xTimerGenericCommand>
 8008684:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	603b      	str	r3, [r7, #0]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <prvSwitchTimerLists+0xc0>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1b1      	bne.n	8008610 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <prvSwitchTimerLists+0xc0>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80086b2:	4b06      	ldr	r3, [pc, #24]	; (80086cc <prvSwitchTimerLists+0xc4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a04      	ldr	r2, [pc, #16]	; (80086c8 <prvSwitchTimerLists+0xc0>)
 80086b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80086ba:	4a04      	ldr	r2, [pc, #16]	; (80086cc <prvSwitchTimerLists+0xc4>)
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	6013      	str	r3, [r2, #0]
}
 80086c0:	bf00      	nop
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20001064 	.word	0x20001064
 80086cc:	20001068 	.word	0x20001068

080086d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80086d6:	f000 f965 	bl	80089a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80086da:	4b15      	ldr	r3, [pc, #84]	; (8008730 <prvCheckForValidListAndQueue+0x60>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d120      	bne.n	8008724 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80086e2:	4814      	ldr	r0, [pc, #80]	; (8008734 <prvCheckForValidListAndQueue+0x64>)
 80086e4:	f7fd ff7c 	bl	80065e0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80086e8:	4813      	ldr	r0, [pc, #76]	; (8008738 <prvCheckForValidListAndQueue+0x68>)
 80086ea:	f7fd ff79 	bl	80065e0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <prvCheckForValidListAndQueue+0x6c>)
 80086f0:	4a10      	ldr	r2, [pc, #64]	; (8008734 <prvCheckForValidListAndQueue+0x64>)
 80086f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80086f4:	4b12      	ldr	r3, [pc, #72]	; (8008740 <prvCheckForValidListAndQueue+0x70>)
 80086f6:	4a10      	ldr	r2, [pc, #64]	; (8008738 <prvCheckForValidListAndQueue+0x68>)
 80086f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086fa:	2300      	movs	r3, #0
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <prvCheckForValidListAndQueue+0x74>)
 8008700:	4a11      	ldr	r2, [pc, #68]	; (8008748 <prvCheckForValidListAndQueue+0x78>)
 8008702:	2110      	movs	r1, #16
 8008704:	200a      	movs	r0, #10
 8008706:	f7fe f887 	bl	8006818 <xQueueGenericCreateStatic>
 800870a:	4603      	mov	r3, r0
 800870c:	4a08      	ldr	r2, [pc, #32]	; (8008730 <prvCheckForValidListAndQueue+0x60>)
 800870e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <prvCheckForValidListAndQueue+0x60>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d005      	beq.n	8008724 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <prvCheckForValidListAndQueue+0x60>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	490b      	ldr	r1, [pc, #44]	; (800874c <prvCheckForValidListAndQueue+0x7c>)
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fd5a 	bl	80071d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008724:	f000 f96e 	bl	8008a04 <vPortExitCritical>
}
 8008728:	bf00      	nop
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	2000106c 	.word	0x2000106c
 8008734:	2000103c 	.word	0x2000103c
 8008738:	20001050 	.word	0x20001050
 800873c:	20001064 	.word	0x20001064
 8008740:	20001068 	.word	0x20001068
 8008744:	20001118 	.word	0x20001118
 8008748:	20001078 	.word	0x20001078
 800874c:	080099b8 	.word	0x080099b8

08008750 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	3b04      	subs	r3, #4
 8008760:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008768:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3b04      	subs	r3, #4
 800876e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f023 0201 	bic.w	r2, r3, #1
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3b04      	subs	r3, #4
 800877e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008780:	4a0c      	ldr	r2, [pc, #48]	; (80087b4 <pxPortInitialiseStack+0x64>)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	3b14      	subs	r3, #20
 800878a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	3b04      	subs	r3, #4
 8008796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f06f 0202 	mvn.w	r2, #2
 800879e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3b20      	subs	r3, #32
 80087a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80087a6:	68fb      	ldr	r3, [r7, #12]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	080087b9 	.word	0x080087b9

080087b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80087be:	2300      	movs	r3, #0
 80087c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80087c2:	4b12      	ldr	r3, [pc, #72]	; (800880c <prvTaskExitError+0x54>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ca:	d00a      	beq.n	80087e2 <prvTaskExitError+0x2a>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	f383 8811 	msr	BASEPRI, r3
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	60fb      	str	r3, [r7, #12]
}
 80087de:	bf00      	nop
 80087e0:	e7fe      	b.n	80087e0 <prvTaskExitError+0x28>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	60bb      	str	r3, [r7, #8]
}
 80087f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087f6:	bf00      	nop
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0fc      	beq.n	80087f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087fe:	bf00      	nop
 8008800:	bf00      	nop
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	2000005c 	.word	0x2000005c

08008810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008810:	4b07      	ldr	r3, [pc, #28]	; (8008830 <pxCurrentTCBConst2>)
 8008812:	6819      	ldr	r1, [r3, #0]
 8008814:	6808      	ldr	r0, [r1, #0]
 8008816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800881a:	f380 8809 	msr	PSP, r0
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f04f 0000 	mov.w	r0, #0
 8008826:	f380 8811 	msr	BASEPRI, r0
 800882a:	4770      	bx	lr
 800882c:	f3af 8000 	nop.w

08008830 <pxCurrentTCBConst2>:
 8008830:	20000b3c 	.word	0x20000b3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008834:	bf00      	nop
 8008836:	bf00      	nop

08008838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008838:	4808      	ldr	r0, [pc, #32]	; (800885c <prvPortStartFirstTask+0x24>)
 800883a:	6800      	ldr	r0, [r0, #0]
 800883c:	6800      	ldr	r0, [r0, #0]
 800883e:	f380 8808 	msr	MSP, r0
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f380 8814 	msr	CONTROL, r0
 800884a:	b662      	cpsie	i
 800884c:	b661      	cpsie	f
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	f3bf 8f6f 	isb	sy
 8008856:	df00      	svc	0
 8008858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800885a:	bf00      	nop
 800885c:	e000ed08 	.word	0xe000ed08

08008860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008866:	4b46      	ldr	r3, [pc, #280]	; (8008980 <xPortStartScheduler+0x120>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a46      	ldr	r2, [pc, #280]	; (8008984 <xPortStartScheduler+0x124>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d10a      	bne.n	8008886 <xPortStartScheduler+0x26>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	613b      	str	r3, [r7, #16]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008886:	4b3e      	ldr	r3, [pc, #248]	; (8008980 <xPortStartScheduler+0x120>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a3f      	ldr	r2, [pc, #252]	; (8008988 <xPortStartScheduler+0x128>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d10a      	bne.n	80088a6 <xPortStartScheduler+0x46>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	60fb      	str	r3, [r7, #12]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088a6:	4b39      	ldr	r3, [pc, #228]	; (800898c <xPortStartScheduler+0x12c>)
 80088a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	22ff      	movs	r2, #255	; 0xff
 80088b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088c0:	78fb      	ldrb	r3, [r7, #3]
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	4b31      	ldr	r3, [pc, #196]	; (8008990 <xPortStartScheduler+0x130>)
 80088cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088ce:	4b31      	ldr	r3, [pc, #196]	; (8008994 <xPortStartScheduler+0x134>)
 80088d0:	2207      	movs	r2, #7
 80088d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088d4:	e009      	b.n	80088ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80088d6:	4b2f      	ldr	r3, [pc, #188]	; (8008994 <xPortStartScheduler+0x134>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3b01      	subs	r3, #1
 80088dc:	4a2d      	ldr	r2, [pc, #180]	; (8008994 <xPortStartScheduler+0x134>)
 80088de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	005b      	lsls	r3, r3, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f2:	2b80      	cmp	r3, #128	; 0x80
 80088f4:	d0ef      	beq.n	80088d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088f6:	4b27      	ldr	r3, [pc, #156]	; (8008994 <xPortStartScheduler+0x134>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1c3 0307 	rsb	r3, r3, #7
 80088fe:	2b04      	cmp	r3, #4
 8008900:	d00a      	beq.n	8008918 <xPortStartScheduler+0xb8>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	60bb      	str	r3, [r7, #8]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008918:	4b1e      	ldr	r3, [pc, #120]	; (8008994 <xPortStartScheduler+0x134>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <xPortStartScheduler+0x134>)
 8008920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008922:	4b1c      	ldr	r3, [pc, #112]	; (8008994 <xPortStartScheduler+0x134>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800892a:	4a1a      	ldr	r2, [pc, #104]	; (8008994 <xPortStartScheduler+0x134>)
 800892c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	b2da      	uxtb	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008936:	4b18      	ldr	r3, [pc, #96]	; (8008998 <xPortStartScheduler+0x138>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a17      	ldr	r2, [pc, #92]	; (8008998 <xPortStartScheduler+0x138>)
 800893c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008942:	4b15      	ldr	r3, [pc, #84]	; (8008998 <xPortStartScheduler+0x138>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a14      	ldr	r2, [pc, #80]	; (8008998 <xPortStartScheduler+0x138>)
 8008948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800894c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800894e:	f000 f8dd 	bl	8008b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008952:	4b12      	ldr	r3, [pc, #72]	; (800899c <xPortStartScheduler+0x13c>)
 8008954:	2200      	movs	r2, #0
 8008956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008958:	f000 f8fc 	bl	8008b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800895c:	4b10      	ldr	r3, [pc, #64]	; (80089a0 <xPortStartScheduler+0x140>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a0f      	ldr	r2, [pc, #60]	; (80089a0 <xPortStartScheduler+0x140>)
 8008962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008968:	f7ff ff66 	bl	8008838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800896c:	f7ff f856 	bl	8007a1c <vTaskSwitchContext>
	prvTaskExitError();
 8008970:	f7ff ff22 	bl	80087b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	e000ed00 	.word	0xe000ed00
 8008984:	410fc271 	.word	0x410fc271
 8008988:	410fc270 	.word	0x410fc270
 800898c:	e000e400 	.word	0xe000e400
 8008990:	20001168 	.word	0x20001168
 8008994:	2000116c 	.word	0x2000116c
 8008998:	e000ed20 	.word	0xe000ed20
 800899c:	2000005c 	.word	0x2000005c
 80089a0:	e000ef34 	.word	0xe000ef34

080089a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
	__asm volatile
 80089aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ae:	f383 8811 	msr	BASEPRI, r3
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	f3bf 8f4f 	dsb	sy
 80089ba:	607b      	str	r3, [r7, #4]
}
 80089bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089be:	4b0f      	ldr	r3, [pc, #60]	; (80089fc <vPortEnterCritical+0x58>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3301      	adds	r3, #1
 80089c4:	4a0d      	ldr	r2, [pc, #52]	; (80089fc <vPortEnterCritical+0x58>)
 80089c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089c8:	4b0c      	ldr	r3, [pc, #48]	; (80089fc <vPortEnterCritical+0x58>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d10f      	bne.n	80089f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089d0:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <vPortEnterCritical+0x5c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80089da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089de:	f383 8811 	msr	BASEPRI, r3
 80089e2:	f3bf 8f6f 	isb	sy
 80089e6:	f3bf 8f4f 	dsb	sy
 80089ea:	603b      	str	r3, [r7, #0]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <vPortEnterCritical+0x4a>
	}
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	2000005c 	.word	0x2000005c
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a0a:	4b12      	ldr	r3, [pc, #72]	; (8008a54 <vPortExitCritical+0x50>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10a      	bne.n	8008a28 <vPortExitCritical+0x24>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	607b      	str	r3, [r7, #4]
}
 8008a24:	bf00      	nop
 8008a26:	e7fe      	b.n	8008a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a28:	4b0a      	ldr	r3, [pc, #40]	; (8008a54 <vPortExitCritical+0x50>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	4a09      	ldr	r2, [pc, #36]	; (8008a54 <vPortExitCritical+0x50>)
 8008a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a32:	4b08      	ldr	r3, [pc, #32]	; (8008a54 <vPortExitCritical+0x50>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d105      	bne.n	8008a46 <vPortExitCritical+0x42>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	f383 8811 	msr	BASEPRI, r3
}
 8008a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	2000005c 	.word	0x2000005c
	...

08008a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a60:	f3ef 8009 	mrs	r0, PSP
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <pxCurrentTCBConst>)
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	f01e 0f10 	tst.w	lr, #16
 8008a70:	bf08      	it	eq
 8008a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7a:	6010      	str	r0, [r2, #0]
 8008a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a84:	f380 8811 	msr	BASEPRI, r0
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f7fe ffc4 	bl	8007a1c <vTaskSwitchContext>
 8008a94:	f04f 0000 	mov.w	r0, #0
 8008a98:	f380 8811 	msr	BASEPRI, r0
 8008a9c:	bc09      	pop	{r0, r3}
 8008a9e:	6819      	ldr	r1, [r3, #0]
 8008aa0:	6808      	ldr	r0, [r1, #0]
 8008aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa6:	f01e 0f10 	tst.w	lr, #16
 8008aaa:	bf08      	it	eq
 8008aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ab0:	f380 8809 	msr	PSP, r0
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	f3af 8000 	nop.w

08008ac0 <pxCurrentTCBConst>:
 8008ac0:	20000b3c 	.word	0x20000b3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ac4:	bf00      	nop
 8008ac6:	bf00      	nop

08008ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	607b      	str	r3, [r7, #4]
}
 8008ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ae2:	f7fe fee1 	bl	80078a8 <xTaskIncrementTick>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <xPortSysTickHandler+0x40>)
 8008aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af2:	601a      	str	r2, [r3, #0]
 8008af4:	2300      	movs	r3, #0
 8008af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	f383 8811 	msr	BASEPRI, r3
}
 8008afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b10:	4b0b      	ldr	r3, [pc, #44]	; (8008b40 <vPortSetupTimerInterrupt+0x34>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b16:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <vPortSetupTimerInterrupt+0x38>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <vPortSetupTimerInterrupt+0x3c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a0a      	ldr	r2, [pc, #40]	; (8008b4c <vPortSetupTimerInterrupt+0x40>)
 8008b22:	fba2 2303 	umull	r2, r3, r2, r3
 8008b26:	099b      	lsrs	r3, r3, #6
 8008b28:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <vPortSetupTimerInterrupt+0x44>)
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b2e:	4b04      	ldr	r3, [pc, #16]	; (8008b40 <vPortSetupTimerInterrupt+0x34>)
 8008b30:	2207      	movs	r2, #7
 8008b32:	601a      	str	r2, [r3, #0]
}
 8008b34:	bf00      	nop
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	e000e010 	.word	0xe000e010
 8008b44:	e000e018 	.word	0xe000e018
 8008b48:	20000050 	.word	0x20000050
 8008b4c:	10624dd3 	.word	0x10624dd3
 8008b50:	e000e014 	.word	0xe000e014

08008b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b64 <vPortEnableVFP+0x10>
 8008b58:	6801      	ldr	r1, [r0, #0]
 8008b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b5e:	6001      	str	r1, [r0, #0]
 8008b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b62:	bf00      	nop
 8008b64:	e000ed88 	.word	0xe000ed88

08008b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b6e:	f3ef 8305 	mrs	r3, IPSR
 8008b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b0f      	cmp	r3, #15
 8008b78:	d914      	bls.n	8008ba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b7a:	4a17      	ldr	r2, [pc, #92]	; (8008bd8 <vPortValidateInterruptPriority+0x70>)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	4413      	add	r3, r2
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b84:	4b15      	ldr	r3, [pc, #84]	; (8008bdc <vPortValidateInterruptPriority+0x74>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	7afa      	ldrb	r2, [r7, #11]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d20a      	bcs.n	8008ba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
}
 8008ba0:	bf00      	nop
 8008ba2:	e7fe      	b.n	8008ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ba4:	4b0e      	ldr	r3, [pc, #56]	; (8008be0 <vPortValidateInterruptPriority+0x78>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008bac:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <vPortValidateInterruptPriority+0x7c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d90a      	bls.n	8008bca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	603b      	str	r3, [r7, #0]
}
 8008bc6:	bf00      	nop
 8008bc8:	e7fe      	b.n	8008bc8 <vPortValidateInterruptPriority+0x60>
	}
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	e000e3f0 	.word	0xe000e3f0
 8008bdc:	20001168 	.word	0x20001168
 8008be0:	e000ed0c 	.word	0xe000ed0c
 8008be4:	2000116c 	.word	0x2000116c

08008be8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08a      	sub	sp, #40	; 0x28
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bf4:	f7fe fd8a 	bl	800770c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bf8:	4b5b      	ldr	r3, [pc, #364]	; (8008d68 <pvPortMalloc+0x180>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c00:	f000 f920 	bl	8008e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c04:	4b59      	ldr	r3, [pc, #356]	; (8008d6c <pvPortMalloc+0x184>)
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f040 8093 	bne.w	8008d38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d01d      	beq.n	8008c54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008c18:	2208      	movs	r2, #8
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f003 0307 	and.w	r3, r3, #7
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d014      	beq.n	8008c54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f023 0307 	bic.w	r3, r3, #7
 8008c30:	3308      	adds	r3, #8
 8008c32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <pvPortMalloc+0x6c>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	617b      	str	r3, [r7, #20]
}
 8008c50:	bf00      	nop
 8008c52:	e7fe      	b.n	8008c52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d06e      	beq.n	8008d38 <pvPortMalloc+0x150>
 8008c5a:	4b45      	ldr	r3, [pc, #276]	; (8008d70 <pvPortMalloc+0x188>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d869      	bhi.n	8008d38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c64:	4b43      	ldr	r3, [pc, #268]	; (8008d74 <pvPortMalloc+0x18c>)
 8008c66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c68:	4b42      	ldr	r3, [pc, #264]	; (8008d74 <pvPortMalloc+0x18c>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c6e:	e004      	b.n	8008c7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d903      	bls.n	8008c8c <pvPortMalloc+0xa4>
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1f1      	bne.n	8008c70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c8c:	4b36      	ldr	r3, [pc, #216]	; (8008d68 <pvPortMalloc+0x180>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d050      	beq.n	8008d38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c96:	6a3b      	ldr	r3, [r7, #32]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	4413      	add	r3, r2
 8008c9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	6a3b      	ldr	r3, [r7, #32]
 8008ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	1ad2      	subs	r2, r2, r3
 8008cb0:	2308      	movs	r3, #8
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d91f      	bls.n	8008cf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <pvPortMalloc+0xf8>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	613b      	str	r3, [r7, #16]
}
 8008cdc:	bf00      	nop
 8008cde:	e7fe      	b.n	8008cde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	1ad2      	subs	r2, r2, r3
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cf2:	69b8      	ldr	r0, [r7, #24]
 8008cf4:	f000 f908 	bl	8008f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cf8:	4b1d      	ldr	r3, [pc, #116]	; (8008d70 <pvPortMalloc+0x188>)
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	4a1b      	ldr	r2, [pc, #108]	; (8008d70 <pvPortMalloc+0x188>)
 8008d04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d06:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <pvPortMalloc+0x188>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b1b      	ldr	r3, [pc, #108]	; (8008d78 <pvPortMalloc+0x190>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d203      	bcs.n	8008d1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d12:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <pvPortMalloc+0x188>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a18      	ldr	r2, [pc, #96]	; (8008d78 <pvPortMalloc+0x190>)
 8008d18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <pvPortMalloc+0x184>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	431a      	orrs	r2, r3
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d2e:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <pvPortMalloc+0x194>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3301      	adds	r3, #1
 8008d34:	4a11      	ldr	r2, [pc, #68]	; (8008d7c <pvPortMalloc+0x194>)
 8008d36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d38:	f7fe fcf6 	bl	8007728 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <pvPortMalloc+0x174>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60fb      	str	r3, [r7, #12]
}
 8008d58:	bf00      	nop
 8008d5a:	e7fe      	b.n	8008d5a <pvPortMalloc+0x172>
	return pvReturn;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3728      	adds	r7, #40	; 0x28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20004d78 	.word	0x20004d78
 8008d6c:	20004d8c 	.word	0x20004d8c
 8008d70:	20004d7c 	.word	0x20004d7c
 8008d74:	20004d70 	.word	0x20004d70
 8008d78:	20004d80 	.word	0x20004d80
 8008d7c:	20004d84 	.word	0x20004d84

08008d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d04d      	beq.n	8008e2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d92:	2308      	movs	r3, #8
 8008d94:	425b      	negs	r3, r3
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4413      	add	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	4b24      	ldr	r3, [pc, #144]	; (8008e38 <vPortFree+0xb8>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4013      	ands	r3, r2
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <vPortFree+0x44>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	60fb      	str	r3, [r7, #12]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d00a      	beq.n	8008de2 <vPortFree+0x62>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	60bb      	str	r3, [r7, #8]
}
 8008dde:	bf00      	nop
 8008de0:	e7fe      	b.n	8008de0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	4b14      	ldr	r3, [pc, #80]	; (8008e38 <vPortFree+0xb8>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4013      	ands	r3, r2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01e      	beq.n	8008e2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11a      	bne.n	8008e2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	; (8008e38 <vPortFree+0xb8>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	43db      	mvns	r3, r3
 8008e02:	401a      	ands	r2, r3
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e08:	f7fe fc80 	bl	800770c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <vPortFree+0xbc>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4413      	add	r3, r2
 8008e16:	4a09      	ldr	r2, [pc, #36]	; (8008e3c <vPortFree+0xbc>)
 8008e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e1a:	6938      	ldr	r0, [r7, #16]
 8008e1c:	f000 f874 	bl	8008f08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e20:	4b07      	ldr	r3, [pc, #28]	; (8008e40 <vPortFree+0xc0>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3301      	adds	r3, #1
 8008e26:	4a06      	ldr	r2, [pc, #24]	; (8008e40 <vPortFree+0xc0>)
 8008e28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e2a:	f7fe fc7d 	bl	8007728 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e2e:	bf00      	nop
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20004d8c 	.word	0x20004d8c
 8008e3c:	20004d7c 	.word	0x20004d7c
 8008e40:	20004d88 	.word	0x20004d88

08008e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e50:	4b27      	ldr	r3, [pc, #156]	; (8008ef0 <prvHeapInit+0xac>)
 8008e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3307      	adds	r3, #7
 8008e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	4a1f      	ldr	r2, [pc, #124]	; (8008ef0 <prvHeapInit+0xac>)
 8008e74:	4413      	add	r3, r2
 8008e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e7c:	4a1d      	ldr	r2, [pc, #116]	; (8008ef4 <prvHeapInit+0xb0>)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e82:	4b1c      	ldr	r3, [pc, #112]	; (8008ef4 <prvHeapInit+0xb0>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e90:	2208      	movs	r2, #8
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0307 	bic.w	r3, r3, #7
 8008e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <prvHeapInit+0xb4>)
 8008ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ea6:	4b14      	ldr	r3, [pc, #80]	; (8008ef8 <prvHeapInit+0xb4>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008eae:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <prvHeapInit+0xb4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ec4:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <prvHeapInit+0xb4>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <prvHeapInit+0xb8>)
 8008ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4a09      	ldr	r2, [pc, #36]	; (8008f00 <prvHeapInit+0xbc>)
 8008eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008edc:	4b09      	ldr	r3, [pc, #36]	; (8008f04 <prvHeapInit+0xc0>)
 8008ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008ee2:	601a      	str	r2, [r3, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	20001170 	.word	0x20001170
 8008ef4:	20004d70 	.word	0x20004d70
 8008ef8:	20004d78 	.word	0x20004d78
 8008efc:	20004d80 	.word	0x20004d80
 8008f00:	20004d7c 	.word	0x20004d7c
 8008f04:	20004d8c 	.word	0x20004d8c

08008f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f10:	4b28      	ldr	r3, [pc, #160]	; (8008fb4 <prvInsertBlockIntoFreeList+0xac>)
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	e002      	b.n	8008f1c <prvInsertBlockIntoFreeList+0x14>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d8f7      	bhi.n	8008f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	4413      	add	r3, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d108      	bne.n	8008f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	441a      	add	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	441a      	add	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d118      	bne.n	8008f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4b15      	ldr	r3, [pc, #84]	; (8008fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d00d      	beq.n	8008f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	441a      	add	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e008      	b.n	8008f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f86:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	e003      	b.n	8008f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d002      	beq.n	8008fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	20004d70 	.word	0x20004d70
 8008fb8:	20004d78 	.word	0x20004d78

08008fbc <__errno>:
 8008fbc:	4b01      	ldr	r3, [pc, #4]	; (8008fc4 <__errno+0x8>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	4770      	bx	lr
 8008fc2:	bf00      	nop
 8008fc4:	20000060 	.word	0x20000060

08008fc8 <__libc_init_array>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	4d0d      	ldr	r5, [pc, #52]	; (8009000 <__libc_init_array+0x38>)
 8008fcc:	4c0d      	ldr	r4, [pc, #52]	; (8009004 <__libc_init_array+0x3c>)
 8008fce:	1b64      	subs	r4, r4, r5
 8008fd0:	10a4      	asrs	r4, r4, #2
 8008fd2:	2600      	movs	r6, #0
 8008fd4:	42a6      	cmp	r6, r4
 8008fd6:	d109      	bne.n	8008fec <__libc_init_array+0x24>
 8008fd8:	4d0b      	ldr	r5, [pc, #44]	; (8009008 <__libc_init_array+0x40>)
 8008fda:	4c0c      	ldr	r4, [pc, #48]	; (800900c <__libc_init_array+0x44>)
 8008fdc:	f000 fc8e 	bl	80098fc <_init>
 8008fe0:	1b64      	subs	r4, r4, r5
 8008fe2:	10a4      	asrs	r4, r4, #2
 8008fe4:	2600      	movs	r6, #0
 8008fe6:	42a6      	cmp	r6, r4
 8008fe8:	d105      	bne.n	8008ff6 <__libc_init_array+0x2e>
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff0:	4798      	blx	r3
 8008ff2:	3601      	adds	r6, #1
 8008ff4:	e7ee      	b.n	8008fd4 <__libc_init_array+0xc>
 8008ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffa:	4798      	blx	r3
 8008ffc:	3601      	adds	r6, #1
 8008ffe:	e7f2      	b.n	8008fe6 <__libc_init_array+0x1e>
 8009000:	08009ad0 	.word	0x08009ad0
 8009004:	08009ad0 	.word	0x08009ad0
 8009008:	08009ad0 	.word	0x08009ad0
 800900c:	08009ad8 	.word	0x08009ad8

08009010 <memcpy>:
 8009010:	440a      	add	r2, r1
 8009012:	4291      	cmp	r1, r2
 8009014:	f100 33ff 	add.w	r3, r0, #4294967295
 8009018:	d100      	bne.n	800901c <memcpy+0xc>
 800901a:	4770      	bx	lr
 800901c:	b510      	push	{r4, lr}
 800901e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009026:	4291      	cmp	r1, r2
 8009028:	d1f9      	bne.n	800901e <memcpy+0xe>
 800902a:	bd10      	pop	{r4, pc}

0800902c <memset>:
 800902c:	4402      	add	r2, r0
 800902e:	4603      	mov	r3, r0
 8009030:	4293      	cmp	r3, r2
 8009032:	d100      	bne.n	8009036 <memset+0xa>
 8009034:	4770      	bx	lr
 8009036:	f803 1b01 	strb.w	r1, [r3], #1
 800903a:	e7f9      	b.n	8009030 <memset+0x4>

0800903c <siprintf>:
 800903c:	b40e      	push	{r1, r2, r3}
 800903e:	b500      	push	{lr}
 8009040:	b09c      	sub	sp, #112	; 0x70
 8009042:	ab1d      	add	r3, sp, #116	; 0x74
 8009044:	9002      	str	r0, [sp, #8]
 8009046:	9006      	str	r0, [sp, #24]
 8009048:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800904c:	4809      	ldr	r0, [pc, #36]	; (8009074 <siprintf+0x38>)
 800904e:	9107      	str	r1, [sp, #28]
 8009050:	9104      	str	r1, [sp, #16]
 8009052:	4909      	ldr	r1, [pc, #36]	; (8009078 <siprintf+0x3c>)
 8009054:	f853 2b04 	ldr.w	r2, [r3], #4
 8009058:	9105      	str	r1, [sp, #20]
 800905a:	6800      	ldr	r0, [r0, #0]
 800905c:	9301      	str	r3, [sp, #4]
 800905e:	a902      	add	r1, sp, #8
 8009060:	f000 f868 	bl	8009134 <_svfiprintf_r>
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	b01c      	add	sp, #112	; 0x70
 800906c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009070:	b003      	add	sp, #12
 8009072:	4770      	bx	lr
 8009074:	20000060 	.word	0x20000060
 8009078:	ffff0208 	.word	0xffff0208

0800907c <__ssputs_r>:
 800907c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009080:	688e      	ldr	r6, [r1, #8]
 8009082:	429e      	cmp	r6, r3
 8009084:	4682      	mov	sl, r0
 8009086:	460c      	mov	r4, r1
 8009088:	4690      	mov	r8, r2
 800908a:	461f      	mov	r7, r3
 800908c:	d838      	bhi.n	8009100 <__ssputs_r+0x84>
 800908e:	898a      	ldrh	r2, [r1, #12]
 8009090:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009094:	d032      	beq.n	80090fc <__ssputs_r+0x80>
 8009096:	6825      	ldr	r5, [r4, #0]
 8009098:	6909      	ldr	r1, [r1, #16]
 800909a:	eba5 0901 	sub.w	r9, r5, r1
 800909e:	6965      	ldr	r5, [r4, #20]
 80090a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090a8:	3301      	adds	r3, #1
 80090aa:	444b      	add	r3, r9
 80090ac:	106d      	asrs	r5, r5, #1
 80090ae:	429d      	cmp	r5, r3
 80090b0:	bf38      	it	cc
 80090b2:	461d      	movcc	r5, r3
 80090b4:	0553      	lsls	r3, r2, #21
 80090b6:	d531      	bpl.n	800911c <__ssputs_r+0xa0>
 80090b8:	4629      	mov	r1, r5
 80090ba:	f000 fb55 	bl	8009768 <_malloc_r>
 80090be:	4606      	mov	r6, r0
 80090c0:	b950      	cbnz	r0, 80090d8 <__ssputs_r+0x5c>
 80090c2:	230c      	movs	r3, #12
 80090c4:	f8ca 3000 	str.w	r3, [sl]
 80090c8:	89a3      	ldrh	r3, [r4, #12]
 80090ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ce:	81a3      	strh	r3, [r4, #12]
 80090d0:	f04f 30ff 	mov.w	r0, #4294967295
 80090d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d8:	6921      	ldr	r1, [r4, #16]
 80090da:	464a      	mov	r2, r9
 80090dc:	f7ff ff98 	bl	8009010 <memcpy>
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ea:	81a3      	strh	r3, [r4, #12]
 80090ec:	6126      	str	r6, [r4, #16]
 80090ee:	6165      	str	r5, [r4, #20]
 80090f0:	444e      	add	r6, r9
 80090f2:	eba5 0509 	sub.w	r5, r5, r9
 80090f6:	6026      	str	r6, [r4, #0]
 80090f8:	60a5      	str	r5, [r4, #8]
 80090fa:	463e      	mov	r6, r7
 80090fc:	42be      	cmp	r6, r7
 80090fe:	d900      	bls.n	8009102 <__ssputs_r+0x86>
 8009100:	463e      	mov	r6, r7
 8009102:	6820      	ldr	r0, [r4, #0]
 8009104:	4632      	mov	r2, r6
 8009106:	4641      	mov	r1, r8
 8009108:	f000 faa8 	bl	800965c <memmove>
 800910c:	68a3      	ldr	r3, [r4, #8]
 800910e:	1b9b      	subs	r3, r3, r6
 8009110:	60a3      	str	r3, [r4, #8]
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	4433      	add	r3, r6
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	2000      	movs	r0, #0
 800911a:	e7db      	b.n	80090d4 <__ssputs_r+0x58>
 800911c:	462a      	mov	r2, r5
 800911e:	f000 fb97 	bl	8009850 <_realloc_r>
 8009122:	4606      	mov	r6, r0
 8009124:	2800      	cmp	r0, #0
 8009126:	d1e1      	bne.n	80090ec <__ssputs_r+0x70>
 8009128:	6921      	ldr	r1, [r4, #16]
 800912a:	4650      	mov	r0, sl
 800912c:	f000 fab0 	bl	8009690 <_free_r>
 8009130:	e7c7      	b.n	80090c2 <__ssputs_r+0x46>
	...

08009134 <_svfiprintf_r>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	4698      	mov	r8, r3
 800913a:	898b      	ldrh	r3, [r1, #12]
 800913c:	061b      	lsls	r3, r3, #24
 800913e:	b09d      	sub	sp, #116	; 0x74
 8009140:	4607      	mov	r7, r0
 8009142:	460d      	mov	r5, r1
 8009144:	4614      	mov	r4, r2
 8009146:	d50e      	bpl.n	8009166 <_svfiprintf_r+0x32>
 8009148:	690b      	ldr	r3, [r1, #16]
 800914a:	b963      	cbnz	r3, 8009166 <_svfiprintf_r+0x32>
 800914c:	2140      	movs	r1, #64	; 0x40
 800914e:	f000 fb0b 	bl	8009768 <_malloc_r>
 8009152:	6028      	str	r0, [r5, #0]
 8009154:	6128      	str	r0, [r5, #16]
 8009156:	b920      	cbnz	r0, 8009162 <_svfiprintf_r+0x2e>
 8009158:	230c      	movs	r3, #12
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	f04f 30ff 	mov.w	r0, #4294967295
 8009160:	e0d1      	b.n	8009306 <_svfiprintf_r+0x1d2>
 8009162:	2340      	movs	r3, #64	; 0x40
 8009164:	616b      	str	r3, [r5, #20]
 8009166:	2300      	movs	r3, #0
 8009168:	9309      	str	r3, [sp, #36]	; 0x24
 800916a:	2320      	movs	r3, #32
 800916c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009170:	f8cd 800c 	str.w	r8, [sp, #12]
 8009174:	2330      	movs	r3, #48	; 0x30
 8009176:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009320 <_svfiprintf_r+0x1ec>
 800917a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800917e:	f04f 0901 	mov.w	r9, #1
 8009182:	4623      	mov	r3, r4
 8009184:	469a      	mov	sl, r3
 8009186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918a:	b10a      	cbz	r2, 8009190 <_svfiprintf_r+0x5c>
 800918c:	2a25      	cmp	r2, #37	; 0x25
 800918e:	d1f9      	bne.n	8009184 <_svfiprintf_r+0x50>
 8009190:	ebba 0b04 	subs.w	fp, sl, r4
 8009194:	d00b      	beq.n	80091ae <_svfiprintf_r+0x7a>
 8009196:	465b      	mov	r3, fp
 8009198:	4622      	mov	r2, r4
 800919a:	4629      	mov	r1, r5
 800919c:	4638      	mov	r0, r7
 800919e:	f7ff ff6d 	bl	800907c <__ssputs_r>
 80091a2:	3001      	adds	r0, #1
 80091a4:	f000 80aa 	beq.w	80092fc <_svfiprintf_r+0x1c8>
 80091a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091aa:	445a      	add	r2, fp
 80091ac:	9209      	str	r2, [sp, #36]	; 0x24
 80091ae:	f89a 3000 	ldrb.w	r3, [sl]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	f000 80a2 	beq.w	80092fc <_svfiprintf_r+0x1c8>
 80091b8:	2300      	movs	r3, #0
 80091ba:	f04f 32ff 	mov.w	r2, #4294967295
 80091be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091c2:	f10a 0a01 	add.w	sl, sl, #1
 80091c6:	9304      	str	r3, [sp, #16]
 80091c8:	9307      	str	r3, [sp, #28]
 80091ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091ce:	931a      	str	r3, [sp, #104]	; 0x68
 80091d0:	4654      	mov	r4, sl
 80091d2:	2205      	movs	r2, #5
 80091d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091d8:	4851      	ldr	r0, [pc, #324]	; (8009320 <_svfiprintf_r+0x1ec>)
 80091da:	f7f7 f821 	bl	8000220 <memchr>
 80091de:	9a04      	ldr	r2, [sp, #16]
 80091e0:	b9d8      	cbnz	r0, 800921a <_svfiprintf_r+0xe6>
 80091e2:	06d0      	lsls	r0, r2, #27
 80091e4:	bf44      	itt	mi
 80091e6:	2320      	movmi	r3, #32
 80091e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ec:	0711      	lsls	r1, r2, #28
 80091ee:	bf44      	itt	mi
 80091f0:	232b      	movmi	r3, #43	; 0x2b
 80091f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091f6:	f89a 3000 	ldrb.w	r3, [sl]
 80091fa:	2b2a      	cmp	r3, #42	; 0x2a
 80091fc:	d015      	beq.n	800922a <_svfiprintf_r+0xf6>
 80091fe:	9a07      	ldr	r2, [sp, #28]
 8009200:	4654      	mov	r4, sl
 8009202:	2000      	movs	r0, #0
 8009204:	f04f 0c0a 	mov.w	ip, #10
 8009208:	4621      	mov	r1, r4
 800920a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800920e:	3b30      	subs	r3, #48	; 0x30
 8009210:	2b09      	cmp	r3, #9
 8009212:	d94e      	bls.n	80092b2 <_svfiprintf_r+0x17e>
 8009214:	b1b0      	cbz	r0, 8009244 <_svfiprintf_r+0x110>
 8009216:	9207      	str	r2, [sp, #28]
 8009218:	e014      	b.n	8009244 <_svfiprintf_r+0x110>
 800921a:	eba0 0308 	sub.w	r3, r0, r8
 800921e:	fa09 f303 	lsl.w	r3, r9, r3
 8009222:	4313      	orrs	r3, r2
 8009224:	9304      	str	r3, [sp, #16]
 8009226:	46a2      	mov	sl, r4
 8009228:	e7d2      	b.n	80091d0 <_svfiprintf_r+0x9c>
 800922a:	9b03      	ldr	r3, [sp, #12]
 800922c:	1d19      	adds	r1, r3, #4
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	9103      	str	r1, [sp, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	bfbb      	ittet	lt
 8009236:	425b      	neglt	r3, r3
 8009238:	f042 0202 	orrlt.w	r2, r2, #2
 800923c:	9307      	strge	r3, [sp, #28]
 800923e:	9307      	strlt	r3, [sp, #28]
 8009240:	bfb8      	it	lt
 8009242:	9204      	strlt	r2, [sp, #16]
 8009244:	7823      	ldrb	r3, [r4, #0]
 8009246:	2b2e      	cmp	r3, #46	; 0x2e
 8009248:	d10c      	bne.n	8009264 <_svfiprintf_r+0x130>
 800924a:	7863      	ldrb	r3, [r4, #1]
 800924c:	2b2a      	cmp	r3, #42	; 0x2a
 800924e:	d135      	bne.n	80092bc <_svfiprintf_r+0x188>
 8009250:	9b03      	ldr	r3, [sp, #12]
 8009252:	1d1a      	adds	r2, r3, #4
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	9203      	str	r2, [sp, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	bfb8      	it	lt
 800925c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009260:	3402      	adds	r4, #2
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009330 <_svfiprintf_r+0x1fc>
 8009268:	7821      	ldrb	r1, [r4, #0]
 800926a:	2203      	movs	r2, #3
 800926c:	4650      	mov	r0, sl
 800926e:	f7f6 ffd7 	bl	8000220 <memchr>
 8009272:	b140      	cbz	r0, 8009286 <_svfiprintf_r+0x152>
 8009274:	2340      	movs	r3, #64	; 0x40
 8009276:	eba0 000a 	sub.w	r0, r0, sl
 800927a:	fa03 f000 	lsl.w	r0, r3, r0
 800927e:	9b04      	ldr	r3, [sp, #16]
 8009280:	4303      	orrs	r3, r0
 8009282:	3401      	adds	r4, #1
 8009284:	9304      	str	r3, [sp, #16]
 8009286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928a:	4826      	ldr	r0, [pc, #152]	; (8009324 <_svfiprintf_r+0x1f0>)
 800928c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009290:	2206      	movs	r2, #6
 8009292:	f7f6 ffc5 	bl	8000220 <memchr>
 8009296:	2800      	cmp	r0, #0
 8009298:	d038      	beq.n	800930c <_svfiprintf_r+0x1d8>
 800929a:	4b23      	ldr	r3, [pc, #140]	; (8009328 <_svfiprintf_r+0x1f4>)
 800929c:	bb1b      	cbnz	r3, 80092e6 <_svfiprintf_r+0x1b2>
 800929e:	9b03      	ldr	r3, [sp, #12]
 80092a0:	3307      	adds	r3, #7
 80092a2:	f023 0307 	bic.w	r3, r3, #7
 80092a6:	3308      	adds	r3, #8
 80092a8:	9303      	str	r3, [sp, #12]
 80092aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ac:	4433      	add	r3, r6
 80092ae:	9309      	str	r3, [sp, #36]	; 0x24
 80092b0:	e767      	b.n	8009182 <_svfiprintf_r+0x4e>
 80092b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b6:	460c      	mov	r4, r1
 80092b8:	2001      	movs	r0, #1
 80092ba:	e7a5      	b.n	8009208 <_svfiprintf_r+0xd4>
 80092bc:	2300      	movs	r3, #0
 80092be:	3401      	adds	r4, #1
 80092c0:	9305      	str	r3, [sp, #20]
 80092c2:	4619      	mov	r1, r3
 80092c4:	f04f 0c0a 	mov.w	ip, #10
 80092c8:	4620      	mov	r0, r4
 80092ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092ce:	3a30      	subs	r2, #48	; 0x30
 80092d0:	2a09      	cmp	r2, #9
 80092d2:	d903      	bls.n	80092dc <_svfiprintf_r+0x1a8>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d0c5      	beq.n	8009264 <_svfiprintf_r+0x130>
 80092d8:	9105      	str	r1, [sp, #20]
 80092da:	e7c3      	b.n	8009264 <_svfiprintf_r+0x130>
 80092dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80092e0:	4604      	mov	r4, r0
 80092e2:	2301      	movs	r3, #1
 80092e4:	e7f0      	b.n	80092c8 <_svfiprintf_r+0x194>
 80092e6:	ab03      	add	r3, sp, #12
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	462a      	mov	r2, r5
 80092ec:	4b0f      	ldr	r3, [pc, #60]	; (800932c <_svfiprintf_r+0x1f8>)
 80092ee:	a904      	add	r1, sp, #16
 80092f0:	4638      	mov	r0, r7
 80092f2:	f3af 8000 	nop.w
 80092f6:	1c42      	adds	r2, r0, #1
 80092f8:	4606      	mov	r6, r0
 80092fa:	d1d6      	bne.n	80092aa <_svfiprintf_r+0x176>
 80092fc:	89ab      	ldrh	r3, [r5, #12]
 80092fe:	065b      	lsls	r3, r3, #25
 8009300:	f53f af2c 	bmi.w	800915c <_svfiprintf_r+0x28>
 8009304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009306:	b01d      	add	sp, #116	; 0x74
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	ab03      	add	r3, sp, #12
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	462a      	mov	r2, r5
 8009312:	4b06      	ldr	r3, [pc, #24]	; (800932c <_svfiprintf_r+0x1f8>)
 8009314:	a904      	add	r1, sp, #16
 8009316:	4638      	mov	r0, r7
 8009318:	f000 f87a 	bl	8009410 <_printf_i>
 800931c:	e7eb      	b.n	80092f6 <_svfiprintf_r+0x1c2>
 800931e:	bf00      	nop
 8009320:	08009a94 	.word	0x08009a94
 8009324:	08009a9e 	.word	0x08009a9e
 8009328:	00000000 	.word	0x00000000
 800932c:	0800907d 	.word	0x0800907d
 8009330:	08009a9a 	.word	0x08009a9a

08009334 <_printf_common>:
 8009334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	4616      	mov	r6, r2
 800933a:	4699      	mov	r9, r3
 800933c:	688a      	ldr	r2, [r1, #8]
 800933e:	690b      	ldr	r3, [r1, #16]
 8009340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009344:	4293      	cmp	r3, r2
 8009346:	bfb8      	it	lt
 8009348:	4613      	movlt	r3, r2
 800934a:	6033      	str	r3, [r6, #0]
 800934c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009350:	4607      	mov	r7, r0
 8009352:	460c      	mov	r4, r1
 8009354:	b10a      	cbz	r2, 800935a <_printf_common+0x26>
 8009356:	3301      	adds	r3, #1
 8009358:	6033      	str	r3, [r6, #0]
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	0699      	lsls	r1, r3, #26
 800935e:	bf42      	ittt	mi
 8009360:	6833      	ldrmi	r3, [r6, #0]
 8009362:	3302      	addmi	r3, #2
 8009364:	6033      	strmi	r3, [r6, #0]
 8009366:	6825      	ldr	r5, [r4, #0]
 8009368:	f015 0506 	ands.w	r5, r5, #6
 800936c:	d106      	bne.n	800937c <_printf_common+0x48>
 800936e:	f104 0a19 	add.w	sl, r4, #25
 8009372:	68e3      	ldr	r3, [r4, #12]
 8009374:	6832      	ldr	r2, [r6, #0]
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	42ab      	cmp	r3, r5
 800937a:	dc26      	bgt.n	80093ca <_printf_common+0x96>
 800937c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009380:	1e13      	subs	r3, r2, #0
 8009382:	6822      	ldr	r2, [r4, #0]
 8009384:	bf18      	it	ne
 8009386:	2301      	movne	r3, #1
 8009388:	0692      	lsls	r2, r2, #26
 800938a:	d42b      	bmi.n	80093e4 <_printf_common+0xb0>
 800938c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009390:	4649      	mov	r1, r9
 8009392:	4638      	mov	r0, r7
 8009394:	47c0      	blx	r8
 8009396:	3001      	adds	r0, #1
 8009398:	d01e      	beq.n	80093d8 <_printf_common+0xa4>
 800939a:	6823      	ldr	r3, [r4, #0]
 800939c:	68e5      	ldr	r5, [r4, #12]
 800939e:	6832      	ldr	r2, [r6, #0]
 80093a0:	f003 0306 	and.w	r3, r3, #6
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	bf08      	it	eq
 80093a8:	1aad      	subeq	r5, r5, r2
 80093aa:	68a3      	ldr	r3, [r4, #8]
 80093ac:	6922      	ldr	r2, [r4, #16]
 80093ae:	bf0c      	ite	eq
 80093b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093b4:	2500      	movne	r5, #0
 80093b6:	4293      	cmp	r3, r2
 80093b8:	bfc4      	itt	gt
 80093ba:	1a9b      	subgt	r3, r3, r2
 80093bc:	18ed      	addgt	r5, r5, r3
 80093be:	2600      	movs	r6, #0
 80093c0:	341a      	adds	r4, #26
 80093c2:	42b5      	cmp	r5, r6
 80093c4:	d11a      	bne.n	80093fc <_printf_common+0xc8>
 80093c6:	2000      	movs	r0, #0
 80093c8:	e008      	b.n	80093dc <_printf_common+0xa8>
 80093ca:	2301      	movs	r3, #1
 80093cc:	4652      	mov	r2, sl
 80093ce:	4649      	mov	r1, r9
 80093d0:	4638      	mov	r0, r7
 80093d2:	47c0      	blx	r8
 80093d4:	3001      	adds	r0, #1
 80093d6:	d103      	bne.n	80093e0 <_printf_common+0xac>
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295
 80093dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e0:	3501      	adds	r5, #1
 80093e2:	e7c6      	b.n	8009372 <_printf_common+0x3e>
 80093e4:	18e1      	adds	r1, r4, r3
 80093e6:	1c5a      	adds	r2, r3, #1
 80093e8:	2030      	movs	r0, #48	; 0x30
 80093ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093ee:	4422      	add	r2, r4
 80093f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093f8:	3302      	adds	r3, #2
 80093fa:	e7c7      	b.n	800938c <_printf_common+0x58>
 80093fc:	2301      	movs	r3, #1
 80093fe:	4622      	mov	r2, r4
 8009400:	4649      	mov	r1, r9
 8009402:	4638      	mov	r0, r7
 8009404:	47c0      	blx	r8
 8009406:	3001      	adds	r0, #1
 8009408:	d0e6      	beq.n	80093d8 <_printf_common+0xa4>
 800940a:	3601      	adds	r6, #1
 800940c:	e7d9      	b.n	80093c2 <_printf_common+0x8e>
	...

08009410 <_printf_i>:
 8009410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	7e0f      	ldrb	r7, [r1, #24]
 8009416:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009418:	2f78      	cmp	r7, #120	; 0x78
 800941a:	4691      	mov	r9, r2
 800941c:	4680      	mov	r8, r0
 800941e:	460c      	mov	r4, r1
 8009420:	469a      	mov	sl, r3
 8009422:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009426:	d807      	bhi.n	8009438 <_printf_i+0x28>
 8009428:	2f62      	cmp	r7, #98	; 0x62
 800942a:	d80a      	bhi.n	8009442 <_printf_i+0x32>
 800942c:	2f00      	cmp	r7, #0
 800942e:	f000 80d8 	beq.w	80095e2 <_printf_i+0x1d2>
 8009432:	2f58      	cmp	r7, #88	; 0x58
 8009434:	f000 80a3 	beq.w	800957e <_printf_i+0x16e>
 8009438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800943c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009440:	e03a      	b.n	80094b8 <_printf_i+0xa8>
 8009442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009446:	2b15      	cmp	r3, #21
 8009448:	d8f6      	bhi.n	8009438 <_printf_i+0x28>
 800944a:	a101      	add	r1, pc, #4	; (adr r1, 8009450 <_printf_i+0x40>)
 800944c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009450:	080094a9 	.word	0x080094a9
 8009454:	080094bd 	.word	0x080094bd
 8009458:	08009439 	.word	0x08009439
 800945c:	08009439 	.word	0x08009439
 8009460:	08009439 	.word	0x08009439
 8009464:	08009439 	.word	0x08009439
 8009468:	080094bd 	.word	0x080094bd
 800946c:	08009439 	.word	0x08009439
 8009470:	08009439 	.word	0x08009439
 8009474:	08009439 	.word	0x08009439
 8009478:	08009439 	.word	0x08009439
 800947c:	080095c9 	.word	0x080095c9
 8009480:	080094ed 	.word	0x080094ed
 8009484:	080095ab 	.word	0x080095ab
 8009488:	08009439 	.word	0x08009439
 800948c:	08009439 	.word	0x08009439
 8009490:	080095eb 	.word	0x080095eb
 8009494:	08009439 	.word	0x08009439
 8009498:	080094ed 	.word	0x080094ed
 800949c:	08009439 	.word	0x08009439
 80094a0:	08009439 	.word	0x08009439
 80094a4:	080095b3 	.word	0x080095b3
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	1d1a      	adds	r2, r3, #4
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	602a      	str	r2, [r5, #0]
 80094b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094b8:	2301      	movs	r3, #1
 80094ba:	e0a3      	b.n	8009604 <_printf_i+0x1f4>
 80094bc:	6820      	ldr	r0, [r4, #0]
 80094be:	6829      	ldr	r1, [r5, #0]
 80094c0:	0606      	lsls	r6, r0, #24
 80094c2:	f101 0304 	add.w	r3, r1, #4
 80094c6:	d50a      	bpl.n	80094de <_printf_i+0xce>
 80094c8:	680e      	ldr	r6, [r1, #0]
 80094ca:	602b      	str	r3, [r5, #0]
 80094cc:	2e00      	cmp	r6, #0
 80094ce:	da03      	bge.n	80094d8 <_printf_i+0xc8>
 80094d0:	232d      	movs	r3, #45	; 0x2d
 80094d2:	4276      	negs	r6, r6
 80094d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094d8:	485e      	ldr	r0, [pc, #376]	; (8009654 <_printf_i+0x244>)
 80094da:	230a      	movs	r3, #10
 80094dc:	e019      	b.n	8009512 <_printf_i+0x102>
 80094de:	680e      	ldr	r6, [r1, #0]
 80094e0:	602b      	str	r3, [r5, #0]
 80094e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80094e6:	bf18      	it	ne
 80094e8:	b236      	sxthne	r6, r6
 80094ea:	e7ef      	b.n	80094cc <_printf_i+0xbc>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	6820      	ldr	r0, [r4, #0]
 80094f0:	1d19      	adds	r1, r3, #4
 80094f2:	6029      	str	r1, [r5, #0]
 80094f4:	0601      	lsls	r1, r0, #24
 80094f6:	d501      	bpl.n	80094fc <_printf_i+0xec>
 80094f8:	681e      	ldr	r6, [r3, #0]
 80094fa:	e002      	b.n	8009502 <_printf_i+0xf2>
 80094fc:	0646      	lsls	r6, r0, #25
 80094fe:	d5fb      	bpl.n	80094f8 <_printf_i+0xe8>
 8009500:	881e      	ldrh	r6, [r3, #0]
 8009502:	4854      	ldr	r0, [pc, #336]	; (8009654 <_printf_i+0x244>)
 8009504:	2f6f      	cmp	r7, #111	; 0x6f
 8009506:	bf0c      	ite	eq
 8009508:	2308      	moveq	r3, #8
 800950a:	230a      	movne	r3, #10
 800950c:	2100      	movs	r1, #0
 800950e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009512:	6865      	ldr	r5, [r4, #4]
 8009514:	60a5      	str	r5, [r4, #8]
 8009516:	2d00      	cmp	r5, #0
 8009518:	bfa2      	ittt	ge
 800951a:	6821      	ldrge	r1, [r4, #0]
 800951c:	f021 0104 	bicge.w	r1, r1, #4
 8009520:	6021      	strge	r1, [r4, #0]
 8009522:	b90e      	cbnz	r6, 8009528 <_printf_i+0x118>
 8009524:	2d00      	cmp	r5, #0
 8009526:	d04d      	beq.n	80095c4 <_printf_i+0x1b4>
 8009528:	4615      	mov	r5, r2
 800952a:	fbb6 f1f3 	udiv	r1, r6, r3
 800952e:	fb03 6711 	mls	r7, r3, r1, r6
 8009532:	5dc7      	ldrb	r7, [r0, r7]
 8009534:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009538:	4637      	mov	r7, r6
 800953a:	42bb      	cmp	r3, r7
 800953c:	460e      	mov	r6, r1
 800953e:	d9f4      	bls.n	800952a <_printf_i+0x11a>
 8009540:	2b08      	cmp	r3, #8
 8009542:	d10b      	bne.n	800955c <_printf_i+0x14c>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	07de      	lsls	r6, r3, #31
 8009548:	d508      	bpl.n	800955c <_printf_i+0x14c>
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	6861      	ldr	r1, [r4, #4]
 800954e:	4299      	cmp	r1, r3
 8009550:	bfde      	ittt	le
 8009552:	2330      	movle	r3, #48	; 0x30
 8009554:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009558:	f105 35ff 	addle.w	r5, r5, #4294967295
 800955c:	1b52      	subs	r2, r2, r5
 800955e:	6122      	str	r2, [r4, #16]
 8009560:	f8cd a000 	str.w	sl, [sp]
 8009564:	464b      	mov	r3, r9
 8009566:	aa03      	add	r2, sp, #12
 8009568:	4621      	mov	r1, r4
 800956a:	4640      	mov	r0, r8
 800956c:	f7ff fee2 	bl	8009334 <_printf_common>
 8009570:	3001      	adds	r0, #1
 8009572:	d14c      	bne.n	800960e <_printf_i+0x1fe>
 8009574:	f04f 30ff 	mov.w	r0, #4294967295
 8009578:	b004      	add	sp, #16
 800957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800957e:	4835      	ldr	r0, [pc, #212]	; (8009654 <_printf_i+0x244>)
 8009580:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009584:	6829      	ldr	r1, [r5, #0]
 8009586:	6823      	ldr	r3, [r4, #0]
 8009588:	f851 6b04 	ldr.w	r6, [r1], #4
 800958c:	6029      	str	r1, [r5, #0]
 800958e:	061d      	lsls	r5, r3, #24
 8009590:	d514      	bpl.n	80095bc <_printf_i+0x1ac>
 8009592:	07df      	lsls	r7, r3, #31
 8009594:	bf44      	itt	mi
 8009596:	f043 0320 	orrmi.w	r3, r3, #32
 800959a:	6023      	strmi	r3, [r4, #0]
 800959c:	b91e      	cbnz	r6, 80095a6 <_printf_i+0x196>
 800959e:	6823      	ldr	r3, [r4, #0]
 80095a0:	f023 0320 	bic.w	r3, r3, #32
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	2310      	movs	r3, #16
 80095a8:	e7b0      	b.n	800950c <_printf_i+0xfc>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	f043 0320 	orr.w	r3, r3, #32
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	2378      	movs	r3, #120	; 0x78
 80095b4:	4828      	ldr	r0, [pc, #160]	; (8009658 <_printf_i+0x248>)
 80095b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095ba:	e7e3      	b.n	8009584 <_printf_i+0x174>
 80095bc:	0659      	lsls	r1, r3, #25
 80095be:	bf48      	it	mi
 80095c0:	b2b6      	uxthmi	r6, r6
 80095c2:	e7e6      	b.n	8009592 <_printf_i+0x182>
 80095c4:	4615      	mov	r5, r2
 80095c6:	e7bb      	b.n	8009540 <_printf_i+0x130>
 80095c8:	682b      	ldr	r3, [r5, #0]
 80095ca:	6826      	ldr	r6, [r4, #0]
 80095cc:	6961      	ldr	r1, [r4, #20]
 80095ce:	1d18      	adds	r0, r3, #4
 80095d0:	6028      	str	r0, [r5, #0]
 80095d2:	0635      	lsls	r5, r6, #24
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	d501      	bpl.n	80095dc <_printf_i+0x1cc>
 80095d8:	6019      	str	r1, [r3, #0]
 80095da:	e002      	b.n	80095e2 <_printf_i+0x1d2>
 80095dc:	0670      	lsls	r0, r6, #25
 80095de:	d5fb      	bpl.n	80095d8 <_printf_i+0x1c8>
 80095e0:	8019      	strh	r1, [r3, #0]
 80095e2:	2300      	movs	r3, #0
 80095e4:	6123      	str	r3, [r4, #16]
 80095e6:	4615      	mov	r5, r2
 80095e8:	e7ba      	b.n	8009560 <_printf_i+0x150>
 80095ea:	682b      	ldr	r3, [r5, #0]
 80095ec:	1d1a      	adds	r2, r3, #4
 80095ee:	602a      	str	r2, [r5, #0]
 80095f0:	681d      	ldr	r5, [r3, #0]
 80095f2:	6862      	ldr	r2, [r4, #4]
 80095f4:	2100      	movs	r1, #0
 80095f6:	4628      	mov	r0, r5
 80095f8:	f7f6 fe12 	bl	8000220 <memchr>
 80095fc:	b108      	cbz	r0, 8009602 <_printf_i+0x1f2>
 80095fe:	1b40      	subs	r0, r0, r5
 8009600:	6060      	str	r0, [r4, #4]
 8009602:	6863      	ldr	r3, [r4, #4]
 8009604:	6123      	str	r3, [r4, #16]
 8009606:	2300      	movs	r3, #0
 8009608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800960c:	e7a8      	b.n	8009560 <_printf_i+0x150>
 800960e:	6923      	ldr	r3, [r4, #16]
 8009610:	462a      	mov	r2, r5
 8009612:	4649      	mov	r1, r9
 8009614:	4640      	mov	r0, r8
 8009616:	47d0      	blx	sl
 8009618:	3001      	adds	r0, #1
 800961a:	d0ab      	beq.n	8009574 <_printf_i+0x164>
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	079b      	lsls	r3, r3, #30
 8009620:	d413      	bmi.n	800964a <_printf_i+0x23a>
 8009622:	68e0      	ldr	r0, [r4, #12]
 8009624:	9b03      	ldr	r3, [sp, #12]
 8009626:	4298      	cmp	r0, r3
 8009628:	bfb8      	it	lt
 800962a:	4618      	movlt	r0, r3
 800962c:	e7a4      	b.n	8009578 <_printf_i+0x168>
 800962e:	2301      	movs	r3, #1
 8009630:	4632      	mov	r2, r6
 8009632:	4649      	mov	r1, r9
 8009634:	4640      	mov	r0, r8
 8009636:	47d0      	blx	sl
 8009638:	3001      	adds	r0, #1
 800963a:	d09b      	beq.n	8009574 <_printf_i+0x164>
 800963c:	3501      	adds	r5, #1
 800963e:	68e3      	ldr	r3, [r4, #12]
 8009640:	9903      	ldr	r1, [sp, #12]
 8009642:	1a5b      	subs	r3, r3, r1
 8009644:	42ab      	cmp	r3, r5
 8009646:	dcf2      	bgt.n	800962e <_printf_i+0x21e>
 8009648:	e7eb      	b.n	8009622 <_printf_i+0x212>
 800964a:	2500      	movs	r5, #0
 800964c:	f104 0619 	add.w	r6, r4, #25
 8009650:	e7f5      	b.n	800963e <_printf_i+0x22e>
 8009652:	bf00      	nop
 8009654:	08009aa5 	.word	0x08009aa5
 8009658:	08009ab6 	.word	0x08009ab6

0800965c <memmove>:
 800965c:	4288      	cmp	r0, r1
 800965e:	b510      	push	{r4, lr}
 8009660:	eb01 0402 	add.w	r4, r1, r2
 8009664:	d902      	bls.n	800966c <memmove+0x10>
 8009666:	4284      	cmp	r4, r0
 8009668:	4623      	mov	r3, r4
 800966a:	d807      	bhi.n	800967c <memmove+0x20>
 800966c:	1e43      	subs	r3, r0, #1
 800966e:	42a1      	cmp	r1, r4
 8009670:	d008      	beq.n	8009684 <memmove+0x28>
 8009672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800967a:	e7f8      	b.n	800966e <memmove+0x12>
 800967c:	4402      	add	r2, r0
 800967e:	4601      	mov	r1, r0
 8009680:	428a      	cmp	r2, r1
 8009682:	d100      	bne.n	8009686 <memmove+0x2a>
 8009684:	bd10      	pop	{r4, pc}
 8009686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800968a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800968e:	e7f7      	b.n	8009680 <memmove+0x24>

08009690 <_free_r>:
 8009690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009692:	2900      	cmp	r1, #0
 8009694:	d044      	beq.n	8009720 <_free_r+0x90>
 8009696:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800969a:	9001      	str	r0, [sp, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f1a1 0404 	sub.w	r4, r1, #4
 80096a2:	bfb8      	it	lt
 80096a4:	18e4      	addlt	r4, r4, r3
 80096a6:	f000 f913 	bl	80098d0 <__malloc_lock>
 80096aa:	4a1e      	ldr	r2, [pc, #120]	; (8009724 <_free_r+0x94>)
 80096ac:	9801      	ldr	r0, [sp, #4]
 80096ae:	6813      	ldr	r3, [r2, #0]
 80096b0:	b933      	cbnz	r3, 80096c0 <_free_r+0x30>
 80096b2:	6063      	str	r3, [r4, #4]
 80096b4:	6014      	str	r4, [r2, #0]
 80096b6:	b003      	add	sp, #12
 80096b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096bc:	f000 b90e 	b.w	80098dc <__malloc_unlock>
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	d908      	bls.n	80096d6 <_free_r+0x46>
 80096c4:	6825      	ldr	r5, [r4, #0]
 80096c6:	1961      	adds	r1, r4, r5
 80096c8:	428b      	cmp	r3, r1
 80096ca:	bf01      	itttt	eq
 80096cc:	6819      	ldreq	r1, [r3, #0]
 80096ce:	685b      	ldreq	r3, [r3, #4]
 80096d0:	1949      	addeq	r1, r1, r5
 80096d2:	6021      	streq	r1, [r4, #0]
 80096d4:	e7ed      	b.n	80096b2 <_free_r+0x22>
 80096d6:	461a      	mov	r2, r3
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	b10b      	cbz	r3, 80096e0 <_free_r+0x50>
 80096dc:	42a3      	cmp	r3, r4
 80096de:	d9fa      	bls.n	80096d6 <_free_r+0x46>
 80096e0:	6811      	ldr	r1, [r2, #0]
 80096e2:	1855      	adds	r5, r2, r1
 80096e4:	42a5      	cmp	r5, r4
 80096e6:	d10b      	bne.n	8009700 <_free_r+0x70>
 80096e8:	6824      	ldr	r4, [r4, #0]
 80096ea:	4421      	add	r1, r4
 80096ec:	1854      	adds	r4, r2, r1
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	6011      	str	r1, [r2, #0]
 80096f2:	d1e0      	bne.n	80096b6 <_free_r+0x26>
 80096f4:	681c      	ldr	r4, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	6053      	str	r3, [r2, #4]
 80096fa:	4421      	add	r1, r4
 80096fc:	6011      	str	r1, [r2, #0]
 80096fe:	e7da      	b.n	80096b6 <_free_r+0x26>
 8009700:	d902      	bls.n	8009708 <_free_r+0x78>
 8009702:	230c      	movs	r3, #12
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	e7d6      	b.n	80096b6 <_free_r+0x26>
 8009708:	6825      	ldr	r5, [r4, #0]
 800970a:	1961      	adds	r1, r4, r5
 800970c:	428b      	cmp	r3, r1
 800970e:	bf04      	itt	eq
 8009710:	6819      	ldreq	r1, [r3, #0]
 8009712:	685b      	ldreq	r3, [r3, #4]
 8009714:	6063      	str	r3, [r4, #4]
 8009716:	bf04      	itt	eq
 8009718:	1949      	addeq	r1, r1, r5
 800971a:	6021      	streq	r1, [r4, #0]
 800971c:	6054      	str	r4, [r2, #4]
 800971e:	e7ca      	b.n	80096b6 <_free_r+0x26>
 8009720:	b003      	add	sp, #12
 8009722:	bd30      	pop	{r4, r5, pc}
 8009724:	20004d90 	.word	0x20004d90

08009728 <sbrk_aligned>:
 8009728:	b570      	push	{r4, r5, r6, lr}
 800972a:	4e0e      	ldr	r6, [pc, #56]	; (8009764 <sbrk_aligned+0x3c>)
 800972c:	460c      	mov	r4, r1
 800972e:	6831      	ldr	r1, [r6, #0]
 8009730:	4605      	mov	r5, r0
 8009732:	b911      	cbnz	r1, 800973a <sbrk_aligned+0x12>
 8009734:	f000 f8bc 	bl	80098b0 <_sbrk_r>
 8009738:	6030      	str	r0, [r6, #0]
 800973a:	4621      	mov	r1, r4
 800973c:	4628      	mov	r0, r5
 800973e:	f000 f8b7 	bl	80098b0 <_sbrk_r>
 8009742:	1c43      	adds	r3, r0, #1
 8009744:	d00a      	beq.n	800975c <sbrk_aligned+0x34>
 8009746:	1cc4      	adds	r4, r0, #3
 8009748:	f024 0403 	bic.w	r4, r4, #3
 800974c:	42a0      	cmp	r0, r4
 800974e:	d007      	beq.n	8009760 <sbrk_aligned+0x38>
 8009750:	1a21      	subs	r1, r4, r0
 8009752:	4628      	mov	r0, r5
 8009754:	f000 f8ac 	bl	80098b0 <_sbrk_r>
 8009758:	3001      	adds	r0, #1
 800975a:	d101      	bne.n	8009760 <sbrk_aligned+0x38>
 800975c:	f04f 34ff 	mov.w	r4, #4294967295
 8009760:	4620      	mov	r0, r4
 8009762:	bd70      	pop	{r4, r5, r6, pc}
 8009764:	20004d94 	.word	0x20004d94

08009768 <_malloc_r>:
 8009768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976c:	1ccd      	adds	r5, r1, #3
 800976e:	f025 0503 	bic.w	r5, r5, #3
 8009772:	3508      	adds	r5, #8
 8009774:	2d0c      	cmp	r5, #12
 8009776:	bf38      	it	cc
 8009778:	250c      	movcc	r5, #12
 800977a:	2d00      	cmp	r5, #0
 800977c:	4607      	mov	r7, r0
 800977e:	db01      	blt.n	8009784 <_malloc_r+0x1c>
 8009780:	42a9      	cmp	r1, r5
 8009782:	d905      	bls.n	8009790 <_malloc_r+0x28>
 8009784:	230c      	movs	r3, #12
 8009786:	603b      	str	r3, [r7, #0]
 8009788:	2600      	movs	r6, #0
 800978a:	4630      	mov	r0, r6
 800978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009790:	4e2e      	ldr	r6, [pc, #184]	; (800984c <_malloc_r+0xe4>)
 8009792:	f000 f89d 	bl	80098d0 <__malloc_lock>
 8009796:	6833      	ldr	r3, [r6, #0]
 8009798:	461c      	mov	r4, r3
 800979a:	bb34      	cbnz	r4, 80097ea <_malloc_r+0x82>
 800979c:	4629      	mov	r1, r5
 800979e:	4638      	mov	r0, r7
 80097a0:	f7ff ffc2 	bl	8009728 <sbrk_aligned>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	4604      	mov	r4, r0
 80097a8:	d14d      	bne.n	8009846 <_malloc_r+0xde>
 80097aa:	6834      	ldr	r4, [r6, #0]
 80097ac:	4626      	mov	r6, r4
 80097ae:	2e00      	cmp	r6, #0
 80097b0:	d140      	bne.n	8009834 <_malloc_r+0xcc>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	4631      	mov	r1, r6
 80097b6:	4638      	mov	r0, r7
 80097b8:	eb04 0803 	add.w	r8, r4, r3
 80097bc:	f000 f878 	bl	80098b0 <_sbrk_r>
 80097c0:	4580      	cmp	r8, r0
 80097c2:	d13a      	bne.n	800983a <_malloc_r+0xd2>
 80097c4:	6821      	ldr	r1, [r4, #0]
 80097c6:	3503      	adds	r5, #3
 80097c8:	1a6d      	subs	r5, r5, r1
 80097ca:	f025 0503 	bic.w	r5, r5, #3
 80097ce:	3508      	adds	r5, #8
 80097d0:	2d0c      	cmp	r5, #12
 80097d2:	bf38      	it	cc
 80097d4:	250c      	movcc	r5, #12
 80097d6:	4629      	mov	r1, r5
 80097d8:	4638      	mov	r0, r7
 80097da:	f7ff ffa5 	bl	8009728 <sbrk_aligned>
 80097de:	3001      	adds	r0, #1
 80097e0:	d02b      	beq.n	800983a <_malloc_r+0xd2>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	442b      	add	r3, r5
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	e00e      	b.n	8009808 <_malloc_r+0xa0>
 80097ea:	6822      	ldr	r2, [r4, #0]
 80097ec:	1b52      	subs	r2, r2, r5
 80097ee:	d41e      	bmi.n	800982e <_malloc_r+0xc6>
 80097f0:	2a0b      	cmp	r2, #11
 80097f2:	d916      	bls.n	8009822 <_malloc_r+0xba>
 80097f4:	1961      	adds	r1, r4, r5
 80097f6:	42a3      	cmp	r3, r4
 80097f8:	6025      	str	r5, [r4, #0]
 80097fa:	bf18      	it	ne
 80097fc:	6059      	strne	r1, [r3, #4]
 80097fe:	6863      	ldr	r3, [r4, #4]
 8009800:	bf08      	it	eq
 8009802:	6031      	streq	r1, [r6, #0]
 8009804:	5162      	str	r2, [r4, r5]
 8009806:	604b      	str	r3, [r1, #4]
 8009808:	4638      	mov	r0, r7
 800980a:	f104 060b 	add.w	r6, r4, #11
 800980e:	f000 f865 	bl	80098dc <__malloc_unlock>
 8009812:	f026 0607 	bic.w	r6, r6, #7
 8009816:	1d23      	adds	r3, r4, #4
 8009818:	1af2      	subs	r2, r6, r3
 800981a:	d0b6      	beq.n	800978a <_malloc_r+0x22>
 800981c:	1b9b      	subs	r3, r3, r6
 800981e:	50a3      	str	r3, [r4, r2]
 8009820:	e7b3      	b.n	800978a <_malloc_r+0x22>
 8009822:	6862      	ldr	r2, [r4, #4]
 8009824:	42a3      	cmp	r3, r4
 8009826:	bf0c      	ite	eq
 8009828:	6032      	streq	r2, [r6, #0]
 800982a:	605a      	strne	r2, [r3, #4]
 800982c:	e7ec      	b.n	8009808 <_malloc_r+0xa0>
 800982e:	4623      	mov	r3, r4
 8009830:	6864      	ldr	r4, [r4, #4]
 8009832:	e7b2      	b.n	800979a <_malloc_r+0x32>
 8009834:	4634      	mov	r4, r6
 8009836:	6876      	ldr	r6, [r6, #4]
 8009838:	e7b9      	b.n	80097ae <_malloc_r+0x46>
 800983a:	230c      	movs	r3, #12
 800983c:	603b      	str	r3, [r7, #0]
 800983e:	4638      	mov	r0, r7
 8009840:	f000 f84c 	bl	80098dc <__malloc_unlock>
 8009844:	e7a1      	b.n	800978a <_malloc_r+0x22>
 8009846:	6025      	str	r5, [r4, #0]
 8009848:	e7de      	b.n	8009808 <_malloc_r+0xa0>
 800984a:	bf00      	nop
 800984c:	20004d90 	.word	0x20004d90

08009850 <_realloc_r>:
 8009850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009854:	4680      	mov	r8, r0
 8009856:	4614      	mov	r4, r2
 8009858:	460e      	mov	r6, r1
 800985a:	b921      	cbnz	r1, 8009866 <_realloc_r+0x16>
 800985c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009860:	4611      	mov	r1, r2
 8009862:	f7ff bf81 	b.w	8009768 <_malloc_r>
 8009866:	b92a      	cbnz	r2, 8009874 <_realloc_r+0x24>
 8009868:	f7ff ff12 	bl	8009690 <_free_r>
 800986c:	4625      	mov	r5, r4
 800986e:	4628      	mov	r0, r5
 8009870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009874:	f000 f838 	bl	80098e8 <_malloc_usable_size_r>
 8009878:	4284      	cmp	r4, r0
 800987a:	4607      	mov	r7, r0
 800987c:	d802      	bhi.n	8009884 <_realloc_r+0x34>
 800987e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009882:	d812      	bhi.n	80098aa <_realloc_r+0x5a>
 8009884:	4621      	mov	r1, r4
 8009886:	4640      	mov	r0, r8
 8009888:	f7ff ff6e 	bl	8009768 <_malloc_r>
 800988c:	4605      	mov	r5, r0
 800988e:	2800      	cmp	r0, #0
 8009890:	d0ed      	beq.n	800986e <_realloc_r+0x1e>
 8009892:	42bc      	cmp	r4, r7
 8009894:	4622      	mov	r2, r4
 8009896:	4631      	mov	r1, r6
 8009898:	bf28      	it	cs
 800989a:	463a      	movcs	r2, r7
 800989c:	f7ff fbb8 	bl	8009010 <memcpy>
 80098a0:	4631      	mov	r1, r6
 80098a2:	4640      	mov	r0, r8
 80098a4:	f7ff fef4 	bl	8009690 <_free_r>
 80098a8:	e7e1      	b.n	800986e <_realloc_r+0x1e>
 80098aa:	4635      	mov	r5, r6
 80098ac:	e7df      	b.n	800986e <_realloc_r+0x1e>
	...

080098b0 <_sbrk_r>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4d06      	ldr	r5, [pc, #24]	; (80098cc <_sbrk_r+0x1c>)
 80098b4:	2300      	movs	r3, #0
 80098b6:	4604      	mov	r4, r0
 80098b8:	4608      	mov	r0, r1
 80098ba:	602b      	str	r3, [r5, #0]
 80098bc:	f7f8 f9ae 	bl	8001c1c <_sbrk>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d102      	bne.n	80098ca <_sbrk_r+0x1a>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	b103      	cbz	r3, 80098ca <_sbrk_r+0x1a>
 80098c8:	6023      	str	r3, [r4, #0]
 80098ca:	bd38      	pop	{r3, r4, r5, pc}
 80098cc:	20004d98 	.word	0x20004d98

080098d0 <__malloc_lock>:
 80098d0:	4801      	ldr	r0, [pc, #4]	; (80098d8 <__malloc_lock+0x8>)
 80098d2:	f000 b811 	b.w	80098f8 <__retarget_lock_acquire_recursive>
 80098d6:	bf00      	nop
 80098d8:	20004d9c 	.word	0x20004d9c

080098dc <__malloc_unlock>:
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <__malloc_unlock+0x8>)
 80098de:	f000 b80c 	b.w	80098fa <__retarget_lock_release_recursive>
 80098e2:	bf00      	nop
 80098e4:	20004d9c 	.word	0x20004d9c

080098e8 <_malloc_usable_size_r>:
 80098e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ec:	1f18      	subs	r0, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bfbc      	itt	lt
 80098f2:	580b      	ldrlt	r3, [r1, r0]
 80098f4:	18c0      	addlt	r0, r0, r3
 80098f6:	4770      	bx	lr

080098f8 <__retarget_lock_acquire_recursive>:
 80098f8:	4770      	bx	lr

080098fa <__retarget_lock_release_recursive>:
 80098fa:	4770      	bx	lr

080098fc <_init>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	bf00      	nop
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr

08009908 <_fini>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	bf00      	nop
 800990c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990e:	bc08      	pop	{r3}
 8009910:	469e      	mov	lr, r3
 8009912:	4770      	bx	lr
